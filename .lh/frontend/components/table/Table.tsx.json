{
    "sourceFile": "frontend/components/table/Table.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1738510243252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738510291680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n import UpperTableEvents from \"./UpperTableEvents\";\r\n import BreadCrumb from \"../doctorProfile/BreadCrumb\";\r\n import dynamic from \"next/dynamic\";\r\n \r\n-const DynamicStats = dynamic(() => import(\"./Stats\"))\r\n+// const DynamicStats = dynamic(() => import(\"./Stats\"))\r\n interface DataTableProps<TData, TValue> {\r\n   columns: ColumnDef<TData, TValue>[];\r\n   data: TData[];\r\n   patientTableState?: boolean;\r\n"
                },
                {
                    "date": 1738510297548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,13 +88,13 @@\n   return (\r\n     <div className=\"pt-14 min-h-screen w-full px-2 sm:px-0\">\r\n     {/* Table Wrapper */}\r\n     <div className=\"flex flex-col sm:flex-row justify-between items-start\">\r\n-      <DynamicStats\r\n+      {/* <DynamicStats\r\n         StatsSection={breadCrumbString}\r\n         StatsIcon={StatsIcon}\r\n         data={data}\r\n-      />\r\n+      /> */}\r\n     </div>\r\n   \r\n     {/* Table Controls */}\r\n     <UpperTableEvents\r\n"
                },
                {
                    "date": 1738511226521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n     <UpperTableEvents\r\n       globalFilter={globalFilter}\r\n       setGlobalFilter={setGlobalFilter}\r\n       table={table}\r\n-      patientButtonState={patientTableState === true}\r\n+      patientButtonState={patientTableState === true && true}\r\n     />\r\n   \r\n     {/* Table Container */}\r\n     <div className=\"rounded-md border border-l-0 border-[var(--sidebar-background)] overflow-x-auto\">\r\n"
                },
                {
                    "date": 1738511315255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n interface DataTableProps<TData, TValue> {\r\n   columns: ColumnDef<TData, TValue>[];\r\n   data: TData[];\r\n   patientTableState?: boolean;\r\n-  breadCrumbString: string;\r\n+  breadCrumbString?: string;\r\n   StatsIcon?: React.ReactNode;\r\n   message?:string\r\n }\r\n \r\n"
                },
                {
                    "date": 1738513288610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n import UpperTableEvents from \"./UpperTableEvents\";\r\n import BreadCrumb from \"../doctorProfile/BreadCrumb\";\r\n import dynamic from \"next/dynamic\";\r\n \r\n-// const DynamicStats = dynamic(() => import(\"./Stats\"))\r\n+const DynamicStats = dynamic(() => import(\"./Stats\"))\r\n interface DataTableProps<TData, TValue> {\r\n   columns: ColumnDef<TData, TValue>[];\r\n   data: TData[];\r\n   patientTableState?: boolean;\r\n"
                }
            ],
            "date": 1738510243252,
            "name": "Commit-0",
            "content": "\"use client\";\r\nimport {\r\n  ColumnDef,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  SortingState,\r\n  useReactTable,\r\n  VisibilityState,\r\n} from \"@tanstack/react-table\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Pagination from \"./Pagination\";\r\nimport UpperTableEvents from \"./UpperTableEvents\";\r\nimport BreadCrumb from \"../doctorProfile/BreadCrumb\";\r\nimport dynamic from \"next/dynamic\";\r\n\r\nconst DynamicStats = dynamic(() => import(\"./Stats\"))\r\ninterface DataTableProps<TData, TValue> {\r\n  columns: ColumnDef<TData, TValue>[];\r\n  data: TData[];\r\n  patientTableState?: boolean;\r\n  breadCrumbString: string;\r\n  StatsIcon?: React.ReactNode;\r\n  message?:string\r\n}\r\n\r\nexport function DataTable<TData, TValue>({\r\n  columns,\r\n  data,\r\n  patientTableState,\r\n  breadCrumbString,\r\n  StatsIcon,\r\n  message\r\n}: DataTableProps<TData, TValue>) {\r\n  const [pagination, setPagination] = useState({\r\n    pageIndex: 0,\r\n    pageSize: 8,\r\n  });\r\n  const [sorting, setSorting] = useState<SortingState>([]);\r\n  const [globalFilter, setGlobalFilter] = useState<string>(\"\");\r\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    state: { pagination, sorting, globalFilter, columnVisibility },\r\n    onPaginationChange: setPagination,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    onSortingChange: setSorting,\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    onGlobalFilterChange: setGlobalFilter,\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n  });\r\n\r\n  const isTablet = useMediaQuery({ query: \"(min-width: 997px)\" });\r\n\r\n  const changeColumnVisibilityBasedOnMedia = () => {\r\n    table\r\n      .getAllColumns()\r\n      .filter((column) => column.getCanHide())\r\n      .map((column) => {\r\n        if (!isTablet) {\r\n          if (column.id.startsWith(\"email\") || column.id.startsWith(\"status\")) {\r\n            column.toggleVisibility(false);\r\n          }\r\n        } else {\r\n          column.toggleVisibility(true);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    changeColumnVisibilityBasedOnMedia();\r\n  }, [isTablet]);\r\n  return (\r\n    <div className=\"pt-14 min-h-screen w-full px-2 sm:px-0\">\r\n    {/* Table Wrapper */}\r\n    <div className=\"flex flex-col sm:flex-row justify-between items-start\">\r\n      <DynamicStats\r\n        StatsSection={breadCrumbString}\r\n        StatsIcon={StatsIcon}\r\n        data={data}\r\n      />\r\n    </div>\r\n  \r\n    {/* Table Controls */}\r\n    <UpperTableEvents\r\n      globalFilter={globalFilter}\r\n      setGlobalFilter={setGlobalFilter}\r\n      table={table}\r\n      patientButtonState={patientTableState === true}\r\n    />\r\n  \r\n    {/* Table Container */}\r\n    <div className=\"rounded-md border border-l-0 border-[var(--sidebar-background)] overflow-x-auto\">\r\n      <Table>\r\n        <TableHeader className=\"bg-[var(--sidebar-background)]\">\r\n          {table.getHeaderGroups().map((headerGroup) => (\r\n            <TableRow key={headerGroup.id}>\r\n              {headerGroup.headers.map((header) => (\r\n                <TableHead\r\n                  key={header.id}\r\n                  className=\"text-[12px] px-2 whitespace-nowrap\"\r\n                >\r\n                  {header.isPlaceholder\r\n                    ? null\r\n                    : flexRender(\r\n                        header.column.columnDef.header,\r\n                        header.getContext()\r\n                      )}\r\n                </TableHead>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableHeader>\r\n        <TableBody>\r\n          {table?.getRowModel()?.rows?.length ? (\r\n            table.getRowModel().rows.map((row) => (\r\n              <TableRow\r\n                key={row.id}\r\n                data-state={row.getIsSelected() && \"selected\"}\r\n                className=\"bg-[var(--sidebar-background)] hover:bg-slate-200 dark:border-[var(--sidebar-accent)] dark:hover:bg-[var(--sidebar-accent)] cursor-pointer\"\r\n              >\r\n                {row.getVisibleCells().map((cell) => (\r\n                  <TableCell\r\n                    key={cell.id}\r\n                    className=\"p-2 text-[12px]  whitespace-nowrap\"\r\n                  >\r\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))\r\n          ) : (\r\n            <TableRow>\r\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n                {message}\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  \r\n    {/* Pagination */}\r\n    <Pagination\r\n      props={{\r\n        table,\r\n        pagination,\r\n      }}\r\n    />\r\n  </div>\r\n  \r\n  );\r\n}\r\n"
        }
    ]
}