{
    "sourceFile": "frontend/components/AddAppointment.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1738531228408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738531234475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n import { DashboardHook } from \"./context/Dashboardprovider\";\r\n import { CreateNotification, userRole } from \"./togglers/TopBarEvents\";\r\n \r\n \r\n-const A = () => {\r\n+const AddAppointment = () => {\r\n   const { data: session } = useSession();\r\n   const router = useRouter();\r\n \r\n   const [isLoading, setIsLoading] = useState(false);\r\n@@ -230,7 +230,7 @@\n     </React.Fragment>\r\n   );\r\n };\r\n \r\n-export default A;\r\n+export default AddAppointment;\r\n \r\n export const dynamic = \"force-dynamic\";\r\n"
                },
                {
                    "date": 1738711949552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n       } else if (error instanceof Error) {\r\n         api.error({\r\n           message: \"Unexpected Error\",\r\n           description: error.message,\r\n-          showProgress: true,\r\n+          showProgress: false,\r\n           pauseOnHover: false,\r\n         });\r\n       }\r\n     }\r\n@@ -232,5 +232,5 @@\n };\r\n \r\n export default AddAppointment;\r\n \r\n-export const dynamic = \"force-dynamic\";\r\n+\r\n"
                },
                {
                    "date": 1738711960047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n       } else if (error instanceof Error) {\r\n         api.error({\r\n           message: \"Unexpected Error\",\r\n           description: error.message,\r\n-          showProgress: false,\r\n+          showProgress: true,\r\n           pauseOnHover: false,\r\n         });\r\n       }\r\n     }\r\n"
                }
            ],
            "date": 1738531228408,
            "name": "Commit-0",
            "content": "\"use client\";\r\nimport React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Form } from \"@/components/ui/form\";\r\nimport CustomFormField from \"./CustomFormField\";\r\nimport { FormFieldType } from \"./CustomFormField\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { User } from \"lucide-react\";\r\nimport SubmitButton from \"./togglers/SubmitButton\";\r\nimport { AppointmentSchema } from \"@/lib/vaildation\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport axios from \"axios\";\r\nimport { CalenderHook } from \"./context/CalenderProvider\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport {  differenceInMinutes, isSameDay } from \"date-fns\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {  Dialog, DialogContent, DialogTitle } from \"@mui/material/\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { useSession } from \"next-auth/react\";\r\nimport { DashboardHook } from \"./context/Dashboardprovider\";\r\nimport { CreateNotification, userRole } from \"./togglers/TopBarEvents\";\r\n\r\n\r\nconst A = () => {\r\n  const { data: session } = useSession();\r\n  const router = useRouter();\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const { visible, setVisible, calendarDays, date, disabled } = CalenderHook();\r\n\r\n  const { api, contextHolder } = DashboardHook();\r\n\r\n  const handleClickOpen = () => {\r\n    setVisible(true);\r\n  };\r\n  const handleClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  const onSubmit = async (values: Zod.infer<typeof AppointmentSchema>) => {\r\n    setIsLoading(true);\r\n\r\n    const formData = new FormData();\r\n\r\n    const hoursInterval = differenceInMinutes(values.endDate, values.startDate);\r\n    const startDate = values.startDate;\r\n    const endDate = values.endDate;\r\n    startDate.setSeconds(0);\r\n    startDate.setMilliseconds(0);\r\n    endDate.setSeconds(0);\r\n    endDate.setMilliseconds(0);\r\n    formData.append(\"task\", values.Task);\r\n    formData.append(\"startDate\", startDate.toString());\r\n    formData.append(\"endDate\", endDate.toString());\r\n    formData.append(\"interval\", `${(hoursInterval / 30) * 100}`);\r\n    formData.append(\"color\", `#${values.color}`);\r\n    formData.append(\"userId\", session?.user.id as string);\r\n    formData.append(\"description\", values.description as string);\r\n\r\n\r\n    const notificationData = CreateNotification({\r\n      type: \"appointment creation\",\r\n      title: \"Appointment Creation\",\r\n      description: \"created a new appointment\",\r\n      assignedBy: `${userRole(session)} ${session?.user.name}`,\r\n      user: `${session?.user.id}`,\r\n      eventType: \"creation\",\r\n    });\r\n    try {\r\n  \r\n      const response = await axios.post(\r\n        `http://localhost:8080/api/appointments`,\r\n        formData\r\n      );\r\n\r\n      if (response.status === 201) {\r\n        api.success({\r\n          message: \"Appointment Created Successfully\",\r\n          description: \"Your appointment has been successfully created\",\r\n          showProgress: true,\r\n          pauseOnHover: false,\r\n        });\r\n\r\n        await axios.post(`http://localhost:8080/api/notifications/create`,notificationData)\r\n        setVisible(false);\r\n\r\n        router.refresh();\r\n      }\r\n    } catch (error: unknown) {\r\n      if (axios.isAxiosError(error)) {\r\n        if (error.response) {\r\n          api.error({\r\n            message: `${error.response.data.message}`,\r\n            description: \"something went wrong\",\r\n            showProgress: true,\r\n            pauseOnHover: false,\r\n          });\r\n        } else {\r\n          api.error({\r\n            message: \"No Response from Server\",\r\n            description:\r\n              \"Please check your network connection or try again later.\",\r\n            showProgress: true,\r\n            pauseOnHover: false,\r\n          });\r\n        }\r\n      } else if (error instanceof Error) {\r\n        api.error({\r\n          message: \"Unexpected Error\",\r\n          description: error.message,\r\n          showProgress: true,\r\n          pauseOnHover: false,\r\n        });\r\n      }\r\n    }\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const form = useForm<Zod.infer<typeof AppointmentSchema>>({\r\n    resolver: zodResolver(AppointmentSchema),\r\n    defaultValues: {\r\n      Task: \"\",\r\n      startDate: new Date(),\r\n      endDate: new Date(),\r\n      color: \"242c55\",\r\n      description: \"\",\r\n    },\r\n  });\r\n  return (\r\n    <React.Fragment>\r\n      {contextHolder}\r\n      <Button className=\"AppointmentCreate\" onClick={handleClickOpen}>\r\n        Add Event\r\n      </Button>\r\n      <Dialog\r\n        onClose={handleClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={visible}\r\n        style={{zIndex: 1000}}\r\n        fullWidth\r\n        maxWidth=\"md\"\r\n      >\r\n        <DialogTitle\r\n          sx={{ fontSize: \"18px\", fontWeight: \"bold\" }}\r\n          className=\"dark:bg-[var(--sidebar-background)] dark:text-slate-50\"\r\n        >\r\n          Create Appointment\r\n        </DialogTitle>\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          onClick={handleClose}\r\n          sx={(theme) => ({\r\n            position: \"absolute\",\r\n            right: 8,\r\n            top: 8,\r\n            color: theme.palette.grey[500],\r\n          })}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n        <DialogContent dividers className=\"dark:bg-[var(--sidebar-background)]\">\r\n          <Form {...form}>\r\n            <form\r\n              onSubmit={form.handleSubmit(onSubmit)}\r\n              className=\"flex-1 space-y-12 \"\r\n            >\r\n              <CustomFormField\r\n                control={form.control}\r\n                Lucide={<User className=\"dark:text-dark-600\" />}\r\n                placeholder=\"chemistry at 7PM\"\r\n                label=\"Task\"\r\n                fieldType={FormFieldType.INPUT}\r\n                name=\"Task\"\r\n                error={form.formState.errors.Task}\r\n                state\r\n              />\r\n              <CustomFormField\r\n                control={form.control}\r\n                fieldType={FormFieldType.TEXTAREA}\r\n                name=\"description\"\r\n                placeholder=\"Details about appointment\"\r\n                label=\"Description\"\r\n                Lucide={<User className=\"dark:text-dark-600\" />}\r\n              />\r\n              <CustomFormField\r\n                control={form.control}\r\n                fieldType={FormFieldType.DATE}\r\n                label=\"Start Time\"\r\n                name=\"startDate\"\r\n                showTimeSelect\r\n                calenderDays={calendarDays}\r\n                error={form.formState.errors.startDate}\r\n              />\r\n              <section className=\"flex \">\r\n                <div className=\"flex items-center w-[80%]\">\r\n                  <CustomFormField\r\n                    control={form.control}\r\n                    fieldType={FormFieldType.DATE}\r\n                    label=\"End Time\"\r\n                    name=\"endDate\"\r\n                    showTimeSelect\r\n                    calenderDays={[date]}\r\n                    disabled={disabled}\r\n                  />\r\n                </div>\r\n                <div className=\"flex items-start w-[20%] ml-2\">\r\n                  <CustomFormField\r\n                    control={form.control}\r\n                    fieldType={FormFieldType.COLOR}\r\n                    label=\"Color\"\r\n                    name=\"color\"\r\n                  />\r\n                </div>\r\n              </section>\r\n\r\n              <SubmitButton\r\n                isLoading={isLoading}\r\n                className=\"bg-[#6366f1] w-full text-slate-50\"\r\n              >\r\n                Create Appointment\r\n              </SubmitButton>\r\n            </form>\r\n          </Form>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default A;\r\n\r\nexport const dynamic = \"force-dynamic\";\r\n"
        }
    ]
}