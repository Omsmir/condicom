{
    "sourceFile": "frontend/components/doctorProfile/SingleAppointment.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1739213226159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739213237666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n \r\n     return (\r\n       <React.Fragment>\r\n         <AppointmentDateDeterminent\r\n-        key={}\r\n+        key={appo}\r\n           appointments={SpecificAppointmentsToHandle}\r\n         />\r\n \r\n         {SpecificAppointmentsToHandle && (\r\n"
                },
                {
                    "date": 1739213243384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n \r\n     return (\r\n       <React.Fragment>\r\n         <AppointmentDateDeterminent\r\n-        key={appo}\r\n+        key={appointment.}\r\n           appointments={SpecificAppointmentsToHandle}\r\n         />\r\n \r\n         {SpecificAppointmentsToHandle && (\r\n"
                },
                {
                    "date": 1739213249939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,18 +52,17 @@\n     return appointments\r\n       ?.map((appointment) => {\r\n         if (isToday(appointment.startDate)) {\r\n           return <DateStructure time=\"today\" />;\r\n-        } else if (isAfter(appointment.startDate,currDate)) {\r\n+        } else if (isAfter(appointment.startDate, currDate)) {\r\n           return <DateStructure time=\"Upcoming\" />;\r\n         }\r\n \r\n         return <DateStructure time=\"other\" />;\r\n       })\r\n       .slice(0, 1);\r\n   };\r\n \r\n-\r\n   const AppointmentStructure = ({\r\n     appointment,\r\n     index,\r\n   }: {\r\n@@ -112,23 +111,21 @@\n \r\n     return (\r\n       <React.Fragment>\r\n         <AppointmentDateDeterminent\r\n-        key={appointment.}\r\n           appointments={SpecificAppointmentsToHandle}\r\n         />\r\n \r\n-        {SpecificAppointmentsToHandle && (\r\n+        {SpecificAppointmentsToHandle &&\r\n           SpecificAppointmentsToHandle.map((appointment, index) => {\r\n             return (\r\n               <AppointmentStructure\r\n                 appointment={appointment}\r\n                 index={index}\r\n                 key={index}\r\n               />\r\n             );\r\n-          })\r\n-        ) }\r\n+          })}\r\n       </React.Fragment>\r\n     );\r\n   };\r\n   const AppointmentJsx = () => {\r\n"
                },
                {
                    "date": 1739213287874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,8 +111,9 @@\n \r\n     return (\r\n       <React.Fragment>\r\n         <AppointmentDateDeterminent\r\n+        \r\n           appointments={SpecificAppointmentsToHandle}\r\n         />\r\n \r\n         {SpecificAppointmentsToHandle &&\r\n"
                },
                {
                    "date": 1739213298942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n \r\n     return (\r\n       <React.Fragment>\r\n         <AppointmentDateDeterminent\r\n-        \r\n+        key={Date.now()}\r\n           appointments={SpecificAppointmentsToHandle}\r\n         />\r\n \r\n         {SpecificAppointmentsToHandle &&\r\n"
                },
                {
                    "date": 1739213350215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n             return (\r\n               <AppointmentStructure\r\n                 appointment={appointment}\r\n                 index={index}\r\n-                key={appointment.i}\r\n+                key={appointment._id}\r\n               />\r\n             );\r\n           })}\r\n       </React.Fragment>\r\n"
                },
                {
                    "date": 1739213470906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n   };\r\n   const AppointmentJsx = () => {\r\n     return appointments && appointments.length > 0 ? (\r\n       <React.Fragment>\r\n-        <SchuduleAppointmentStructure appointments={appointments} isFuture key={app} />\r\n+        <SchuduleAppointmentStructure appointments={appointments} isFuture key={appo} />\r\n \r\n         <SchuduleAppointmentStructure\r\n           isTrue={isToday}\r\n           appointments={appointments}\r\n"
                }
            ],
            "date": 1739213226159,
            "name": "Commit-0",
            "content": "\"use client\";\r\nimport { Appointment } from \"@/types\";\r\nimport {\r\n  isToday,\r\n  format,\r\n  isTomorrow,\r\n  isYesterday,\r\n  isBefore,\r\n  getDate,\r\n  isAfter,\r\n} from \"date-fns\";\r\nimport React from \"react\";\r\nimport { CalenderHook } from \"../context/CalenderProvider\";\r\nimport clsx from \"clsx\";\r\n\r\nconst SingleAppointment = ({\r\n  appointments,\r\n}: {\r\n  appointments: Appointment[] | undefined;\r\n}) => {\r\n  const AppointmentDate = (appointment: Appointment) => {\r\n    const startDate = format(appointment.startDate, \"PPpp\");\r\n\r\n    const endDate = format(appointment.endDate, \"p\");\r\n\r\n    return `${startDate} - ${endDate}`;\r\n  };\r\n\r\n  const { currDate } = CalenderHook();\r\n\r\n  const AppointmentDateDeterminent = ({\r\n    appointments,\r\n  }: {\r\n    appointments: Appointment[] | undefined;\r\n  }) => {\r\n    const DateStructure = ({ time }: { time: string }) => {\r\n      return (\r\n        <div className=\"flex p-4\">\r\n          <h1\r\n            className={clsx(\r\n              \"text-slate-500 font-medium capitalize text-[14px]\",\r\n              {\r\n                \"text-slate-900 dark:text-slate-50 font-bold\": time == \"today\",\r\n              }\r\n            )}\r\n          >\r\n            {time}\r\n          </h1>\r\n        </div>\r\n      );\r\n    };\r\n    return appointments\r\n      ?.map((appointment) => {\r\n        if (isToday(appointment.startDate)) {\r\n          return <DateStructure time=\"today\" />;\r\n        } else if (isAfter(appointment.startDate,currDate)) {\r\n          return <DateStructure time=\"Upcoming\" />;\r\n        }\r\n\r\n        return <DateStructure time=\"other\" />;\r\n      })\r\n      .slice(0, 1);\r\n  };\r\n\r\n\r\n  const AppointmentStructure = ({\r\n    appointment,\r\n    index,\r\n  }: {\r\n    appointment: Appointment;\r\n    index: number;\r\n  }) => {\r\n    return (\r\n      <div\r\n        key={index}\r\n        className=\"flex cursor-pointer justify-between mb-2 rounded-md first-of-type:mt-4 mx-4 last-of-type:mb-4 shadow-md shadow-slate-900 transition-all hover:scale-[1.004] hover:opacity-90\"\r\n        style={{ backgroundColor: `${appointment.color}` }}\r\n      >\r\n        <div className=\"flex flex-col justify-center items-start p-3 flex-1\">\r\n          <h1 className=\"text-sm font-medium text-white\">{appointment.task}</h1>\r\n          <div className=\"flex justify-between items-center w-full\">\r\n            <p className=\"text-[12px] text-slate-200\">\r\n              {AppointmentDate(appointment)}\r\n            </p>\r\n            <p className=\"text-[12px] text-slate-200\">\r\n              {format(appointment.createdAt, \"Pp\")}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const SchuduleAppointmentStructure = ({\r\n    isFuture,\r\n    isTrue,\r\n    appointments,\r\n  }: {\r\n    isFuture?: boolean;\r\n    isTrue?: (date: Date) => boolean;\r\n    appointments: Appointment[] | undefined;\r\n  }) => {\r\n    const SpecificAppointmentsToHandle = appointments?.filter((appointment) => {\r\n      if (isTrue) {\r\n        return isTrue(appointment.startDate);\r\n      } else if (isFuture) {\r\n        return isAfter(getDate(appointment.startDate), currDate.getDate());\r\n      } else {\r\n        return isBefore(getDate(appointment.startDate), currDate.getDate());\r\n      }\r\n    });\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <AppointmentDateDeterminent\r\n        key={}\r\n          appointments={SpecificAppointmentsToHandle}\r\n        />\r\n\r\n        {SpecificAppointmentsToHandle && (\r\n          SpecificAppointmentsToHandle.map((appointment, index) => {\r\n            return (\r\n              <AppointmentStructure\r\n                appointment={appointment}\r\n                index={index}\r\n                key={index}\r\n              />\r\n            );\r\n          })\r\n        ) }\r\n      </React.Fragment>\r\n    );\r\n  };\r\n  const AppointmentJsx = () => {\r\n    return appointments && appointments.length > 0 ? (\r\n      <React.Fragment>\r\n        <SchuduleAppointmentStructure appointments={appointments} isFuture />\r\n\r\n        <SchuduleAppointmentStructure\r\n          isTrue={isToday}\r\n          appointments={appointments}\r\n        />\r\n        <SchuduleAppointmentStructure appointments={appointments} />\r\n      </React.Fragment>\r\n    ) : (\r\n      <div className=\"flex justify-center items-center h-full\">\r\n        <h1>No Appointments</h1>\r\n      </div>\r\n    );\r\n  };\r\n  return <AppointmentJsx />;\r\n};\r\n\r\nexport default SingleAppointment;\r\n"
        }
    ]
}