{
    "sourceFile": "frontend/components/CustomFormField.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1738505048772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738505062366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,10 @@\n   SEARCH = \"search\",\r\n   DATE = \"datePicker\",\r\n   PHONE = \"phoneInput\",\r\n   COLOR = \"colorPicker\",\r\n-  COUNTRY= \"country\"\r\n+  COUNTRY= \"country\",\r\n+  CHEC\r\n }\r\n \r\n interface CustomProps {\r\n   control: Control<any>;\r\n"
                },
                {
                    "date": 1738505069366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   DATE = \"datePicker\",\r\n   PHONE = \"phoneInput\",\r\n   COLOR = \"colorPicker\",\r\n   COUNTRY= \"country\",\r\n-  CHEC\r\n+  CHECKBOX = \"checkbox\"\r\n }\r\n \r\n interface CustomProps {\r\n   control: Control<any>;\r\n"
                },
                {
                    "date": 1738505950988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n import { ColorPicker } from \"antd\";\r\n import ReactCountryFlagsSelect from 'react-country-flags-select';\r\n import { cn } from \"@/lib/utils\";\r\n import { CheckCircleFilled, CloseCircleFilled } from \"@ant-design/icons\";\r\n+import { Checkbox } from \"./ui/checkbox\";\r\n \r\n \r\n \r\n export enum FormFieldType {\r\n@@ -68,9 +69,10 @@\n   showTimeSelect?: boolean;\r\n   timeOnly?: boolean;\r\n   calenderDays?: Date[];\r\n   innerState?: boolean;\r\n-  className?: string;\r\n+  className?: string;,\r\n+  optionalLabel\r\n }\r\n \r\n const RenderField = ({ field, props }: { field: any; props: CustomProps }) => {\r\n   const { date, setDate, setDisabled } = CalenderHook();\r\n"
                },
                {
                    "date": 1738515222665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,10 +69,10 @@\n   showTimeSelect?: boolean;\r\n   timeOnly?: boolean;\r\n   calenderDays?: Date[];\r\n   innerState?: boolean;\r\n-  className?: string;,\r\n-  optionalLabel\r\n+  className?: string;\r\n+  optionalLabel?:string;\r\n }\r\n \r\n const RenderField = ({ field, props }: { field: any; props: CustomProps }) => {\r\n   const { date, setDate, setDisabled } = CalenderHook();\r\n@@ -195,9 +195,9 @@\n         </FormControl>\r\n       );\r\n     case FormFieldType.DATE:\r\n       return (\r\n-        <div className=\"ml-2\">\r\n+        <div >\r\n           <FormControl>\r\n             <Calendar\r\n               value={field.value || date}\r\n               onChange={(e) => handleChange(e)}\r\n"
                },
                {
                    "date": 1738515324519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,9 +283,9 @@\n         <FormItem className=\"flex-1\">\r\n           <div className=\"flex justify-between\">\r\n             {props.label && (\r\n               <FormLabel className=\"shad-input-label dark:text-slate-50\">\r\n-                \r\n+                h1\r\n               </FormLabel>\r\n             )}\r\n             {props.forget && (\r\n               <Link href={`/reset`}>\r\n"
                },
                {
                    "date": 1738515339880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,8 +285,9 @@\n             {props.label && (\r\n               <FormLabel className=\"shad-input-label dark:text-slate-50\">\r\n                 <div className=\"flex\">\r\n                 <h1>{props.label}</h1>\r\n+                \r\n                 </div>\r\n               </FormLabel>\r\n             )}\r\n             {props.forget && (\r\n"
                }
            ],
            "date": 1738505048772,
            "name": "Commit-0",
            "content": "\"use client\";\r\nimport {\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Control } from \"react-hook-form\";\r\nimport { Textarea } from \"./ui/textarea\";\r\nimport { XCircle, CheckCircle } from \"lucide-react\";\r\n\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\n\r\nimport { Calendar } from \"primereact/calendar\";\r\n\r\nimport Link from \"next/link\";\r\nimport PhoneInput from \"react-phone-number-input\";\r\nimport \"react-phone-number-input/style.css\";\r\nimport { CalenderHook } from \"./context/CalenderProvider\";\r\nimport { ColorPicker } from \"antd\";\r\nimport ReactCountryFlagsSelect from 'react-country-flags-select';\r\nimport { cn } from \"@/lib/utils\";\r\nimport { CheckCircleFilled, CloseCircleFilled } from \"@ant-design/icons\";\r\n\r\n\r\n\r\nexport enum FormFieldType {\r\n  INPUT = \"input\",\r\n  PASSWORD = \"password\",\r\n  TEXTAREA = \"textarea\",\r\n  SELECT = \"select\",\r\n  NUMBER = \"number\",\r\n  SKELETON = \"skeleton\",\r\n  SEARCH = \"search\",\r\n  DATE = \"datePicker\",\r\n  PHONE = \"phoneInput\",\r\n  COLOR = \"colorPicker\",\r\n  COUNTRY= \"country\"\r\n}\r\n\r\ninterface CustomProps {\r\n  control: Control<any>;\r\n  name: string;\r\n  label?: string;\r\n  placeholder?: string;\r\n  iconSrc?: string;\r\n  icon?: (icon: any) => React.ReactNode;\r\n  iconAlt?: string;\r\n  disabled?: boolean;\r\n  Lucide?: React.ReactNode;\r\n  children?: React.ReactNode;\r\n  renderSkeleton?: (field: any) => React.ReactNode;\r\n  fieldType: FormFieldType;\r\n  min?: number;\r\n  max?: number;\r\n  type?: string;\r\n  error?: any;\r\n  forget?: boolean;\r\n  state?: boolean;\r\n  showTimeSelect?: boolean;\r\n  timeOnly?: boolean;\r\n  calenderDays?: Date[];\r\n  innerState?: boolean;\r\n  className?: string;\r\n}\r\n\r\nconst RenderField = ({ field, props }: { field: any; props: CustomProps }) => {\r\n  const { date, setDate, setDisabled } = CalenderHook();\r\n  const ErrorComponent = () => {\r\n    if (props.state) {\r\n      if (props.error) {\r\n        return <CloseCircleFilled className=\" text-red-500\" size={20} />;\r\n      } else if (field.value) {\r\n        return <CheckCircleFilled className=\" text-green-500\" size={20} />;\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: any) => {\r\n    field.onChange(e.value);\r\n\r\n    setDate(e.value);\r\n\r\n    setDisabled(false);\r\n  };\r\n\r\n  const classes = {\r\n    searchSelect: \"Country focus:outline-none\",\r\n    optionsWrapper: \"countryOptionsWrapper\",\r\n    option: \"hover:bg-slate-500\",\r\n  };\r\n\r\n  switch (props.fieldType) {\r\n    case FormFieldType.INPUT:\r\n      return (\r\n        <div className=\"flex justify-center items-center rounded-md border bg-slate-100 dark:border-[var(--sidebar-accent)] dark:bg-[var(--sidebar-accent)]\">\r\n          {props.Lucide && (\r\n            <span className=\"ml-2 w-[24px] h-[24px]\">{props.Lucide}</span>\r\n          )}\r\n          <FormControl>\r\n            <Input\r\n              placeholder={props.placeholder}\r\n              {...field}\r\n              className=\"shad-input border-0\"\r\n            />\r\n          </FormControl>\r\n          <div className=\"flex justify-center items-center mx-2\">\r\n            <ErrorComponent />\r\n          </div>\r\n        </div>\r\n      );\r\n    case FormFieldType.PASSWORD:\r\n      return (\r\n        <div className=\"flex justify-center items-center rounded-md border border-slate-200 bg-slate-100\">\r\n          {props.Lucide && (\r\n            <span className=\"ml-2 w-[24px] h-[24px]\">{props.Lucide}</span>\r\n          )}\r\n          <FormControl>\r\n            <Input\r\n              placeholder={props.placeholder}\r\n              {...field}\r\n              type={props.type}\r\n              className=\"shad-input border-0\"\r\n            />\r\n          </FormControl>\r\n          <div className=\"flex justify-center items-center mx-2\">\r\n            {props.error ? (\r\n              <CloseCircleFilled className=\" text-red-500 mx-2\" size={20} />\r\n            ) : (\r\n              field.value && (\r\n                <>\r\n                  <CheckCircleFilled className=\" text-green-500 mx-2\" size={20} />\r\n                  {props.children}\r\n                </>\r\n              )\r\n            )}\r\n          </div>\r\n        </div>\r\n      );\r\n    case FormFieldType.NUMBER:\r\n      return (\r\n        <div className=\"flex rounded-md border justify-center items-center border-slate-200 bg-slate-100\">\r\n          {props.Lucide && (\r\n            <span className=\"ml-2 w-[24px] h-[24px]\">{props.Lucide}</span>\r\n          )}\r\n          <FormControl>\r\n            <input\r\n              type=\"number\"\r\n              placeholder={props.placeholder}\r\n              {...field}\r\n              min={props.min}\r\n              max={props.max}\r\n              className=\"shad-input flex-1 border-0 px-4 focus:outline-none\"\r\n            />\r\n          </FormControl>\r\n        </div>\r\n      );\r\n    case FormFieldType.SKELETON:\r\n      return props.renderSkeleton ? props.renderSkeleton(field) : null;\r\n    case FormFieldType.TEXTAREA:\r\n      return (\r\n        <FormControl>\r\n          <Textarea\r\n            placeholder={props.placeholder}\r\n            {...field}\r\n            className=\"shad-textArea border-0\"\r\n          />\r\n        </FormControl>\r\n      );\r\n    case FormFieldType.SELECT:\r\n      return (\r\n        <FormControl>\r\n          <Select onValueChange={field.onChange} value={field.value}>\r\n            <FormControl>\r\n              <SelectTrigger className=\"shad-select-trigger text-dark-500\">\r\n                <SelectValue placeholder={props.placeholder} />\r\n              </SelectTrigger>\r\n            </FormControl>\r\n            <SelectContent className={cn(\"shad-select-content\",props.className)}>\r\n              {props.children}\r\n            </SelectContent>\r\n          </Select>\r\n        </FormControl>\r\n      );\r\n    case FormFieldType.DATE:\r\n      return (\r\n        <div className=\"ml-2\">\r\n          <FormControl>\r\n            <Calendar\r\n              value={field.value || date}\r\n              onChange={(e) => handleChange(e)}\r\n              showIcon\r\n              className=\"date-picker pl-2 focus:shadow-none p-calender\"\r\n              placeholder=\"select a date\"\r\n              variant=\"filled\"\r\n              dateFormat=\"mm/dd/yy\"\r\n              showTime={props.showTimeSelect || undefined}\r\n              timeOnly={props.timeOnly || undefined}\r\n              hourFormat=\"12\"\r\n              enabledDates={props.calenderDays}\r\n              stepMinute={30}\r\n              disabled={props.disabled}\r\n              touchUI\r\n            />\r\n          </FormControl>\r\n        </div>\r\n      );\r\n    case FormFieldType.PHONE:\r\n      return (\r\n        <FormControl>\r\n          <PhoneInput\r\n            defaultCountry=\"EG\"\r\n            withCountryCallingCode\r\n            value={field.value}\r\n            onChange={field.onChange}\r\n            international\r\n            className=\"input-phone\"\r\n          />\r\n        </FormControl>\r\n      );\r\n    case FormFieldType.COUNTRY:\r\n      return (\r\n        <div className=\"h-11\">\r\n          <FormControl>\r\n          <ReactCountryFlagsSelect\r\n            selected={field.value}\r\n            onSelect={(e) => field.onChange(e)}\r\n            searchable\r\n            searchPlaceholder={props.placeholder}\r\n            optionsListMaxHeight={150}\r\n            classes={classes}\r\n            fullWidth\r\n          />\r\n        </FormControl>\r\n        </div>\r\n      )\r\n      case FormFieldType.COLOR:\r\n      return (\r\n       <div className=\"flex justify-center items-center\">\r\n         <FormControl>\r\n          <ColorPicker defaultValue=\"#242c55\" className=\"w-full h-11\" value={field.value} onChange={(color) => field.onChange(color.toHex())} />\r\n        </FormControl>\r\n       </div>\r\n      );\r\n      case FormFieldType.CHECKBOX:\r\n        return (\r\n          <FormControl>\r\n            <div className=\"flex justify-start items-center\">\r\n              <label htmlFor={props.name} className=\"checkbox-label mr-1\">\r\n                {props.label}\r\n              </label>\r\n              <Checkbox\r\n                id={props.name}\r\n                onCheckedChange={field.onChange}\r\n                checked={field.value}\r\n              />\r\n            </div>\r\n          </FormControl>\r\n        );\r\n      default:\r\n      return null;\r\n  }\r\n};\r\n\r\nconst CustomFormField = (props: CustomProps) => {\r\n  return (\r\n    <FormField\r\n      control={props.control}\r\n      name={props.name}\r\n      render={({ field }) => (\r\n        <FormItem className=\"flex-1\">\r\n          <div className=\"flex justify-between\">\r\n            {props.label && (\r\n              <FormLabel className=\"shad-input-label dark:text-slate-50\">\r\n                {props.label}\r\n              </FormLabel>\r\n            )}\r\n            {props.forget && (\r\n              <Link href={`/reset`}>\r\n                <p className=\"text-sm text-sky-700 hover:underline\">\r\n                  Forget Password\r\n                </p>\r\n              </Link>\r\n            )}\r\n          </div>\r\n          <RenderField field={field} props={props} />\r\n\r\n          <FormMessage className=\"shad-error\" />\r\n        </FormItem>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomFormField;\r\n"
        }
    ]
}