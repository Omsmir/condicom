{
    "sourceFile": "frontend/components/settings/code/codeGeneration.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1741036134273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741036141135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n import { formSchema } from \"@/lib/vaildation\";\r\n import Swal from \"sweetalert2\";\r\n import { useRouter } from \"next/navigation\";\r\n \r\n-const CreateForm = () => {\r\n+const Code = () => {\r\n const router = useRouter()\r\n   const [isLoading, setIsLoading] = useState(false);\r\n   \r\n   const onSubmit = async (values: z.infer<typeof formSchema>) => {\r\n@@ -136,5 +136,5 @@\n     </Form>\r\n   );\r\n };\r\n \r\n-export default CreateForm;\r\n+export default Code;\r\n"
                },
                {
                    "date": 1741036149015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,140 +1,106 @@\n \"use client\";\r\n-\r\n-import { zodResolver } from \"@hookform/resolvers/zod\";\r\n-import { useForm } from \"react-hook-form\";\r\n+import React from \"react\";\r\n import { z } from \"zod\";\r\n-import { Form, FormControl } from \"@/components/ui/form\";\r\n-import CustomFormField from \"./CustomFormField\";\r\n-import { FormFieldType } from \"./CustomFormField\";\r\n-import FileUploader from \"./FileUploader\";\r\n-import { useState } from \"react\";\r\n-import { User, DollarSign } from \"lucide-react\";\r\n-import SubmitButton from \"./togglers/SubmitButton\";\r\n-import { formSchema } from \"@/lib/vaildation\";\r\n-import Swal from \"sweetalert2\";\r\n-import { useRouter } from \"next/navigation\";\r\n+import { Form } from \"@/components/ui/form\";\r\n+import SubmitButton from \"../../togglers/SubmitButton\";\r\n+import { AccountSchema } from \"@/lib/vaildation\";\r\n+import { DashboardHook } from \"../../context/Dashboardprovider\";\r\n+import { AccountHook } from \"@/components/context/AccountProvider\";\r\n+import { UserInformation } from \"@/types\";\r\n+import { useSession } from \"next-auth/react\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { UseUpdateUser } from \"@/actions/mutation\";\r\n+import { Divider } from \"antd\";\r\n+import AccountReusebleHeader from \"./ReusebleHeader\";\r\n+import { cn } from \"@/lib/utils\";\r\n \r\n-const Code = () => {\r\n-const router = useRouter()\r\n-  const [isLoading, setIsLoading] = useState(false);\r\n-  \r\n-  const onSubmit = async (values: z.infer<typeof formSchema>) => {\r\n-    setIsLoading(true);\r\n+interface ReusebleFormDataProps {\r\n+  children: React.ReactNode;\r\n+  innerText: string;\r\n+  className?: string;\r\n+  editState:boolean;\r\n+  setEditState: React.Dispatch<React.SetStateAction<boolean>>\r\n+  setAnyState?: React.Dispatch<React.SetStateAction<boolean>>\r\n \r\n+}\r\n+const ReusebleForm = ({\r\n+  children,\r\n+  innerText,\r\n+  className,\r\n+  editState,\r\n+  setEditState,\r\n+  setAnyState\r\n+}: ReusebleFormDataProps) => {\r\n+  const {  isLoading, form } = AccountHook();\r\n+  const { api } = DashboardHook();\r\n+  const { data: session } = useSession();\r\n \r\n-    formSchema.parse(values)\r\n+  const updateUser = UseUpdateUser(api, session?.user.id);\r\n+\r\n+  const handleEdit = () => {\r\n+    setEditState(false);\r\n+  };\r\n+\r\n+  const onSubmit = (values: z.infer<typeof AccountSchema>) => {\r\n     const formData = new FormData();\r\n \r\n-   \r\n-    const name = values.name;\r\n-    const price = values.price.toString();\r\n-    const description = values.description\r\n+    const data = {\r\n+      name: values.name,\r\n+      occupation: values.occupation,\r\n+      gender:values.gender,\r\n+      weight:values.weight,\r\n+      height:values.height\r\n+    };\r\n \r\n-    formData.append(\"name\", name);\r\n-    formData.append(\"price\", price);\r\n-    formData.append(\"description\",description)\r\n-   // Assuming values.image is an array of File objects\r\n-  values.image.forEach((image: any) => {\r\n-      formData.append(\"image\", image, image.name); // Append as File\r\n-  \r\n-  });\r\n-\r\n-  console.log(formData)\r\n+    Object.entries(data).forEach(([key, value]) => {\r\n+      if (value !== undefined && value !== null && value !== \"\") {\r\n+        formData.append(key, value as string);\r\n+      }\r\n+    });\r\n     try {\r\n-      const res = await fetch(\"http://localhost:8080/api/products/\", {\r\n-        method: \"post\",\r\n-        body: formData,\r\n-        cache: \"force-cache\",\r\n-      });\r\n-\r\n-      if (res.status === 201)\r\n-        Swal.fire({\r\n-          position: \"center\",\r\n-          icon: \"success\",\r\n-          title: \"Product Created Successfully\",\r\n-          showConfirmButton: false,\r\n-          timer: 1500,\r\n-        });\r\n-\r\n-      router.push(\"/\");\r\n+      updateUser.mutate(formData);\r\n     } catch (error: any) {\r\n-      Swal.fire({\r\n-        icon: \"error\",\r\n-        title: error,\r\n-        text: \"Something went wrong!\",\r\n-      });\r\n+      console.log(`error from Account profile: ${error.message}`);\r\n     }\r\n-\r\n-    setIsLoading(false);\r\n   };\r\n-  const form = useForm<z.infer<typeof formSchema>>({\r\n-    resolver: zodResolver(formSchema),\r\n-    defaultValues: {\r\n-      name:  \"\",\r\n-      description: \"\",\r\n-      price:1,\r\n-      \r\n-    },\r\n-  });\r\n \r\n   return (\r\n-    <Form {...form}>\r\n-      <form\r\n-        onSubmit={form.handleSubmit(onSubmit)}\r\n-        className=\"flex-1 space-y-8 my-auto dark:bg-[var(--sidebar-background)] p-4 rounded-md\"\r\n-      >\r\n-        <section className=\"grid grid-cols-12\">\r\n-          <div className=\"mr-2 col-span-6 sm:col-span-8\">\r\n-            <CustomFormField\r\n-              control={form.control}\r\n-              Lucide={<User className=\"dark:text-dark-600\" />}\r\n-              placeholder=\"product name\"\r\n-              label=\"product name\"\r\n-              fieldType={FormFieldType.INPUT}\r\n-              name=\"name\"\r\n-            />\r\n-          </div>\r\n-          <div className=\"col-span-6 sm:col-span-4 \">\r\n-            <CustomFormField\r\n-              fieldType={FormFieldType.NUMBER}\r\n-              control={form.control}\r\n-              placeholder=\"50$\"\r\n-              label=\"price\"\r\n-              name=\"price\"\r\n-              Lucide={<DollarSign className=\"dark:text-slate-600\" />}\r\n-              min={1}\r\n-              max={999}\r\n-            />\r\n-          </div>\r\n-        </section>\r\n-        <CustomFormField\r\n-          control={form.control}\r\n-          fieldType={FormFieldType.TEXTAREA}\r\n-          name=\"description\"\r\n-          placeholder=\"product description\"\r\n-          label=\"description\"\r\n-        />\r\n+    <div\r\n+      className={cn(\r\n+        \"flex flex-col justify-center items-start col-span-12 bg-[var(--sidebar-background)] rounded-md shadow-md shadow-slate-300 dark:shadow-slate-800\",\r\n+        className\r\n+      )}\r\n+    >\r\n+      <AccountReusebleHeader showMenu innerText={innerText} editState={editState} setEditState={setEditState} setAnyState={setAnyState} />\r\n+      <Divider className=\" dark:bg-slate-500 m-0 w-full\" />\r\n \r\n-        <CustomFormField\r\n-          fieldType={FormFieldType.SKELETON}\r\n-          control={form.control}\r\n-          name=\"image\"\r\n-          label=\"Product Image\"\r\n-          renderSkeleton={(field) => (\r\n-            <FormControl>\r\n-              <FileUploader\r\n-                files={field.value}\r\n-                onChange={field.onChange}\r\n-                className=\"flex flex-1 bg-slate-100 rounded-md p-4 file-upload\"\r\n-              />\r\n-            </FormControl>\r\n+      <Form {...form}>\r\n+        <form\r\n+          onSubmit={form.handleSubmit(onSubmit)}\r\n+          className=\"flex flex-col p-8 pb-10 pt-0 w-full \"\r\n+        >\r\n+          <div className=\"grid grid-cols-12\">{children}</div>\r\n+          {editState && (\r\n+            <div className=\"flex justify-end items-center w-full \">\r\n+              <Button\r\n+                className=\"bg-slate-100 max-h-[25px] mx-2\"\r\n+                onClick={handleEdit}\r\n+              >\r\n+                cancel\r\n+              </Button>\r\n+              <SubmitButton\r\n+                className=\"bg-slate-800 text-slate-50 max-h-[25px]\"\r\n+                isLoading={isLoading}\r\n+                innerText=\" \" // importtant\r\n+              >\r\n+                change\r\n+              </SubmitButton>\r\n+            </div>\r\n           )}\r\n-        />\r\n-\r\n-        <SubmitButton isLoading={isLoading}>Add Product</SubmitButton>\r\n-      </form>\r\n-    </Form>\r\n+        </form>\r\n+      </Form>\r\n+    </div>\r\n   );\r\n };\r\n \r\n-export default Code;\r\n+export default ReusebleForm;\r\n"
                },
                {
                    "date": 1741036157346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,25 +13,25 @@\n import { Divider } from \"antd\";\r\n import AccountReusebleHeader from \"./ReusebleHeader\";\r\n import { cn } from \"@/lib/utils\";\r\n \r\n-interface ReusebleFormDataProps {\r\n+interface CodeGenerationDataProps {\r\n   children: React.ReactNode;\r\n   innerText: string;\r\n   className?: string;\r\n   editState:boolean;\r\n   setEditState: React.Dispatch<React.SetStateAction<boolean>>\r\n   setAnyState?: React.Dispatch<React.SetStateAction<boolean>>\r\n \r\n }\r\n-const ReusebleForm = ({\r\n+const CodeGeneration = ({\r\n   children,\r\n   innerText,\r\n   className,\r\n   editState,\r\n   setEditState,\r\n   setAnyState\r\n-}: ReusebleFormDataProps) => {\r\n+}: CodeGenerationDataProps) => {\r\n   const {  isLoading, form } = AccountHook();\r\n   const { api } = DashboardHook();\r\n   const { data: session } = useSession();\r\n \r\n@@ -102,5 +102,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default ReusebleForm;\r\n+export default CodeGeneration;\r\n"
                },
                {
                    "date": 1741036167940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n import { useSession } from \"next-auth/react\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { UseUpdateUser } from \"@/actions/mutation\";\r\n import { Divider } from \"antd\";\r\n-import AccountReusebleHeader from \"./ReusebleHeader\";\r\n+\r\n import { cn } from \"@/lib/utils\";\r\n \r\n interface CodeGenerationDataProps {\r\n   children: React.ReactNode;\r\n"
                },
                {
                    "date": 1741036173497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,9 @@\n import React from \"react\";\r\n import { z } from \"zod\";\r\n import { Form } from \"@/components/ui/form\";\r\n import SubmitButton from \"../../togglers/SubmitButton\";\r\n-import { AccountSchema } from \"@/lib/vaildation\";\r\n-import { DashboardHook } from \"../../context/Dashboardprovider\";\r\n import { AccountHook } from \"@/components/context/AccountProvider\";\r\n-import { UserInformation } from \"@/types\";\r\n import { useSession } from \"next-auth/react\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { UseUpdateUser } from \"@/actions/mutation\";\r\n import { Divider } from \"antd\";\r\n"
                },
                {
                    "date": 1741036178766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,25 +10,10 @@\n import { Divider } from \"antd\";\r\n \r\n import { cn } from \"@/lib/utils\";\r\n \r\n-interface CodeGenerationDataProps {\r\n-  children: React.ReactNode;\r\n-  innerText: string;\r\n-  className?: string;\r\n-  editState:boolean;\r\n-  setEditState: React.Dispatch<React.SetStateAction<boolean>>\r\n-  setAnyState?: React.Dispatch<React.SetStateAction<boolean>>\r\n-\r\n-}\r\n const CodeGeneration = ({\r\n-  children,\r\n-  innerText,\r\n-  className,\r\n-  editState,\r\n-  setEditState,\r\n-  setAnyState\r\n-}: CodeGenerationDataProps) => {\r\n+) => {\r\n   const {  isLoading, form } = AccountHook();\r\n   const { api } = DashboardHook();\r\n   const { data: session } = useSession();\r\n \r\n"
                },
                {
                    "date": 1741036184971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,20 @@\n import { Divider } from \"antd\";\r\n \r\n import { cn } from \"@/lib/utils\";\r\n \r\n+interface CodeGenerationDataProps {\r\n+ \r\n+\r\n+}\r\n const CodeGeneration = ({\r\n-) => {\r\n+  children,\r\n+  innerText,\r\n+  className,\r\n+  editState,\r\n+  setEditState,\r\n+  setAnyState\r\n+}: CodeGenerationDataProps) => {\r\n   const {  isLoading, form } = AccountHook();\r\n   const { api } = DashboardHook();\r\n   const { data: session } = useSession();\r\n \r\n"
                },
                {
                    "date": 1741036193031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,16 +15,10 @@\n  \r\n \r\n }\r\n const CodeGeneration = ({\r\n-  children,\r\n-  innerText,\r\n-  className,\r\n-  editState,\r\n-  setEditState,\r\n-  setAnyState\r\n+\r\n }: CodeGenerationDataProps) => {\r\n-  const {  isLoading, form } = AccountHook();\r\n   const { api } = DashboardHook();\r\n   const { data: session } = useSession();\r\n \r\n   const updateUser = UseUpdateUser(api, session?.user.id);\r\n"
                },
                {
                    "date": 1741036201941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n import React from \"react\";\r\n import { z } from \"zod\";\r\n import { Form } from \"@/components/ui/form\";\r\n import SubmitButton from \"../../togglers/SubmitButton\";\r\n-import { AccountHook } from \"@/components/context/AccountProvider\";\r\n import { useSession } from \"next-auth/react\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { UseUpdateUser } from \"@/actions/mutation\";\r\n import { Divider } from \"antd\";\r\n@@ -22,11 +21,8 @@\n   const { data: session } = useSession();\r\n \r\n   const updateUser = UseUpdateUser(api, session?.user.id);\r\n \r\n-  const handleEdit = () => {\r\n-    setEditState(false);\r\n-  };\r\n \r\n   const onSubmit = (values: z.infer<typeof AccountSchema>) => {\r\n     const formData = new FormData();\r\n \r\n"
                },
                {
                    "date": 1741036208192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import { UseUpdateUser } from \"@/actions/mutation\";\r\n import { Divider } from \"antd\";\r\n \r\n import { cn } from \"@/lib/utils\";\r\n+import { DashboardHook } from \"@/components/context/Dashboardprovider\";\r\n \r\n interface CodeGenerationDataProps {\r\n  \r\n \r\n"
                },
                {
                    "date": 1741036234721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,8 @@\n         \"flex flex-col justify-center items-start col-span-12 bg-[var(--sidebar-background)] rounded-md shadow-md shadow-slate-300 dark:shadow-slate-800\",\r\n         className\r\n       )}\r\n     >\r\n-      <AccountReusebleHeader showMenu innerText={innerText} editState={editState} setEditState={setEditState} setAnyState={setAnyState} />\r\n       <Divider className=\" dark:bg-slate-500 m-0 w-full\" />\r\n \r\n       <Form {...form}>\r\n         <form\r\n"
                },
                {
                    "date": 1741036249331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,11 @@\n     } catch (error: any) {\r\n       console.log(`error from Account profile: ${error.message}`);\r\n     }\r\n   };\r\n-  const form = useForm()\r\n+  const form = useForm({\r\n+    \r\n+  })\r\n \r\n   return (\r\n     <div\r\n       className={cn(\r\n"
                },
                {
                    "date": 1741036256275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     } catch (error: any) {\r\n       console.log(`error from Account profile: ${error.message}`);\r\n     }\r\n   };\r\n-  const form = useForm<z.({\r\n+  const form = useForm<z.>({\r\n \r\n   })\r\n \r\n   return (\r\n"
                }
            ],
            "date": 1741036134273,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { z } from \"zod\";\r\nimport { Form, FormControl } from \"@/components/ui/form\";\r\nimport CustomFormField from \"./CustomFormField\";\r\nimport { FormFieldType } from \"./CustomFormField\";\r\nimport FileUploader from \"./FileUploader\";\r\nimport { useState } from \"react\";\r\nimport { User, DollarSign } from \"lucide-react\";\r\nimport SubmitButton from \"./togglers/SubmitButton\";\r\nimport { formSchema } from \"@/lib/vaildation\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\nconst CreateForm = () => {\r\nconst router = useRouter()\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  \r\n  const onSubmit = async (values: z.infer<typeof formSchema>) => {\r\n    setIsLoading(true);\r\n\r\n\r\n    formSchema.parse(values)\r\n    const formData = new FormData();\r\n\r\n   \r\n    const name = values.name;\r\n    const price = values.price.toString();\r\n    const description = values.description\r\n\r\n    formData.append(\"name\", name);\r\n    formData.append(\"price\", price);\r\n    formData.append(\"description\",description)\r\n   // Assuming values.image is an array of File objects\r\n  values.image.forEach((image: any) => {\r\n      formData.append(\"image\", image, image.name); // Append as File\r\n  \r\n  });\r\n\r\n  console.log(formData)\r\n    try {\r\n      const res = await fetch(\"http://localhost:8080/api/products/\", {\r\n        method: \"post\",\r\n        body: formData,\r\n        cache: \"force-cache\",\r\n      });\r\n\r\n      if (res.status === 201)\r\n        Swal.fire({\r\n          position: \"center\",\r\n          icon: \"success\",\r\n          title: \"Product Created Successfully\",\r\n          showConfirmButton: false,\r\n          timer: 1500,\r\n        });\r\n\r\n      router.push(\"/\");\r\n    } catch (error: any) {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: error,\r\n        text: \"Something went wrong!\",\r\n      });\r\n    }\r\n\r\n    setIsLoading(false);\r\n  };\r\n  const form = useForm<z.infer<typeof formSchema>>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      name:  \"\",\r\n      description: \"\",\r\n      price:1,\r\n      \r\n    },\r\n  });\r\n\r\n  return (\r\n    <Form {...form}>\r\n      <form\r\n        onSubmit={form.handleSubmit(onSubmit)}\r\n        className=\"flex-1 space-y-8 my-auto dark:bg-[var(--sidebar-background)] p-4 rounded-md\"\r\n      >\r\n        <section className=\"grid grid-cols-12\">\r\n          <div className=\"mr-2 col-span-6 sm:col-span-8\">\r\n            <CustomFormField\r\n              control={form.control}\r\n              Lucide={<User className=\"dark:text-dark-600\" />}\r\n              placeholder=\"product name\"\r\n              label=\"product name\"\r\n              fieldType={FormFieldType.INPUT}\r\n              name=\"name\"\r\n            />\r\n          </div>\r\n          <div className=\"col-span-6 sm:col-span-4 \">\r\n            <CustomFormField\r\n              fieldType={FormFieldType.NUMBER}\r\n              control={form.control}\r\n              placeholder=\"50$\"\r\n              label=\"price\"\r\n              name=\"price\"\r\n              Lucide={<DollarSign className=\"dark:text-slate-600\" />}\r\n              min={1}\r\n              max={999}\r\n            />\r\n          </div>\r\n        </section>\r\n        <CustomFormField\r\n          control={form.control}\r\n          fieldType={FormFieldType.TEXTAREA}\r\n          name=\"description\"\r\n          placeholder=\"product description\"\r\n          label=\"description\"\r\n        />\r\n\r\n        <CustomFormField\r\n          fieldType={FormFieldType.SKELETON}\r\n          control={form.control}\r\n          name=\"image\"\r\n          label=\"Product Image\"\r\n          renderSkeleton={(field) => (\r\n            <FormControl>\r\n              <FileUploader\r\n                files={field.value}\r\n                onChange={field.onChange}\r\n                className=\"flex flex-1 bg-slate-100 rounded-md p-4 file-upload\"\r\n              />\r\n            </FormControl>\r\n          )}\r\n        />\r\n\r\n        <SubmitButton isLoading={isLoading}>Add Product</SubmitButton>\r\n      </form>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default CreateForm;\r\n"
        }
    ]
}