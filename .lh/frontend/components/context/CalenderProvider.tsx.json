{
    "sourceFile": "frontend/components/context/CalenderProvider.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1738529419660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738529425587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n } from \"date-fns\";\r\n import { useContext, createContext, useState } from \"react\";\r\n import { Dispatch, SetStateAction } from \"react\";\r\n import { DropdownMenuCheckboxItemProps } from \"@radix-ui/react-dropdown-menu\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n \r\n export interface CalendarContextType {\r\n   state: Date;\r\n   setState: Dispatch<SetStateAction<Date>>;\r\n@@ -132,9 +133,8 @@\n \r\n     const DaysOfWeekCalender = [...WeeksInterval];\r\n \r\n     const isMobile = useMediaQuery({ query: \"(min-width: 640px)\" });\r\n-  const isTablet = useMediaQuery({ query: \"(min-width: 1024px)\" });\r\n \r\n   if (isMobile) {\r\n     DaysOfWeekCalender.splice(7);\r\n   } \r\n"
                },
                {
                    "date": 1738529433521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,12 @@\n     const isMobile = useMediaQuery({ query: \"(min-width: 640px)\" });\r\n \r\n   if (isMobile) {\r\n     DaysOfWeekCalender.splice(7);\r\n-  } \r\n+  } else {\r\n+    DaysOfWeekCalender.splice(7);\r\n+\r\n+  }\r\n     const DaysOfWeekRows = [...WeeksInterval];\r\n \r\n \r\n     const DaysOfWeekCalenderForMobileView = [...DaysOfWeekCalender];\r\n"
                },
                {
                    "date": 1738529470867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,14 +132,14 @@\n     });\r\n \r\n     const DaysOfWeekCalender = [...WeeksInterval];\r\n \r\n-    const isMobile = useMediaQuery({ query: \"(min-width: 640px)\" });\r\n+    const isTablet = useMediaQuery({ query: \"(min-width: 1024px)\" });\r\n \r\n   if (isMobile) {\r\n     DaysOfWeekCalender.splice(7);\r\n   } else {\r\n-    DaysOfWeekCalender.splice(7);\r\n+    DaysOfWeekCalender.splice(4);\r\n \r\n   }\r\n     const DaysOfWeekRows = [...WeeksInterval];\r\n \r\n"
                },
                {
                    "date": 1739458479263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n   DaysOftheNextMonth: Date[];\r\n   daysOfThisMonth: Date[];\r\n   calendarDays: Date[];\r\n   viewPort: number | boolean;\r\n-  setViewPort: Dispatch<SetStateAction<number>>;\r\n+  setViewPort: Dispatch<SetStateAction<number | undefined>>;\r\n   TheLastDayOfTheMonth: Date;\r\n   visible: boolean;\r\n   setVisible: Dispatch<SetStateAction<boolean>>;\r\n   date: Date;\r\n"
                },
                {
                    "date": 1739458494337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n   DaysOftheNextMonth: Date[];\r\n   daysOfThisMonth: Date[];\r\n   calendarDays: Date[];\r\n   viewPort: number | boolean;\r\n-  setViewPort: Dispatch<SetStateAction<number | undefined>>;\r\n+  setViewPort: Dispatch<SetStateAction<number | unde>>;\r\n   TheLastDayOfTheMonth: Date;\r\n   visible: boolean;\r\n   setVisible: Dispatch<SetStateAction<boolean>>;\r\n   date: Date;\r\n"
                },
                {
                    "date": 1739458500512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n   DaysOftheNextMonth: Date[];\r\n   daysOfThisMonth: Date[];\r\n   calendarDays: Date[];\r\n   viewPort: number | boolean;\r\n-  setViewPort: Dispatch<SetStateAction<number>;\r\n+  setViewPort: Dispatch<SetStateAction<number>>;\r\n   TheLastDayOfTheMonth: Date;\r\n   visible: boolean;\r\n   setVisible: Dispatch<SetStateAction<boolean>>;\r\n   date: Date;\r\n"
                }
            ],
            "date": 1738529419660,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport {\r\n  addMonths,\r\n  eachDayOfInterval,\r\n  EachDayOfIntervalResult,\r\n  eachHourOfInterval,\r\n  EachHourOfIntervalResult,\r\n  eachMinuteOfInterval,\r\n  EachMinuteOfIntervalResult,\r\n  endOfDay,\r\n  endOfMonth,\r\n  getDay,\r\n  getDayOfYear,\r\n  getMinutes,\r\n  startOfDay,\r\n  startOfMonth,\r\n  subMonths,\r\n} from \"date-fns\";\r\nimport { useContext, createContext, useState } from \"react\";\r\nimport { Dispatch, SetStateAction } from \"react\";\r\nimport { DropdownMenuCheckboxItemProps } from \"@radix-ui/react-dropdown-menu\";\r\n\r\nexport interface CalendarContextType {\r\n  state: Date;\r\n  setState: Dispatch<SetStateAction<Date>>;\r\n  currDate: Date;\r\n  setCurrDate: Dispatch<SetStateAction<Date>>;\r\n  view: string;\r\n  setView: Dispatch<SetStateAction<string>>;\r\n  DaysOfthePrevMonth: Date[];\r\n  DaysOftheNextMonth: Date[];\r\n  daysOfThisMonth: Date[];\r\n  calendarDays: Date[];\r\n  viewPort: number | boolean;\r\n  setViewPort: Dispatch<SetStateAction<number>>;\r\n  TheLastDayOfTheMonth: Date;\r\n  visible: boolean;\r\n  setVisible: Dispatch<SetStateAction<boolean>>;\r\n  date: Date;\r\n  setDate: Dispatch<SetStateAction<Date>>;\r\n  disabled: boolean;\r\n  setDisabled: Dispatch<SetStateAction<boolean>>;\r\n  setMonthView: Dispatch<SetStateAction<CheckedState | undefined>>;\r\n  MonthView: CheckedState | undefined;\r\n  setWeekView: Dispatch<SetStateAction<CheckedState | undefined>>;\r\n  WeekView: CheckedState | undefined;\r\n  setDayView: Dispatch<SetStateAction<CheckedState | undefined>>;\r\n  DayView: CheckedState | undefined;\r\n  WeeksInterval: EachDayOfIntervalResult<{\r\n    start: Date;\r\n    end: Date;\r\n}, undefined>;\r\nDaysOfWeekCalender: Date[];\r\nDaysOfWeekRows: Date[];\r\nDaysOfWeekCalenderForMobileView: Date[];\r\n theHoursOfDay: EachHourOfIntervalResult<{\r\n  start: Date;\r\n  end: Date;\r\n}, undefined>;\r\nTheMinutesInterval: EachMinuteOfIntervalResult<{\r\n  start: Date;\r\n  end: Date;\r\n}, undefined>;\r\ntheMinutes: Date[];\r\n}\r\ntype CheckedState = boolean | \"indeterminate\";\r\ntype Checked = DropdownMenuCheckboxItemProps[\"checked\"];\r\n\r\nconst CalenderContext = createContext<CalendarContextType | null>(null);\r\n\r\nexport const CalenderProvider = ({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) => {\r\n  const [currDate, setCurrDate] = useState(new Date());\r\n  const [view, setView] = useState(\"Week'view\");\r\n  const [viewPort, setViewPort] = useState<number>(2);\r\n  const [state, setState] = useState(currDate);\r\n  const [visible, setVisible] = useState<boolean>(false);\r\n  const [date,setDate] = useState<Date>(new Date())\r\n  const [disabled,setDisabled] = useState<boolean>(true)\r\n  const [MonthView, setMonthView] = useState<Checked>(false);\r\n  const [WeekView, setWeekView] = useState<Checked>(true);\r\n  const [DayView, setDayView] = useState<Checked>(false);\r\n  const FirstDayOfTheMonth = startOfMonth(currDate); // The First Day Of The Month\r\n  const TheLastDayOfTheMonth = endOfMonth(currDate); // The Last Day Of The Month\r\n\r\n  const prevMonth = subMonths(currDate, 1);\r\n  const nextMonth = addMonths(currDate, 1);\r\n\r\n  // Get the starting day of the week for the first day of the current month (0 = Sunday, 6 = Saturday)\r\n  const startDayOfWeek = getDay(FirstDayOfTheMonth); // e.g., 0 for Sunday, 1 for Monday, etc.\r\n\r\n\r\n  const endOfPrevMonth = endOfMonth(prevMonth);\r\n\r\n  const DateOfPrev = new Date(\r\n    endOfPrevMonth.setDate(endOfPrevMonth.getDate() - startDayOfWeek)\r\n  );\r\n  const daysOfThisMonth = eachDayOfInterval({\r\n    // The Total Number Of Days Of This Month\r\n    start: FirstDayOfTheMonth,\r\n    end: TheLastDayOfTheMonth,\r\n  });\r\n\r\n  const DaysOfthePrevMonth = eachDayOfInterval({\r\n    start: DateOfPrev,\r\n    end: endOfMonth(prevMonth),\r\n  });\r\n\r\n  const DaysOftheNextMonth = eachDayOfInterval({\r\n    start: startOfMonth(nextMonth),\r\n    end: endOfMonth(nextMonth),\r\n  });\r\n  // Create a full list of days including padding days (null for empty spots)\r\n  const calendarDays: Date[] = [\r\n    ...DaysOfthePrevMonth,\r\n    ...daysOfThisMonth,\r\n    ...DaysOftheNextMonth,\r\n  ];\r\n\r\n  calendarDays.length = 42;\r\n\r\n\r\n  \r\n    const WeeksInterval = eachDayOfInterval({\r\n      start: state,\r\n      end: calendarDays[41],\r\n    });\r\n\r\n    const DaysOfWeekCalender = [...WeeksInterval];\r\n\r\n    const isMobile = useMediaQuery({ query: \"(min-width: 640px)\" });\r\n  const isTablet = useMediaQuery({ query: \"(min-width: 1024px)\" });\r\n\r\n  if (isMobile) {\r\n    DaysOfWeekCalender.splice(7);\r\n  } \r\n    const DaysOfWeekRows = [...WeeksInterval];\r\n\r\n\r\n    const DaysOfWeekCalenderForMobileView = [...DaysOfWeekCalender];\r\n\r\n    DaysOfWeekCalenderForMobileView.length = 1\r\n\r\n     const beginningOfDay = startOfDay(state);\r\n      const terminalOfDay = endOfDay(state);\r\n    \r\n      const theHoursOfDay = eachHourOfInterval({\r\n        start: beginningOfDay,\r\n        end: terminalOfDay,\r\n      });\r\n    \r\n      const TheMinutesInterval = eachMinuteOfInterval({\r\n        start: beginningOfDay,\r\n        end: terminalOfDay,\r\n      });\r\n    \r\n      const theMinutes = TheMinutesInterval.filter(\r\n        (time) => getMinutes(time) % 30 === 0\r\n      );\r\n  return (\r\n    <CalenderContext.Provider\r\n      value={{\r\n        MonthView,\r\n        setMonthView,\r\n        WeekView,\r\n        setWeekView,\r\n        DayView,\r\n        setDayView,\r\n        disabled,\r\n        setDisabled,\r\n        date,\r\n        setDate,\r\n        visible,\r\n        setVisible,\r\n        TheLastDayOfTheMonth,\r\n        viewPort,\r\n        setViewPort,\r\n        state,\r\n        setState,\r\n        currDate,\r\n        setCurrDate,\r\n        view,\r\n        setView,\r\n        DaysOfthePrevMonth,\r\n        DaysOftheNextMonth,\r\n        daysOfThisMonth,\r\n        calendarDays,\r\n        theHoursOfDay,\r\n        theMinutes,\r\n        TheMinutesInterval,\r\n        WeeksInterval,\r\n        DaysOfWeekCalender,\r\n        DaysOfWeekCalenderForMobileView,\r\n        DaysOfWeekRows\r\n      }}\r\n    >\r\n      {children}\r\n    </CalenderContext.Provider>\r\n  );\r\n};\r\n\r\nexport const CalenderHook = () => {\r\n  const context = useContext(CalenderContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\"CalenderHook must be used within a CalenderProvider\");\r\n  }\r\n  return context;\r\n};\r\n"
        }
    ]
}