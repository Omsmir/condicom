{
    "sourceFile": "frontend/components/context/Dashboardprovider.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1738709405198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738709419331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,11 @@\n   yesterdayFilter: boolean;\r\n   setAllFilter: Dispatch<SetStateAction<boolean>>;\r\n   setTodayFilter: Dispatch<SetStateAction<boolean>>;\r\n   setYesterdayFilter: Dispatch<SetStateAction<boolean>>;\r\n-  socket: Socket<DefaultEventsMap, DefaultEventsMap>\r\n+  socket: Socket<DefaultEventsMap, DefaultEventsMap>;\r\n+  drawerState: boolean;\r\n+  setDrawerState: Dispatch<SetStateAction<boolean>>;\r\n }\r\n \r\n const DashboardContext = createContext<DashboardContextProps | null>(null);\r\n \r\n@@ -74,9 +76,11 @@\n         setYesterdayFilter,\r\n         allFilter,\r\n         todayFilter,\r\n         yesterdayFilter,\r\n-        socket\r\n+        socket,\r\n+        drawerState,\r\n+        setDrawerState\r\n  \r\n       }}\r\n     >\r\n       {children}\r\n"
                }
            ],
            "date": 1738709405198,
            "name": "Commit-0",
            "content": "\"use client\";\r\nimport {\r\n  Dispatch,\r\n  JSXElementConstructor,\r\n  ReactElement,\r\n  SetStateAction,\r\n} from \"react\";\r\n\r\nimport { createContext, useContext, useState } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport { NotificationInstance } from \"antd/es/notification/interface\";\r\nimport NProgress from \"nprogress\";\r\nimport \"nprogress/nprogress.css\";\r\nimport { useTheme } from \"next-themes\";\r\nimport { io, Socket } from \"socket.io-client\";\r\nimport { Notification } from \"@/types\";\r\nimport { DefaultEventsMap } from \"@socket.io/component-emitter\";\r\n\r\nNProgress.configure({ showSpinner: false, speed: 500 });\r\ninterface DashboardContextProps {\r\n  api: NotificationInstance;\r\n  contextHolder: ReactElement<any, string | JSXElementConstructor<any>>;\r\n  state: boolean;\r\n  setState: Dispatch<SetStateAction<boolean>>;\r\n  NProgress: NProgress.NProgress;\r\n  open: boolean;\r\n  setOpen: Dispatch<SetStateAction<boolean>>;\r\n  theme: string | undefined;\r\n  setTheme: Dispatch<SetStateAction<string>>;\r\n  allFilter: boolean;\r\n  todayFilter: boolean;\r\n  yesterdayFilter: boolean;\r\n  setAllFilter: Dispatch<SetStateAction<boolean>>;\r\n  setTodayFilter: Dispatch<SetStateAction<boolean>>;\r\n  setYesterdayFilter: Dispatch<SetStateAction<boolean>>;\r\n  socket: Socket<DefaultEventsMap, DefaultEventsMap>\r\n}\r\n\r\nconst DashboardContext = createContext<DashboardContextProps | null>(null);\r\n\r\nexport const DashboardProvider = ({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) => {\r\n\r\n  const [api, contextHolder] = notification.useNotification();\r\n  const [state, setState] = useState<boolean>(false);\r\n  const [open, setOpen] = useState<boolean>(false);\r\n  const { theme, setTheme } = useTheme();\r\n  const [allFilter, setAllFilter] = useState<boolean>(true);\r\n  const [todayFilter, setTodayFilter] = useState<boolean>(false);\r\n  const [yesterdayFilter, setYesterdayFilter] = useState<boolean>(false);\r\n  const [drawerState, setDrawerState] = useState<boolean>(false);\r\n\r\n  const socket = io(\"http://localhost:8080\");\r\n\r\n  // Tables \r\n  \r\n  return (\r\n    <DashboardContext.Provider\r\n      value={{\r\n        theme,\r\n        setTheme,\r\n        api,\r\n        contextHolder,\r\n        state,\r\n        setState,\r\n        NProgress,\r\n        open,\r\n        setOpen,\r\n        setAllFilter,\r\n        setTodayFilter,\r\n        setYesterdayFilter,\r\n        allFilter,\r\n        todayFilter,\r\n        yesterdayFilter,\r\n        socket\r\n \r\n      }}\r\n    >\r\n      {children}\r\n    </DashboardContext.Provider>\r\n  );\r\n};\r\n\r\nexport const DashboardHook = () => {\r\n  const Context = useContext(DashboardContext);\r\n  if (!Context) {\r\n    throw new Error(\"Dashboard Context Must Be within the DashboardHook\");\r\n  }\r\n\r\n  return Context;\r\n};\r\n"
        }
    ]
}