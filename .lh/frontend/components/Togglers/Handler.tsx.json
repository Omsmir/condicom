{
    "sourceFile": "frontend/components/togglers/Handler.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1738513824541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738513831882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { useRouter } from \"next/navigation\";\r\n import axios from \"axios\";\r\n import Swal from \"sweetalert2\";\r\n import { prop } from \"@/types\";\r\n-import { DashboardHooh\r\n+import { DashboardHoo\r\n import { useSession } from \"next-auth/react\";\r\n import { DropdownMenuItem } from \"../ui/dropdown-menu\";\r\n import React from \"react\";\r\n import { CreateNotification, userRole } from \"./TopBarEvents\";\r\n"
                }
            ],
            "date": 1738513824541,
            "name": "Commit-0",
            "content": "\"use client\";\r\nimport { Button } from \"../ui/button\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\nimport { prop } from \"@/types\";\r\nimport { DashboardHook } from \"../context/DashboardProvider\";\r\nimport { useSession } from \"next-auth/react\";\r\nimport { DropdownMenuItem } from \"../ui/dropdown-menu\";\r\nimport React from \"react\";\r\nimport { CreateNotification, userRole } from \"./TopBarEvents\";\r\n\r\nexport const MyHandler = ({ id, name, className, state }: prop) => {\r\n  const router = useRouter();\r\n\r\n  const { api } = DashboardHook();\r\n  const handleDelete = async () => {\r\n    try {\r\n      Swal.fire({\r\n        title: \"Do you want to delete the product?\",\r\n        showDenyButton: true,\r\n        denyButtonText: \"cancel\",\r\n        denyButtonColor: \"#94a3b8\",\r\n        confirmButtonColor: \"#dc3741\",\r\n        confirmButtonText: \"delete\",\r\n      }).then(async (result) => {\r\n        if (result.isDenied) {\r\n          api.info({ message: \"Changes Aren't Saved\" });\r\n        } else if (result.isConfirmed) {\r\n          const response = await axios.delete(\r\n            `http://localhost:8080/api/products/${id}/`\r\n          );\r\n\r\n          Swal.fire(\"deleted\", \"\", \"success\");\r\n\r\n          router.push(\"/dashboard\"); // Redirect to the products page\r\n        }\r\n      });\r\n    } catch (error: any) {\r\n      api.error({\r\n        message: \"Error Deleting Product\",\r\n        description: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEdit = async () => {\r\n    router.push(`/dashboard/products/${id}/edit`);\r\n  };\r\n  const stateManagement = () => {\r\n    if (!state) return handleDelete();\r\n\r\n    return handleEdit();\r\n  };\r\n\r\n  return (\r\n    <Button className={className} onClick={stateManagement}>\r\n      {name}\r\n    </Button>\r\n  );\r\n};\r\n\r\ntype DeleteHandlerProps = {\r\n  name?: string;\r\n  className?: string;\r\n  id: string | undefined;\r\n  style?: string;\r\n  patientState?: boolean;\r\n  apiString: string;\r\n  messagePopup: string;\r\n};\r\nexport const DeleteHandler = ({\r\n  id,\r\n  name,\r\n  className,\r\n  style,\r\n  patientState,\r\n  apiString,\r\n  messagePopup,\r\n}: DeleteHandlerProps) => {\r\n  const router = useRouter();\r\n\r\n  const { api } = DashboardHook();\r\n\r\n  const { data: session } = useSession();\r\n\r\n  let notificationData: any;\r\n\r\n  const handleDelete = async () => {\r\n\r\n    if (apiString === \"patient\") {\r\n      notificationData = CreateNotification({\r\n        type: \"patient deletion\",\r\n        title: \"Patient Deletion\",\r\n        description: \"deleted patient with id\",\r\n        assignedBy: `${userRole(session)} ${session?.user.name}`,\r\n        user: `${session?.user.id}`,\r\n        eventType: \"deletion\",\r\n        eventId: `${id}`,\r\n      });\r\n    } else {\r\n      notificationData = CreateNotification({\r\n        type: \"appointment deletion\",\r\n        title: \"Appointment Deletion\",\r\n        description: \"deleted appointment with id\",\r\n        assignedBy: `${userRole(session)} ${session?.user.name}`,\r\n        user: `${session?.user.id}`,\r\n        eventType: \"deletion\",\r\n        eventId: `${id}`,\r\n      });\r\n    }\r\n    try {\r\n      Swal.fire({\r\n        title: messagePopup,\r\n        showDenyButton: true,\r\n        denyButtonText: \"Cancel\",\r\n        denyButtonColor: \"#94a3b8\",\r\n        confirmButtonColor: \"#dc3741\",\r\n        confirmButtonText: \"Delete\",\r\n      }).then(async (result) => {\r\n        if (result.isDenied) {\r\n          Swal.fire(\"Changes are not saved\", \"\", \"info\");\r\n        } else if (result.isConfirmed) {\r\n          try {\r\n            const response = await axios.delete(\r\n              `http://localhost:8080/api/${apiString}/${id}/`\r\n            );\r\n\r\n            api.success({ message: response.data.message });\r\n            router.refresh();\r\n\r\n            await axios.post(\r\n              `http://localhost:8080/api/notifications/create`,\r\n              notificationData\r\n            );\r\n          } catch (error: any) {\r\n            if (axios.isAxiosError(error)) {\r\n              if (error.response) {\r\n                api.error({\r\n                  message: error.response.data.message,\r\n                  description: \"Server Error\",\r\n                  pauseOnHover: false,\r\n                });\r\n              } else {\r\n                api.error({\r\n                  message: \"Network Error\",\r\n                  description: \"Unable to reach the server\",\r\n                  pauseOnHover: false,\r\n                });\r\n              }\r\n            } else {\r\n              api.error({\r\n                message: error.message || \"Unexpected error\",\r\n                description: \"Server Error\",\r\n                pauseOnHover: false,\r\n              });\r\n            }\r\n          }\r\n        }\r\n      });\r\n    } catch (error: any) {\r\n      // General error handling for any unexpected issues outside the axios request\r\n      api.error({\r\n        message: error.message || \"Unexpected error\",\r\n        description: \"Something went wrong\",\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      {patientState ? (\r\n        <DropdownMenuItem\r\n          onClick={handleDelete}\r\n          className=\"cursor-pointer hover:bg-slate-200 dark:hover:bg-[var(--sidebar-background)]\"\r\n        >\r\n          Delete\r\n        </DropdownMenuItem>\r\n      ) : (\r\n        <Button\r\n          className={className}\r\n          style={{ display: style }}\r\n          onClick={handleDelete}\r\n        >\r\n          {name}\r\n        </Button>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport const ToggleButton = ({ id, state }: { id: string; state: boolean }) => {\r\n  const formData = new FormData();\r\n  const router = useRouter();\r\n  const { api } = DashboardHook();\r\n\r\n  const { data: session } = useSession();\r\n\r\n  formData.append(\"completed\", state as any);\r\n  const onSubmit = async () => {\r\n    try {\r\n      const res = await axios.put(\r\n        `http://localhost:8080/api/appointments/${id}/`,\r\n        formData,\r\n        {\r\n          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n        }\r\n      );\r\n\r\n      api.success({\r\n        message: state\r\n          ? \"Appointment marked as completed\"\r\n          : \"Appointment marked as uncompleted\",\r\n      });\r\n      router.refresh();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      onDoubleClick={onSubmit}\r\n      className=\"hidden justify-center items-end py-2 text-center text-slate-50 text-[12px] normal absolute inset-0 opacity-65 edit\"\r\n    >\r\n      {!state ? \"Completed\" : \"Uncompleted\"}\r\n    </div>\r\n  );\r\n};\r\n"
        }
    ]
}