{
    "sourceFile": "frontend/components/togglers/TopBarEvents.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1738505348242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738513870424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n   ExclamationCircleFilled,\r\n   InfoCircleFilled,\r\n   PlusCircleFilled,\r\n   UserAddOutlined,\r\n+  UserDeleteOutlined,\r\n } from \"@ant-design/icons\";\r\n import * as Tone from \"tone\";\r\n import {  Socket } from \"socket.io-client\";\r\n import { DefaultEventsMap } from \"@socket.io/component-emitter\";\r\n@@ -487,5 +488,9 @@\n     } catch (error) {\r\n       console.error(\"Error handling admin notification:\", error);\r\n     }\r\n   });\r\n-};\n\\ No newline at end of file\n+};\r\n+\r\n+export const userRole = () {\r\n+  \r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738513876853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -490,7 +490,7 @@\n     }\r\n   });\r\n };\r\n \r\n-export const userRole = () {\r\n-  \r\n+export const userRole = (session:Session) {\r\n+\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738513885064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n } from \"@ant-design/icons\";\r\n import * as Tone from \"tone\";\r\n import {  Socket } from \"socket.io-client\";\r\n import { DefaultEventsMap } from \"@socket.io/component-emitter\";\r\n+import { Session } from \"next-auth\";\r\n \r\n export function FadeMenu() {\r\n   const isMobile = useMediaQuery({ query: \"(max-width: 640px)\" });\r\n \r\n@@ -491,6 +492,6 @@\n   });\r\n };\r\n \r\n export const userRole = (session:Session) {\r\n-\r\n+  switch\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738513890715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -492,6 +492,8 @@\n   });\r\n };\r\n \r\n export const userRole = (session:Session) {\r\n-  switch\r\n+  switch(session.){\r\n+\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738513897992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -492,8 +492,7 @@\n   });\r\n };\r\n \r\n export const userRole = (session:Session) {\r\n-  switch(session.){\r\n-\r\n+  switch(session.user.role){\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738513904437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -491,8 +491,9 @@\n     }\r\n   });\r\n };\r\n \r\n-export const userRole = (session:Session) {\r\n+export const userRole = (session:Session) => {\r\n   switch(session.user.role){\r\n+    case \r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738513913495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -493,7 +493,8 @@\n };\r\n \r\n export const userRole = (session:Session) => {\r\n   switch(session.user.role){\r\n-    case \r\n+    case \"Admin\":\r\n+      return \"Admin\"\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738513919923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -495,7 +495,7 @@\n export const userRole = (session:Session) => {\r\n   switch(session.user.role){\r\n     case \"Admin\":\r\n       return \"Admin\"\r\n-      default\r\n+      default: \r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738531193798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,9 +262,8 @@\n   );\r\n };\r\n \r\n \r\n-\r\n // Tables Related Events\r\n export const ExportAsCSV = ({ table }: { table: Table<any> }) => {\r\n   const data = table.getRowModel().rows.map((row) => {\r\n     return [\r\n"
                }
            ],
            "date": 1738505348242,
            "name": "Commit-0",
            "content": "\"use client\";\r\nimport * as React from \"react\";\r\nimport {\r\n  addDays,\r\n  subDays,\r\n  getDay,\r\n  isToday,\r\n  isTomorrow,\r\n  isYesterday,\r\n  isAfter,\r\n  isBefore,\r\n  differenceInCalendarDays,\r\n  format,\r\n  addMonths,\r\n  subMonths,\r\n  differenceInHours,\r\n  differenceInMinutes,\r\n  differenceInSeconds,\r\n} from \"date-fns\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { CalenderHook } from \"../context/CalenderProvider\";\r\nimport { Days, notificationSounds } from \"@/lib/constants\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport AddEvent from \"../AddEvent\";\r\nimport { Table } from \"@tanstack/react-table\";\r\nimport * as XLSX from \"xlsx\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { Notification, ObjectType } from \"@/types\";\r\nimport {\r\n  CheckCircleFilled,\r\n  DeleteFilled,\r\n  ExclamationCircleFilled,\r\n  InfoCircleFilled,\r\n  PlusCircleFilled,\r\n  UserAddOutlined,\r\n} from \"@ant-design/icons\";\r\nimport * as Tone from \"tone\";\r\nimport {  Socket } from \"socket.io-client\";\r\nimport { DefaultEventsMap } from \"@socket.io/component-emitter\";\r\n\r\nexport function FadeMenu() {\r\n  const isMobile = useMediaQuery({ query: \"(max-width: 640px)\" });\r\n\r\n  const {\r\n    view,\r\n    setView,\r\n    setViewPort,\r\n    DayView,\r\n    setDayView,\r\n    WeekView,\r\n    setWeekView,\r\n    MonthView,\r\n    setMonthView,\r\n  } = CalenderHook();\r\n\r\n  const handleView = ({\r\n    text,\r\n    onclick,\r\n  }: {\r\n    text: string;\r\n    onclick?: React.Dispatch<React.SetStateAction<any>>;\r\n  }) => {\r\n    setView(text);\r\n\r\n    setWeekView(false);\r\n    setDayView(false);\r\n    setMonthView(false);\r\n\r\n    if (onclick) {\r\n      onclick(true);\r\n    }\r\n  };\r\n\r\n  const MenuToReturnBasedOnMedia = ({\r\n    children,\r\n  }: {\r\n    children?: React.ReactNode;\r\n  }) => {\r\n    return (\r\n      <>\r\n        <DropdownMenuTrigger asChild>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"hover:bg-slate-200 dark:hover:bg-slate-800 dark:border-slate-800\"\r\n          >\r\n            {!isMobile && view} <p className=\"-rotate-90\">&lt;</p>\r\n          </Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent className=\"w-40 bg-slate-100 p-0 dark:bg-[var(--sidebar-accent)] dark:border-slate-800\">\r\n          <DropdownMenuSeparator />\r\n          <DropdownMenuCheckboxItem\r\n            className=\"hover:bg-slate-200 dark:hover:bg-[var(--sidebar-background)] cursor-pointer\"\r\n            checked={MonthView}\r\n            onCheckedChange={() =>\r\n              handleView({ text: \"Month'view\", onclick: setMonthView })\r\n            }\r\n            onClick={() => setViewPort(1)}\r\n          >\r\n            Month'view\r\n          </DropdownMenuCheckboxItem>\r\n          <DropdownMenuCheckboxItem\r\n            className=\"hover:bg-slate-200 dark:hover:bg-[var(--sidebar-background)] cursor-pointer\"\r\n            checked={WeekView}\r\n            onCheckedChange={() =>\r\n              handleView({ text: \"Week'view\", onclick: setWeekView })\r\n            }\r\n            onClick={() => setViewPort(2)}\r\n          >\r\n            Week'view{\" \"}\r\n          </DropdownMenuCheckboxItem>\r\n          <DropdownMenuCheckboxItem\r\n            className=\"hover:bg-slate-200 dark:hover:bg-[var(--sidebar-background)] cursor-pointer\"\r\n            checked={DayView}\r\n            onCheckedChange={() =>\r\n              handleView({ text: \"Day'view\", onclick: setDayView })\r\n            }\r\n            onClick={() => setViewPort(3)}\r\n          >\r\n            Day'view\r\n          </DropdownMenuCheckboxItem>\r\n        </DropdownMenuContent>\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <DropdownMenu>\r\n      <MenuToReturnBasedOnMedia />\r\n    </DropdownMenu>\r\n  );\r\n}\r\nexport const SwitchMonth = () => {\r\n  const { setCurrDate, currDate, setState } = CalenderHook();\r\n\r\n  const nextMonth = () => {\r\n    const next = addMonths(currDate, 1);\r\n\r\n    setCurrDate(next);\r\n    setState(next);\r\n  };\r\n  const prevMonth = () => {\r\n    const prev = subMonths(currDate, 1);\r\n    prev.setDate(1);\r\n    setCurrDate(prev);\r\n    setState(prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex items-center border rounded-md mx-2 dark:border-slate-800\">\r\n      <Button\r\n        className=\"hover:bg-slate-100 dark:hover:bg-slate-800 \"\r\n        onClick={prevMonth}\r\n      >\r\n        &lt;\r\n      </Button>\r\n      <div className=\"text-sm font-medium \">{format(currDate, \"MMMM\")}</div>\r\n      <Button\r\n        className=\"hover:bg-slate-100 dark:hover:bg-slate-800\"\r\n        onClick={nextMonth}\r\n      >\r\n        &gt;\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\nexport const SwitchDay = () => {\r\n  const { state, setState, calendarDays, viewPort, setCurrDate } =\r\n    CalenderHook();\r\n\r\n  const NextDay = () => {\r\n    const next = addDays(state, 1);\r\n\r\n    next.setHours(0);\r\n    next.setMinutes(0);\r\n    next.setSeconds(0);\r\n    next.setMilliseconds(0); // beacuse their are (hours,min,seconds,etc) for the currDate but no for the CalenderDaysArray So There will be a\r\n    // problem beacuse the last day of the next to be, will be the same for the last of the Array\r\n    switch (viewPort) {\r\n      case 1:\r\n        {\r\n          if (isAfter(next, calendarDays[41] as Date)) {\r\n            return null;\r\n          }\r\n          setState(next);\r\n        }\r\n        break;\r\n      case 2: {\r\n        if (differenceInCalendarDays(calendarDays[41], next) < 6) {\r\n          return null;\r\n        }\r\n        setState(next);\r\n      }\r\n      default:\r\n        setState(next)\r\n    }\r\n  };\r\n\r\n  const PastDay = () => {\r\n    const past = subDays(state, 1);\r\n\r\n    if (isBefore(past, calendarDays.at(0) as Date)) {\r\n      return null;\r\n    }\r\n    setState(past);\r\n  };\r\n\r\n  let editedDays = Array.from(Days);\r\n\r\n  editedDays.shift();\r\n\r\n  editedDays.push(\"Sat\");\r\n\r\n  return (\r\n    <div className=\"flex items-center border rounded-md mx-2 dark:border-slate-800\">\r\n      <Button\r\n        className=\"hover:bg-slate-100 dark:hover:bg-slate-800 \"\r\n        onClick={PastDay}\r\n      >\r\n        &lt;\r\n      </Button>\r\n      <div className=\"text-sm font-medium \">\r\n        {editedDays.map((day, index) => {\r\n          if (index === getDay(state)) {\r\n            if (isToday(state))\r\n              return (\r\n                <p className=\"hidden sm:block\" key={index}>\r\n                  Today\r\n                </p>\r\n              );\r\n            if (isTomorrow(state))\r\n              return (\r\n                <p className=\"hidden sm:block\" key={index}>\r\n                  Tomorrow\r\n                </p>\r\n              );\r\n            if (isYesterday(state))\r\n              return (\r\n                <p className=\"hidden sm:block\" key={index}>\r\n                  Yesterday\r\n                </p>\r\n              );\r\n            return day;\r\n          }\r\n        })}\r\n      </div>\r\n      <Button\r\n        className=\"hover:bg-slate-100 dark:hover:bg-slate-800\"\r\n        onClick={NextDay}\r\n      >\r\n        &gt;\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const AddEventButton = () => {\r\n  return <AddEvent state />;\r\n};\r\n\r\n// Tables Related Events\r\nexport const ExportAsCSV = ({ table }: { table: Table<any> }) => {\r\n  const data = table.getRowModel().rows.map((row) => {\r\n    return [\r\n      row.original.id,\r\n      row.original.name,\r\n      row.original.status,\r\n      row.original.verified,\r\n    ];\r\n  });\r\n\r\n  const headers = [\"ID\", \"Name\", \"Status\", \"Verified\"];\r\n\r\n  const handleExport = () => {\r\n    const worksheet = XLSX.utils.json_to_sheet(data, {\r\n      header: [\"id\", \"name\", \"status\", \"verified\"],\r\n    });\r\n    XLSX.utils.sheet_add_aoa(worksheet, [headers], { origin: \"A1\" }); // Create a worksheet from JSON data\r\n    const workbook = XLSX.utils.book_new(); // Create a new workbook\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\"); // Add the worksheet to the workbook\r\n    XLSX.writeFile(workbook, \"table_data.xlsx\"); // Download the file\r\n  };\r\n\r\n  return <button onClick={handleExport}>Export to Excel</button>;\r\n};\r\n\r\nexport const exportToPDF = (table: Table<any>) => {\r\n  const doc = new jsPDF();\r\n\r\n  // Add a title\r\n  doc.text(\"Table\", 4, 10);\r\n\r\n  // Convert table data for jsPDF\r\n  const tableData = table.getRowModel().rows.map((row) => {\r\n    console.log(row.original);\r\n    return [\r\n      row.original.id,\r\n      row.original.name,\r\n      row.original.status,\r\n      row.original.verified,\r\n    ];\r\n  });\r\n  const tableHeaders = [\"ID\", \"Name\", \"status\", \"verified\"];\r\n\r\n  // Add autoTable to the PDF\r\n  doc.autoTable({\r\n    head: [tableHeaders],\r\n    body: tableData,\r\n    startY: 20,\r\n  });\r\n\r\n  // Save the PDF\r\n  doc.save(\"user-data.pdf\");\r\n};\r\n\r\n// Notification Menu Related Events\r\nexport const notificationTime = (startDate: Date, endDate: Date) => {\r\n  const hourTime = differenceInHours(startDate, endDate);\r\n  if (hourTime < 1) {\r\n    const minuteTime = differenceInMinutes(startDate, endDate);\r\n\r\n    if (minuteTime < 1) {\r\n      const secondTime = differenceInSeconds(startDate, endDate);\r\n\r\n      return `${secondTime} seconds ago`;\r\n    } else {\r\n      return `${minuteTime} minute ago`;\r\n    }\r\n  } else if (hourTime >= 24 && hourTime < 48) {\r\n    return `yesterday`;\r\n  } else if (hourTime >= 48) {\r\n    return `${format(endDate, \"P\")} `;\r\n  } else {\r\n    return `${hourTime} hours ago`;\r\n  }\r\n};\r\n\r\n\r\nexport const NotificationType = (notification: Notification) => {\r\n  switch (notification.type) {\r\n    case \"appointment creation\":\r\n      return <PlusCircleFilled className=\"text-green-800\" />;\r\n    case \"appointment deletion\":\r\n      return <DeleteFilled className=\"text-red-800\" />;\r\n    case \"Email Verification\":\r\n      return <ExclamationCircleFilled className=\"text-cyan-700\" />;\r\n    case \"Email Verified\":\r\n      return <CheckCircleFilled className=\"text-green-700\" />;\r\n    case \"New Member\":\r\n    case \"patient creation\":\r\n      return <UserAddOutlined className=\"text-blue-700\" />;\r\n    case \"patient deletion\":\r\n      return <UserDeleteOutlined className=\"text-red-800\" />;\r\n    default:\r\n      return <InfoCircleFilled className=\"text-blue-700\" />;\r\n  }\r\n};\r\n\r\ninterface NotifcationProps {\r\n  type: string;\r\n  title: string;\r\n  description: string;\r\n  assignedBy: string;\r\n  user: string;\r\n  eventId?: string;\r\n  eventType: string;\r\n}\r\n\r\nexport const CreateNotification = (props: NotifcationProps) => {\r\n  const { type, title, description, assignedBy, user, eventId, eventType } =\r\n    props;\r\n\r\n  const notificationData = new FormData();\r\n\r\n  let data = {};\r\n\r\n  if (eventType === \"creation\") {\r\n    data = { type, title, description, assignedBy, user };\r\n  } else {\r\n    data = { type, title, description, assignedBy, user, eventId };\r\n  }\r\n\r\n  Object.entries(data).forEach(([key, value]) => {\r\n    if (value !== undefined && value !== null && value !== \"\") {\r\n      notificationData.append(key, value as string);\r\n    }\r\n  });\r\n  return notificationData;\r\n};\r\n\r\n\r\nexport const playSound = async (tone: keyof ObjectType) => {\r\n  const notificationTone = notificationSounds(tone);\r\n  const player = new Tone.Player(`${notificationTone}`).toDestination();\r\n  player.autostart = true;\r\n};\r\n\r\nexport const NotificationAssignedBy = (\r\n  notification: Notification,\r\n  session: any\r\n) => {\r\n  if (notification.assignedTo === \"All\") return;\r\n  if (notification.type === \"New Member\") {\r\n    switch (notification.assignedTo) {\r\n      case \"Admin\":\r\n        return;\r\n    }\r\n  }\r\n\r\n  if (notification.user === session?.user.id) {\r\n    return <p className=\"text-slate-500 font-medium mr-1\">You Have</p>;\r\n  } else {\r\n    return (\r\n      <p className=\"text-slate-500 font-medium mr-1\">\r\n        {notification.assignedBy} has\r\n      </p>\r\n    );\r\n  }\r\n};\r\n\r\nexport const NotificationDescription = ({\r\n  notification,\r\n}: {\r\n  notification: Notification;\r\n}) => {\r\n  const Component = () => {\r\n    if (notification.eventId) {\r\n      switch (notification.assignedTo) {\r\n        case \"All\":\r\n          return;\r\n        default:\r\n          return (\r\n            <React.Fragment>\r\n              <p className=\"text-left text-[11px] text-green-900\">\r\n                {notification.eventId}\r\n              </p>\r\n              <p className=\"text-left text-[11px] ml-1\">\r\n                at {format(notification.updatedAt, \"Pp\")}\r\n              </p>\r\n            </React.Fragment>\r\n          );\r\n      }\r\n    } else {\r\n      switch (notification.assignedTo) {\r\n        case \"All\":\r\n          return;\r\n        default:\r\n          return (\r\n            <React.Fragment>\r\n              <p className=\"text-left text-[11px]\">\r\n                at {format(notification.updatedAt, \"Pp\")}\r\n              </p>\r\n            </React.Fragment>\r\n          );\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"flex \">\r\n      <Component />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport const SocketInitiator = async (\r\n  notificationTO: string,\r\n  tone: keyof ObjectType,\r\n  socket:Socket<DefaultEventsMap,DefaultEventsMap>,\r\n  setNotifications: React.Dispatch<React.SetStateAction<Notification[]>>\r\n) => {\r\n  const handleNewNotification = async (data: Notification) => {\r\n    setNotifications((prev: Notification[]) => [...prev, data]);\r\n    await playSound(tone);\r\n  };\r\n\r\n  socket.on(notificationTO, async (data: Notification) => {\r\n    try {\r\n      await handleNewNotification(data);\r\n    } catch (error) {\r\n      console.error(\"Error handling admin notification:\", error);\r\n    }\r\n  });\r\n};"
        }
    ]
}