{
    "sourceFile": "frontend/components/AddMedication.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1738708815750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738708835071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,16 +65,16 @@\n     setIsLoading(true);\r\n \r\n     const formData = new FormData();\r\n \r\n-    const notificationData = CreateNotification({\r\n-      type: \"patient creation\",\r\n-      title: \"patient Creation\",\r\n-      description: \"created a new patient\",\r\n-      assignedBy: `${userRole(session)} ${session?.user.name}`,\r\n-      user: `${session?.user.id}`,\r\n-      eventType: \"creation\",\r\n-    });\r\n+    // const notificationData = CreateNotification({\r\n+    //   type: \"patient creation\",\r\n+    //   title: \"patient Creation\",\r\n+    //   description: \"created a new patient\",\r\n+    //   assignedBy: `${userRole(session)} ${session?.user.name}`,\r\n+    //   user: `${session?.user.id}`,\r\n+    //   eventType: \"creation\",\r\n+    // });\r\n     const data = {\r\n       userId: session?.user.id,\r\n       profileImg: values.profileImg[0], // Optional chaining\r\n       firstName: values.firstName,\r\n"
                },
                {
                    "date": 1738708847611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,34 +74,9 @@\n     //   user: `${session?.user.id}`,\r\n     //   eventType: \"creation\",\r\n     // });\r\n     const data = {\r\n-      userId: session?.user.id,\r\n-      profileImg: values.profileImg[0], // Optional chaining\r\n-      firstName: values.firstName,\r\n-      lastName: values.lastName,\r\n-      birthDate: values.birthDate,\r\n-      email: values.email,\r\n-      phone: values.phone,\r\n-      country: values.country?.label,\r\n-      weight: values.weight,\r\n-      height: values.height,\r\n-      bloodType: values.bloodType,\r\n-      gender: values.gender,\r\n-      emergencyContactPerson: values.emergencyContactPerson,\r\n-      emergencyContactRelationship: values.emergencyContactRelationship,\r\n-      emergencyContactNumber: values.emergencyContactNumber,\r\n-      residentialAddress: values.residentialAddress,\r\n-      insuranceProvider: values.insuranceProvider,\r\n-      pastSurgeries: values.pastSurgeries,\r\n-      familyMedicalHistory: values.familyMedicalHistory,\r\n-      currentMedications: values.currentMedications,\r\n-      medicalConditions: values.medicalConditions,\r\n-      allergies: values.allergies,\r\n-      smoking: values.smoking,\r\n-      smokingFrequency: values.smokingFrequency,\r\n-      alcohol: values.alcohol,\r\n-      alcoholFrequency: values.alcoholFrequency,\r\n+      \r\n     };\r\n \r\n     Object.entries(data).forEach(([key, value]) => {\r\n       if (value !== undefined && value !== null && value !== \"\") {\r\n@@ -110,9 +85,9 @@\n     });\r\n \r\n     try {\r\n       const response = await axios.post(\r\n-        \"http://localhost:8080/api/patient/create\",\r\n+        \"http://localhost:8080/api/\",\r\n         formData\r\n       );\r\n \r\n       if (response.status === 201)\r\n"
                },
                {
                    "date": 1738708853007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n         });\r\n \r\n       await axios.post(\r\n         `http://localhost:8080/api/notifications/create`,\r\n-        notificationData\r\n+       \r\n       );\r\n \r\n       setDrawerState(false);\r\n \r\n"
                },
                {
                    "date": 1738708887706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n   return (\r\n     <React.Fragment>\r\n       {contextHolder}\r\n       <Button className=\"AppointmentCreate\" onClick={toggleDrawer(true)}>\r\n-        Create Patient\r\n+        Add Medication\r\n       </Button>\r\n       <Drawer\r\n         anchor=\"right\"\r\n         open={drawerState}\r\n"
                },
                {
                    "date": 1738708895798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,9 +200,9 @@\n             <div className=\"flex flex-col justify-start gap-7 \">\r\n               <h1\r\n                 className={`text-slate-800 text-center font-bold text-lg dark:text-slate-50 ${lato.className}`}\r\n               >\r\n-                Create Patient\r\n+                Add Medication\r\n               </h1>\r\n               <Steps\r\n                 type=\"navigation\"\r\n                 responsive\r\n"
                },
                {
                    "date": 1738708907649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { useForm } from \"react-hook-form\";\r\n import { Form } from \"@/components/ui/form\";\r\n import { useState } from \"react\";\r\n import SubmitButton from \"./togglers/SubmitButton\";\r\n-import { patientSchema } from \"@/lib/vaildation\";\r\n+import { Pha } from \"@/lib/vaildation\";\r\n import { useRouter } from \"next/navigation\";\r\n import axios from \"axios\";\r\n import { zodResolver } from \"@hookform/resolvers/zod\";\r\n import { Button } from \"./ui/button\";\r\n@@ -48,10 +48,10 @@\n       }\r\n       setDrawerState(open);\r\n     };\r\n \r\n-  const form = useForm<Zod.infer<typeof patientSchema>>({\r\n-    resolver: zodResolver(patientSchema),\r\n+  const form = useForm<Zod.infer<typeof Pha>>({\r\n+    resolver: zodResolver(Pha),\r\n     defaultValues: {\r\n       firstName: \"\",\r\n       lastName: \"\",\r\n       email: \"\",\r\n@@ -60,9 +60,9 @@\n       emergencyContactPerson: \"\",\r\n       residentialAddress: \"\",\r\n     },\r\n   });\r\n-  const onSubmit = async (values: Zod.infer<typeof patientSchema>) => {\r\n+  const onSubmit = async (values: Zod.infer<typeof Pha>) => {\r\n     setIsLoading(true);\r\n \r\n     const formData = new FormData();\r\n \r\n"
                },
                {
                    "date": 1738708919272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { useForm } from \"react-hook-form\";\r\n import { Form } from \"@/components/ui/form\";\r\n import { useState } from \"react\";\r\n import SubmitButton from \"./togglers/SubmitButton\";\r\n-import { Medica } from \"@/lib/vaildation\";\r\n+import { Medicat } from \"@/lib/vaildation\";\r\n import { useRouter } from \"next/navigation\";\r\n import axios from \"axios\";\r\n import { zodResolver } from \"@hookform/resolvers/zod\";\r\n import { Button } from \"./ui/button\";\r\n@@ -48,10 +48,10 @@\n       }\r\n       setDrawerState(open);\r\n     };\r\n \r\n-  const form = useForm<Zod.infer<typeof Medica>>({\r\n-    resolver: zodResolver(Medica),\r\n+  const form = useForm<Zod.infer<typeof Medicat>>({\r\n+    resolver: zodResolver(Medicat),\r\n     defaultValues: {\r\n       firstName: \"\",\r\n       lastName: \"\",\r\n       email: \"\",\r\n@@ -60,9 +60,9 @@\n       emergencyContactPerson: \"\",\r\n       residentialAddress: \"\",\r\n     },\r\n   });\r\n-  const onSubmit = async (values: Zod.infer<typeof Medica>) => {\r\n+  const onSubmit = async (values: Zod.infer<typeof Medicat>) => {\r\n     setIsLoading(true);\r\n \r\n     const formData = new FormData();\r\n \r\n"
                },
                {
                    "date": 1738708983801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n       title: \"Medication Info\",\r\n       content: \"\",\r\n     },\r\n     {\r\n-      title: \"Supply \",\r\n+      title: \"Supply In\",\r\n       content: \"\",\r\n     }\r\n   ];\r\n \r\n"
                }
            ],
            "date": 1738708815750,
            "name": "Commit-0",
            "content": "\"use client\";\r\nimport React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Form } from \"@/components/ui/form\";\r\nimport { useState } from \"react\";\r\nimport SubmitButton from \"./togglers/SubmitButton\";\r\nimport { patientSchema } from \"@/lib/vaildation\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport axios from \"axios\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { Button } from \"./ui/button\";\r\nimport { useSession } from \"next-auth/react\";\r\nimport { DashboardHook } from \"./context/Dashboardprovider\";\r\nimport { Drawer } from \"@mui/material\";\r\nimport { PatientHook } from \"./context/PatientProvider\";\r\nimport { Steps } from \"antd\";\r\nimport Swal from \"sweetalert2\";\r\nimport { CreateNotification, userRole } from \"./togglers/TopBarEvents\";\r\nimport FirstStepForm from \"./patient/createPatient/FirstStepForm\";\r\nimport ThirdStepForm from \"./patient/createPatient/ThirdStepForm\";\r\nimport SecondStepForm from \"./patient/createPatient/SecondStepForm\";\r\nimport { lato } from \"@/fonts/fonts\";\r\n\r\nconst AddPatient = () => {\r\n  const [current, setCurrent] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { drawerState, setDrawerState } = PatientHook();\r\n  const { api, contextHolder } = DashboardHook();\r\n  const { data: session } = useSession();\r\n  const router = useRouter();\r\n\r\n  const next = async () => {\r\n    setCurrent(current + 1);\r\n  };\r\n\r\n  const prev = () => {\r\n    setCurrent(current - 1);\r\n  };\r\n\r\n  const toggleDrawer =\r\n    (open: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\r\n      if (\r\n        event.type === \"keydown\" &&\r\n        ((event as React.KeyboardEvent).key === \"Tab\" ||\r\n          (event as React.KeyboardEvent).key === \"Shift\")\r\n      ) {\r\n        return;\r\n      }\r\n      setDrawerState(open);\r\n    };\r\n\r\n  const form = useForm<Zod.infer<typeof patientSchema>>({\r\n    resolver: zodResolver(patientSchema),\r\n    defaultValues: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      currentMedications: \"\",\r\n      insuranceProvider: \"\",\r\n      emergencyContactPerson: \"\",\r\n      residentialAddress: \"\",\r\n    },\r\n  });\r\n  const onSubmit = async (values: Zod.infer<typeof patientSchema>) => {\r\n    setIsLoading(true);\r\n\r\n    const formData = new FormData();\r\n\r\n    const notificationData = CreateNotification({\r\n      type: \"patient creation\",\r\n      title: \"patient Creation\",\r\n      description: \"created a new patient\",\r\n      assignedBy: `${userRole(session)} ${session?.user.name}`,\r\n      user: `${session?.user.id}`,\r\n      eventType: \"creation\",\r\n    });\r\n    const data = {\r\n      userId: session?.user.id,\r\n      profileImg: values.profileImg[0], // Optional chaining\r\n      firstName: values.firstName,\r\n      lastName: values.lastName,\r\n      birthDate: values.birthDate,\r\n      email: values.email,\r\n      phone: values.phone,\r\n      country: values.country?.label,\r\n      weight: values.weight,\r\n      height: values.height,\r\n      bloodType: values.bloodType,\r\n      gender: values.gender,\r\n      emergencyContactPerson: values.emergencyContactPerson,\r\n      emergencyContactRelationship: values.emergencyContactRelationship,\r\n      emergencyContactNumber: values.emergencyContactNumber,\r\n      residentialAddress: values.residentialAddress,\r\n      insuranceProvider: values.insuranceProvider,\r\n      pastSurgeries: values.pastSurgeries,\r\n      familyMedicalHistory: values.familyMedicalHistory,\r\n      currentMedications: values.currentMedications,\r\n      medicalConditions: values.medicalConditions,\r\n      allergies: values.allergies,\r\n      smoking: values.smoking,\r\n      smokingFrequency: values.smokingFrequency,\r\n      alcohol: values.alcohol,\r\n      alcoholFrequency: values.alcoholFrequency,\r\n    };\r\n\r\n    Object.entries(data).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null && value !== \"\") {\r\n        formData.append(key, value as string);\r\n      }\r\n    });\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:8080/api/patient/create\",\r\n        formData\r\n      );\r\n\r\n      if (response.status === 201)\r\n        Swal.fire({\r\n          position: \"center\",\r\n          icon: \"success\",\r\n          title: response.data.message,\r\n          showConfirmButton: false,\r\n          timer: 1500,\r\n        });\r\n\r\n      await axios.post(\r\n        `http://localhost:8080/api/notifications/create`,\r\n        notificationData\r\n      );\r\n\r\n      setDrawerState(false);\r\n\r\n      setCurrent(0);\r\n\r\n      form.reset();\r\n\r\n      router.refresh();\r\n    } catch (error: unknown) {\r\n      if (axios.isAxiosError(error)) {\r\n        if (error.response) {\r\n          api.error({\r\n            message: `${error.response.data.message}`,\r\n            description: \"something went wrong\",\r\n            showProgress: true,\r\n            pauseOnHover: false,\r\n          });\r\n        } else {\r\n          api.error({\r\n            message: \"No Response from Server\",\r\n            description:\r\n              \"Please check your network connection or try again later.\",\r\n            showProgress: true,\r\n            pauseOnHover: false,\r\n          });\r\n        }\r\n      } else if (error instanceof Error) {\r\n        api.error({\r\n          message: \"Unexpected Error\",\r\n          description: error.message,\r\n          showProgress: true,\r\n          pauseOnHover: false,\r\n        });\r\n      }\r\n    }\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const steps = [\r\n    {\r\n      title: \"Personal Info\",\r\n      content: <FirstStepForm form={form} />,\r\n    },\r\n    {\r\n      title: \"Emergency\",\r\n      content: <SecondStepForm form={form} />,\r\n    },\r\n    {\r\n      title: \"Medical\",\r\n      content: <ThirdStepForm form={form} />,\r\n    },\r\n  ];\r\n\r\n  const isValid = form.formState.isValid;\r\n\r\n  const checkForFormValidation = () => {\r\n    if (!isValid) {\r\n      api.error({\r\n        message: \"Some Fields Are Missing\",\r\n        description: \"Please satisfy all the required fields\",\r\n        showProgress: true,\r\n        pauseOnHover: false,\r\n        role: \"status\",\r\n        placement: \"bottomLeft\",\r\n      });\r\n    } else {\r\n      console.log(\"Form is valid, proceed with the action!\");\r\n    }\r\n  };\r\n  const items = steps.map((item) => ({ key: item.title, title: item.title }));\r\n  return (\r\n    <React.Fragment>\r\n      {contextHolder}\r\n      <Button className=\"AppointmentCreate\" onClick={toggleDrawer(true)}>\r\n        Create Patient\r\n      </Button>\r\n      <Drawer\r\n        anchor=\"right\"\r\n        open={drawerState}\r\n        onClose={toggleDrawer(false)}\r\n        style={{\r\n          zIndex: 30,\r\n        }}\r\n        PaperProps={{\r\n          className:\r\n            \"dark:bg-[var(--sidebar-accent)] w-[100vw] sm:w-[80vw] md:w-[70vw] lg:w-[630px] max-w-[640px]\",\r\n        }}\r\n      >\r\n        <Form {...form}>\r\n          <form\r\n            onSubmit={form.handleSubmit(onSubmit)}\r\n            className=\"flex flex-col w-full   space-y-10  p-4 \"\r\n          >\r\n            <div className=\"flex flex-col justify-start gap-7 \">\r\n              <h1\r\n                className={`text-slate-800 text-center font-bold text-lg dark:text-slate-50 ${lato.className}`}\r\n              >\r\n                Create Patient\r\n              </h1>\r\n              <Steps\r\n                type=\"navigation\"\r\n                responsive\r\n                className=\"p-4 custom-steps  dark:text-white\"\r\n                current={current}\r\n                items={items}\r\n              />\r\n            </div>\r\n\r\n            {steps[current].content}\r\n\r\n            <div className=\"flex w-full\">\r\n              {current < steps.length - 1 && (\r\n                <span\r\n                  className=\"flex-1 cursor-pointer bg-blue-700 text-slate-50 py-2 px-4 rounded-md text-center\"\r\n                  onClick={() => next()}\r\n                >\r\n                  Next\r\n                </span>\r\n              )}\r\n              {current === steps.length - 1 && (\r\n                <SubmitButton\r\n                  className=\"bg-[#6366f1] text-slate-50 w-[80%]\"\r\n                  isLoading={isLoading}\r\n                  onclick={checkForFormValidation}\r\n                >\r\n                  submit\r\n                </SubmitButton>\r\n              )}\r\n              {current > 0 && (\r\n                <span\r\n                  onClick={() => prev()}\r\n                  className=\"cursor-pointer ml-2 bg-slate-200 py-2 px-4 rounded-md \"\r\n                >\r\n                  Previous\r\n                </span>\r\n              )}\r\n            </div>\r\n          </form>\r\n        </Form>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default AddPatient;\r\n"
        }
    ]
}