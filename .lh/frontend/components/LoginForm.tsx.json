{
    "sourceFile": "frontend/components/LoginForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1739218580028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739218586765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n \"use client\";\r\n-\r\n import { zodResolver } from \"@hookform/resolvers/zod\";\r\n import { useForm } from \"react-hook-form\";\r\n import { z } from \"zod\";\r\n import { Form } from \"@/components/ui/form\";\r\n"
                }
            ],
            "date": 1739218580028,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { z } from \"zod\";\r\nimport { Form } from \"@/components/ui/form\";\r\nimport CustomFormField from \"./CustomFormField\";\r\nimport { FormFieldType } from \"./CustomFormField\";\r\nimport { useState } from \"react\";\r\nimport { User, KeyRound, EyeOff, Eye } from \"lucide-react\";\r\nimport SubmitButton from \"./togglers/SubmitButton\";\r\nimport { userSchema } from \"@/lib/vaildation\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { signIn } from \"next-auth/react\";\r\nimport Image from \"next/image\";\r\nimport Link from \"next/link\";\r\nimport { DashboardHook } from \"./context/Dashboardprovider\";\r\n\r\nconst LoginForm = () => {\r\n  const router = useRouter();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [state, setState] = useState<boolean>(false);\r\n  const {api,contextHolder} = DashboardHook()\r\n  const onSubmit = async (values: z.infer<typeof userSchema>) => {\r\n    setIsLoading(true);\r\n\r\n    const email = values.email;\r\n    const password = values.password;\r\n\r\n    try {\r\n      const result = await signIn(\"credentials\", {\r\n        redirect: false,\r\n        email,\r\n        password,\r\n      });\r\n\r\n      if (!result?.ok) {\r\n       api.error({\r\n        message:result?.error,\r\n        description:\"Something went wrong\",\r\n        showProgress: true,\r\n        pauseOnHover: false,\r\n       })\r\n      } else if (result?.ok) {\r\n        Swal.fire({\r\n          position: \"center\",\r\n          icon: \"success\",\r\n          title: \"logged in successfully\",\r\n          showConfirmButton: false,\r\n          timer: 1500,\r\n        });\r\n        router.push(\"/dashboard\");\r\n      }\r\n    } catch (error: any) {\r\n     api.error({\r\n       message:\"Something went wrong\",\r\n       description:error,\r\n       showProgress: true,\r\n       pauseOnHover: false, \r\n     })\r\n    }\r\n\r\n    setIsLoading(false);\r\n  };\r\n  const form = useForm<z.infer<typeof userSchema>>({\r\n    resolver: zodResolver(userSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Form {...form}>\r\n      {contextHolder}\r\n      <form\r\n        onSubmit={form.handleSubmit(onSubmit)}\r\n        className=\"space-y-8 my-auto px-4 sm:p-0 sm:mx-4\"\r\n      >\r\n        <div className=\"flex flex-col justify-center items-center\">\r\n          <Image\r\n            src=\"/assets/icons/mark.svg\"\r\n            alt=\"SignIn\"\r\n            width={50}\r\n            height={50}\r\n          />\r\n\r\n          <div className=\"my-4\">\r\n            <h1 className=\"text-2xl font-bold sm:text-4xl text-center\">\r\n              Sign In To Dashboard\r\n            </h1>\r\n          </div>\r\n        </div>\r\n        <CustomFormField\r\n          control={form.control}\r\n          Lucide={<User className=\"dark:text-dark-600\" />}\r\n          placeholder=\"enter your email\"\r\n          label=\"email address\"\r\n          fieldType={FormFieldType.INPUT}\r\n          name=\"email\"\r\n          error={form.formState.errors.email}\r\n          state\r\n        />\r\n\r\n        <CustomFormField\r\n          control={form.control}\r\n          Lucide={<KeyRound className=\"dark:text-dark-600\" />}\r\n          placeholder=\"enter password\"\r\n          label=\"password\"\r\n          fieldType={FormFieldType.PASSWORD}\r\n          type={state ? \"text\" : \"password\"}\r\n          error={form.formState.errors.password}\r\n          children={\r\n            <>\r\n              {state ? (\r\n                <Eye\r\n                  onClick={() => setState(false)}\r\n                  size=\"20px\"\r\n                  cursor=\"pointer\"\r\n                />\r\n              ) : (\r\n                <EyeOff\r\n                  onClick={() => setState(true)}\r\n                  size=\"20px\"\r\n                  cursor=\"pointer\"\r\n                />\r\n              )}\r\n            </>\r\n          }\r\n          name=\"password\"\r\n        />\r\n\r\n        <SubmitButton\r\n          isLoading={isLoading}\r\n          className=\"bg-[#6366f1] w-full text-slate-50\"\r\n        >\r\n          Sign in\r\n        </SubmitButton>\r\n\r\n        <div className=\"flex justify-between\">\r\n          <p className=\"text-sm text-slate-500\">doesn't have account?</p>\r\n          <Link href={\"/register\"}>\r\n            <p className=\"text-sky-700 text-sm hover:underline\">create one</p>\r\n          </Link>\r\n        </div>\r\n      </form>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n\r\nexport const dynamic = \"force-dynamic\";\r\n"
        }
    ]
}