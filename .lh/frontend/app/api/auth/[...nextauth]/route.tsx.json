{
    "sourceFile": "frontend/app/api/auth/[...nextauth]/route.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 45,
            "patches": [
                {
                    "date": 1739030240877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739280634658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n         password: { label: \"Password\", type: \"password\" },\r\n       },\r\n       authorize: async (credentials) => {\r\n         try {\r\n+          const \r\n           const response = await axios.post(\r\n             \"http://localhost:8080/api/auth/login\",\r\n             {\r\n               email: credentials?.email,\r\n@@ -90,9 +91,8 @@\n           verified: token.verified,\r\n           code:token.code\r\n         };\r\n       }\r\n-      console.log(session);\r\n       return session;\r\n     },\r\n   },\r\n   secret: process.env.NEXTAUTH_SECRET,\r\n"
                },
                {
                    "date": 1739280641210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         password: { label: \"Password\", type: \"password\" },\r\n       },\r\n       authorize: async (credentials) => {\r\n         try {\r\n-          const \r\n+          const login\r\n           const response = await axios.post(\r\n             \"http://localhost:8080/api/auth/login\",\r\n             {\r\n               email: credentials?.email,\r\n"
                },
                {
                    "date": 1739280647242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import jwt, { JwtPayload } from \"jsonwebtoken\";\r\n import { JWT } from \"next-auth/jwt\";\r\n import { cookies } from \"next/headers\";\r\n import { UserInformation } from \"@/types\";\r\n+import { useLogin } from \"@/actions/mutation\";\r\n \r\n const authOptions: AuthOptions = {\r\n \r\n   providers: [\r\n@@ -16,9 +17,9 @@\n         password: { label: \"Password\", type: \"password\" },\r\n       },\r\n       authorize: async (credentials) => {\r\n         try {\r\n-          const login\r\n+          const login = useLogin()\r\n           const response = await axios.post(\r\n             \"http://localhost:8080/api/auth/login\",\r\n             {\r\n               email: credentials?.email,\r\n"
                },
                {
                    "date": 1739280794808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n import jwt, { JwtPayload } from \"jsonwebtoken\";\r\n import { JWT } from \"next-auth/jwt\";\r\n import { cookies } from \"next/headers\";\r\n import { UserInformation } from \"@/types\";\r\n-import { useLogin } from \"@/actions/mutation\";\r\n \r\n const authOptions: AuthOptions = {\r\n \r\n   providers: [\r\n"
                },
                {
                    "date": 1739287250493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,8 @@\n import CredentialsProvider from \"next-auth/providers/credentials\";\r\n import axios from \"axios\";\r\n import jwt, { JwtPayload } from \"jsonwebtoken\";\r\n import { JWT } from \"next-auth/jwt\";\r\n-import { cookies } from \"next/headers\";\r\n-import { UserInformation } from \"@/types\";\r\n \r\n const authOptions: AuthOptions = {\r\n \r\n   providers: [\r\n@@ -16,9 +14,8 @@\n         password: { label: \"Password\", type: \"password\" },\r\n       },\r\n       authorize: async (credentials) => {\r\n         try {\r\n-          const login = useLogin()\r\n           const response = await axios.post(\r\n             \"http://localhost:8080/api/auth/login\",\r\n             {\r\n               email: credentials?.email,\r\n@@ -49,15 +46,15 @@\n           return null; // Return null if no token is found\r\n         } catch (error: any) {\r\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n \r\n-          if (error.response) {\r\n-            const { status, data } = error.response;\r\n-            if (status === 401) throw new Error(\"Invalid email or password.\");\r\n-            if (status === 403)\r\n-              throw new Error(data?.msg || \"Access forbidden.\");\r\n-            throw new Error(data?.msg || \"An unexpected error occurred.\");\r\n-          }\r\n+          // if (error.response) {\r\n+          //   const { status, data } = error.response;\r\n+          //   if (status === 401) throw new Error(\"Invalid email or password.\");\r\n+          //   if (status === 403)\r\n+          //     throw new Error(data?.msg || \"Access forbidden.\");\r\n+          //   throw new Error(data?.msg || \"An unexpected error occurred.\");\r\n+          // }\r\n \r\n           throw new Error(\"Unable to connect to the server.\");\r\n         }\r\n       },\r\n"
                },
                {
                    "date": 1739287356361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,9 @@\n           return null; // Return null if no token is found\r\n         } catch (error: any) {\r\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n \r\n+          handle\r\n           // if (error.response) {\r\n           //   const { status, data } = error.response;\r\n           //   if (status === 401) throw new Error(\"Invalid email or password.\");\r\n           //   if (status === 403)\r\n"
                },
                {
                    "date": 1739287364038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import CredentialsProvider from \"next-auth/providers/credentials\";\r\n import axios from \"axios\";\r\n import jwt, { JwtPayload } from \"jsonwebtoken\";\r\n import { JWT } from \"next-auth/jwt\";\r\n+import HandleAxiosErrors from \"@/components/HandleAxiosErrors\";\r\n \r\n const authOptions: AuthOptions = {\r\n \r\n   providers: [\r\n@@ -46,9 +47,9 @@\n           return null; // Return null if no token is found\r\n         } catch (error: any) {\r\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n \r\n-          handle\r\n+          HandleAxiosErrors({api,error})\r\n           // if (error.response) {\r\n           //   const { status, data } = error.response;\r\n           //   if (status === 401) throw new Error(\"Invalid email or password.\");\r\n           //   if (status === 403)\r\n"
                },
                {
                    "date": 1739287389104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import axios from \"axios\";\r\n import jwt, { JwtPayload } from \"jsonwebtoken\";\r\n import { JWT } from \"next-auth/jwt\";\r\n import HandleAxiosErrors from \"@/components/HandleAxiosErrors\";\r\n-\r\n+const \r\n const authOptions: AuthOptions = {\r\n \r\n   providers: [\r\n     CredentialsProvider({\r\n"
                },
                {
                    "date": 1739287394490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import axios from \"axios\";\r\n import jwt, { JwtPayload } from \"jsonwebtoken\";\r\n import { JWT } from \"next-auth/jwt\";\r\n import HandleAxiosErrors from \"@/components/HandleAxiosErrors\";\r\n-const \r\n+\r\n const authOptions: AuthOptions = {\r\n \r\n   providers: [\r\n     CredentialsProvider({\r\n@@ -47,8 +47,9 @@\n           return null; // Return null if no token is found\r\n         } catch (error: any) {\r\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n \r\n+          const \r\n           HandleAxiosErrors({api,error})\r\n           // if (error.response) {\r\n           //   const { status, data } = error.response;\r\n           //   if (status === 401) throw new Error(\"Invalid email or password.\");\r\n"
                },
                {
                    "date": 1739287401561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n           return null; // Return null if no token is found\r\n         } catch (error: any) {\r\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n \r\n-          const \r\n+          const {api} = dashb\r\n           HandleAxiosErrors({api,error})\r\n           // if (error.response) {\r\n           //   const { status, data } = error.response;\r\n           //   if (status === 401) throw new Error(\"Invalid email or password.\");\r\n"
                },
                {
                    "date": 1739287423143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import axios from \"axios\";\r\n import jwt, { JwtPayload } from \"jsonwebtoken\";\r\n import { JWT } from \"next-auth/jwt\";\r\n import HandleAxiosErrors from \"@/components/HandleAxiosErrors\";\r\n+import { DashboardHook } from \"@/components/context/Dashboardprovider\";\r\n \r\n const authOptions: AuthOptions = {\r\n \r\n   providers: [\r\n@@ -47,9 +48,8 @@\n           return null; // Return null if no token is found\r\n         } catch (error: any) {\r\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n \r\n-          const {api} = dashb\r\n           HandleAxiosErrors({api,error})\r\n           // if (error.response) {\r\n           //   const { status, data } = error.response;\r\n           //   if (status === 401) throw new Error(\"Invalid email or password.\");\r\n"
                },
                {
                    "date": 1739287433212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n import axios from \"axios\";\r\n import jwt, { JwtPayload } from \"jsonwebtoken\";\r\n import { JWT } from \"next-auth/jwt\";\r\n import HandleAxiosErrors from \"@/components/HandleAxiosErrors\";\r\n-import { DashboardHook } from \"@/components/context/Dashboardprovider\";\r\n \r\n const authOptions: AuthOptions = {\r\n \r\n   providers: [\r\n@@ -48,9 +47,9 @@\n           return null; // Return null if no token is found\r\n         } catch (error: any) {\r\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n \r\n-          HandleAxiosErrors({api,error})\r\n+         \r\n           // if (error.response) {\r\n           //   const { status, data } = error.response;\r\n           //   if (status === 401) throw new Error(\"Invalid email or password.\");\r\n           //   if (status === 403)\r\n"
                },
                {
                    "date": 1739287455526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import axios from \"axios\";\r\n import jwt, { JwtPayload } from \"jsonwebtoken\";\r\n import { JWT } from \"next-auth/jwt\";\r\n import HandleAxiosErrors from \"@/components/HandleAxiosErrors\";\r\n+import { DashboardHook } from \"@/components/context/Dashboardprovider\";\r\n \r\n const authOptions: AuthOptions = {\r\n \r\n   providers: [\r\n@@ -47,9 +48,9 @@\n           return null; // Return null if no token is found\r\n         } catch (error: any) {\r\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n \r\n-         \r\n+          HandleAxiosErrors({api,error})\r\n           // if (error.response) {\r\n           //   const { status, data } = error.response;\r\n           //   if (status === 401) throw new Error(\"Invalid email or password.\");\r\n           //   if (status === 403)\r\n"
                },
                {
                    "date": 1739287462485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,8 @@\n import CredentialsProvider from \"next-auth/providers/credentials\";\r\n import axios from \"axios\";\r\n import jwt, { JwtPayload } from \"jsonwebtoken\";\r\n import { JWT } from \"next-auth/jwt\";\r\n-import HandleAxiosErrors from \"@/components/HandleAxiosErrors\";\r\n-import { DashboardHook } from \"@/components/context/Dashboardprovider\";\r\n \r\n const authOptions: AuthOptions = {\r\n \r\n   providers: [\r\n@@ -48,16 +46,15 @@\n           return null; // Return null if no token is found\r\n         } catch (error: any) {\r\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n \r\n-          HandleAxiosErrors({api,error})\r\n-          // if (error.response) {\r\n-          //   const { status, data } = error.response;\r\n-          //   if (status === 401) throw new Error(\"Invalid email or password.\");\r\n-          //   if (status === 403)\r\n-          //     throw new Error(data?.msg || \"Access forbidden.\");\r\n-          //   throw new Error(data?.msg || \"An unexpected error occurred.\");\r\n-          // }\r\n+          if (error.response) {\r\n+            const { status, data } = error.response;\r\n+            if (status === 401) throw new Error(\"Invalid email or password.\");\r\n+            if (status === 403)\r\n+              throw new Error(data?.msg || \"Access forbidden.\");\r\n+            throw new Error(data?.msg || \"An unexpected error occurred.\");\r\n+          }\r\n \r\n           throw new Error(\"Unable to connect to the server.\");\r\n         }\r\n       },\r\n"
                },
                {
                    "date": 1739287475553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n \r\n           if (error.response) {\r\n             const { status, data } = error.response;\r\n-            if (status === 401) throw new Error(\"Invalid email or password.\");\r\n+            if (status. === 401) throw new Error(\"Invalid email or password.\");\r\n             if (status === 403)\r\n               throw new Error(data?.msg || \"Access forbidden.\");\r\n             throw new Error(data?.msg || \"An unexpected error occurred.\");\r\n           }\r\n"
                },
                {
                    "date": 1739287485748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,11 @@\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n \r\n           if (error.response) {\r\n             const { status, data } = error.response;\r\n-            if (status. === 401) throw new Error(\"Invalid email or password.\");\r\n+            if (status === 401) throw new Error(\"Invalid email or password.\");\r\n             if (status === 403)\r\n-              throw new Error(data?.msg || \"Access forbidden.\");\r\n+              throw new Error(data?.message || \"Access forbidden.\");\r\n             throw new Error(data?.msg || \"An unexpected error occurred.\");\r\n           }\r\n \r\n           throw new Error(\"Unable to connect to the server.\");\r\n"
                },
                {
                    "date": 1739287509640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,12 +48,12 @@\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n \r\n           if (error.response) {\r\n             const { status, data } = error.response;\r\n-            if (status === 401) throw new Error(\"Invalid email or password.\");\r\n+            if (status === 401) throw new Error(dar);\r\n             if (status === 403)\r\n               throw new Error(data?.message || \"Access forbidden.\");\r\n-            throw new Error(data?.msg || \"An unexpected error occurred.\");\r\n+            throw new Error(data?.message || \"An unexpected error occurred.\");\r\n           }\r\n \r\n           throw new Error(\"Unable to connect to the server.\");\r\n         }\r\n"
                },
                {
                    "date": 1739287532935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n \r\n           if (error.response) {\r\n             const { status, data } = error.response;\r\n-            if (status === 401) throw new Error(dar);\r\n+            if (status !== 200) throw new Error(data.message);\r\n             if (status === 403)\r\n               throw new Error(data?.message || \"Access forbidden.\");\r\n             throw new Error(data?.message || \"An unexpected error occurred.\");\r\n           }\r\n"
                },
                {
                    "date": 1739465607152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,4 +98,7 @@\n const handler = NextAuth(authOptions);\r\n \r\n // Correctly export as HTTP methods\r\n export { handler as GET, handler as POST };\r\n+export const config = {\r\n+  runtime: \"nodejs\",\r\n+};\r\n"
                },
                {
                    "date": 1739465957873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,7 +98,5 @@\n const handler = NextAuth(authOptions);\r\n \r\n // Correctly export as HTTP methods\r\n export { handler as GET, handler as POST };\r\n-export const config = {\r\n-  runtime: \"nodejs\",\r\n-};\r\n+export const runtime = \"nodejs\";\r\n"
                },
                {
                    "date": 1739465965869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,5 +98,4 @@\n const handler = NextAuth(authOptions);\r\n \r\n // Correctly export as HTTP methods\r\n export { handler as GET, handler as POST };\r\n-export const runtime = \"nodejs\";\r\n"
                },
                {
                    "date": 1739467531074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n import axios from \"axios\";\r\n import jwt, { JwtPayload } from \"jsonwebtoken\";\r\n import { JWT } from \"next-auth/jwt\";\r\n \r\n+\r\n+\r\n const authOptions: AuthOptions = {\r\n \r\n   providers: [\r\n     CredentialsProvider({\r\n"
                },
                {
                    "date": 1739984986685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n           );\r\n \r\n           const { token } = response.data;\r\n \r\n+          console.log(token)\r\n           if (token) {\r\n             // Decode the JWT token\r\n             const decodedToken = jwt.decode(token) as JwtPayload;\r\n \r\n"
                },
                {
                    "date": 1739984999036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n               password: credentials?.password,\r\n             }\r\n           );\r\n \r\n-          const { token } = response.data;\r\n+          const { acess } = response.data;\r\n \r\n           console.log(token)\r\n           if (token) {\r\n             // Decode the JWT token\r\n"
                },
                {
                    "date": 1739985009030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n               password: credentials?.password,\r\n             }\r\n           );\r\n \r\n-          const { acess } = response.data;\r\n+          const { accessToken } = response.data;\r\n \r\n           console.log(token)\r\n           if (token) {\r\n             // Decode the JWT token\r\n"
                },
                {
                    "date": 1739985014322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,10 @@\n           );\r\n \r\n           const { accessToken } = response.data;\r\n \r\n-          console.log(token)\r\n-          if (token) {\r\n+          console.log(accessToken)\r\n+          if (accessToken) {\r\n             // Decode the JWT token\r\n             const decodedToken = jwt.decode(token) as JwtPayload;\r\n \r\n             // Return the user object\r\n"
                },
                {
                    "date": 1739985019729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \r\n           console.log(accessToken)\r\n           if (accessToken) {\r\n             // Decode the JWT token\r\n-            const decodedToken = jwt.decode(token) as JwtPayload;\r\n+            const decodedToken = jwt.decode(accessToken) as JwtPayload;\r\n \r\n             // Return the user object\r\n \r\n             return {\r\n@@ -42,9 +42,9 @@\n               profileImg: decodedToken.profileImg,\r\n               verified: decodedToken.verified,\r\n               expires: decodedToken.expires,\r\n               code:decodedToken.code,\r\n-              token,\r\n+              accessToken,\r\n             };\r\n           }\r\n           return null; // Return null if no token is found\r\n         } catch (error: any) {\r\n"
                },
                {
                    "date": 1739985962492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,9 @@\n           verified: token.verified,\r\n           code:token.code\r\n         };\r\n       }\r\n+      console.log(session)\r\n       return session;\r\n     },\r\n   },\r\n   secret: process.env.NEXTAUTH_SECRET,\r\n"
                },
                {
                    "date": 1739986022100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n   ],\r\n   callbacks: {\r\n     async jwt({ token, user }: { token: JWT; user: any }) {\r\n       if (user) {\r\n-        token.id = user.id;\r\n+        token.id = user._id;\r\n         token.role = user.role;\r\n         token.name = user.name;\r\n         token.token = user.token;\r\n         token.profileImg = user.profileImg;\r\n"
                },
                {
                    "date": 1739986092259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n   ],\r\n   callbacks: {\r\n     async jwt({ token, user }: { token: JWT; user: any }) {\r\n       if (user) {\r\n-        token.id = user._id;\r\n+        token.id = user.id;\r\n         token.role = user.role;\r\n         token.name = user.name;\r\n         token.token = user.token;\r\n         token.profileImg = user.profileImg;\r\n"
                },
                {
                    "date": 1739987138760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n         session.user = {\r\n           ...session.user,\r\n           id: token.id,\r\n           role: token.role,\r\n-          image: token.profileImg as string,\r\n+          image: token.profileImg. as string,\r\n           name: token.name,\r\n           verified: token.verified,\r\n           code:token.code\r\n         };\r\n"
                },
                {
                    "date": 1739987177889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n         session.user = {\r\n           ...session.user,\r\n           id: token.id,\r\n           role: token.role,\r\n-          image: token.profileImg. as string,\r\n+          image: token.profileImg.url ,\r\n           name: token.name,\r\n           verified: token.verified,\r\n           code:token.code\r\n         };\r\n"
                },
                {
                    "date": 1739987184119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n         session.user = {\r\n           ...session.user,\r\n           id: token.id,\r\n           role: token.role,\r\n-          image: token.profileImg.url ,\r\n+          image: token.profileImg?.url ,\r\n           name: token.name,\r\n           verified: token.verified,\r\n           code:token.code\r\n         };\r\n"
                },
                {
                    "date": 1739987203209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n         token.id = user.id;\r\n         token.role = user.role;\r\n         token.name = user.name;\r\n         token.token = user.token;\r\n-        token.profileImg = user.profileImg;\r\n+        token.profileImg.url = user.profileImg;\r\n         token.verified = user.verified;\r\n         token.code = user.code\r\n       }\r\n \r\n@@ -85,9 +85,9 @@\n         session.user = {\r\n           ...session.user,\r\n           id: token.id,\r\n           role: token.role,\r\n-          image: token.profileImg?.url ,\r\n+          image: token?.profileImg?.url  as string,\r\n           name: token.name,\r\n           verified: token.verified,\r\n           code:token.code\r\n         };\r\n"
                },
                {
                    "date": 1739987209703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n         token.id = user.id;\r\n         token.role = user.role;\r\n         token.name = user.name;\r\n         token.token = user.token;\r\n-        token.profileImg.url = user.profileImg;\r\n+        token.profileImg = user.profileImg.url;\r\n         token.verified = user.verified;\r\n         token.code = user.code\r\n       }\r\n \r\n"
                },
                {
                    "date": 1739987835467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,8 @@\n           );\r\n \r\n           const { accessToken } = response.data;\r\n \r\n-          console.log(accessToken)\r\n           if (accessToken) {\r\n             // Decode the JWT token\r\n             const decodedToken = jwt.decode(accessToken) as JwtPayload;\r\n \r\n@@ -85,9 +84,9 @@\n         session.user = {\r\n           ...session.user,\r\n           id: token.id,\r\n           role: token.role,\r\n-          image: token?.profileImg?.url  as string,\r\n+          image: token?.profileImg  as string,\r\n           name: token.name,\r\n           verified: token.verified,\r\n           code:token.code\r\n         };\r\n"
                },
                {
                    "date": 1739987981447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,34 @@\n import axios from \"axios\";\r\n import jwt, { JwtPayload } from \"jsonwebtoken\";\r\n import { JWT } from \"next-auth/jwt\";\r\n \r\n+const API_URL = \"http://localhost:8080/api/auth\";\r\n \r\n+const refreshAccessToken = async (token: JWT) => {\r\n+  try {\r\n+    const response = await axios.post(`${API_URL}/refresh`, {\r\n+      refreshToken: token.refreshToken, // Send refresh token\r\n+    });\r\n \r\n+    const { accessToken } = response.data;\r\n+\r\n+    if (!accessToken) throw new Error(\"Failed to refresh token\");\r\n+\r\n+    const decodedToken = jwt.decode(accessToken) as JwtPayload;\r\n+\r\n+    return {\r\n+      ...token,\r\n+      accessToken,\r\n+      accessTokenExpires: Date.now() + 15 * 60 * 1000, // 15 min expiry\r\n+    };\r\n+  } catch (error) {\r\n+    console.error(\"Error refreshing token:\", error);\r\n+    return { ...token, error: \"RefreshTokenError\" };\r\n+  }\r\n+};\r\n+\r\n const authOptions: AuthOptions = {\r\n-\r\n   providers: [\r\n     CredentialsProvider({\r\n       name: \"Credentials\",\r\n       credentials: {\r\n@@ -16,89 +38,87 @@\n         password: { label: \"Password\", type: \"password\" },\r\n       },\r\n       authorize: async (credentials) => {\r\n         try {\r\n-          const response = await axios.post(\r\n-            \"http://localhost:8080/api/auth/login\",\r\n-            {\r\n-              email: credentials?.email,\r\n-              password: credentials?.password,\r\n-            }\r\n-          );\r\n+          const response = await axios.post(`${API_URL}/login`, {\r\n+            email: credentials?.email,\r\n+            password: credentials?.password,\r\n+          });\r\n \r\n-          const { accessToken } = response.data;\r\n+          const { accessToken, refreshToken } = response.data;\r\n \r\n-          if (accessToken) {\r\n-            // Decode the JWT token\r\n-            const decodedToken = jwt.decode(accessToken) as JwtPayload;\r\n+          if (!accessToken || !refreshToken) return null;\r\n \r\n-            // Return the user object\r\n+          const decodedToken = jwt.decode(accessToken) as JwtPayload;\r\n \r\n-            return {\r\n-              email: credentials?.email,\r\n-              id: decodedToken.id,\r\n-              role: decodedToken.role,\r\n-              name: decodedToken.name,\r\n-              profileImg: decodedToken.profileImg,\r\n-              verified: decodedToken.verified,\r\n-              expires: decodedToken.expires,\r\n-              code:decodedToken.code,\r\n-              accessToken,\r\n-            };\r\n-          }\r\n-          return null; // Return null if no token is found\r\n+          return {\r\n+            email: credentials?.email,\r\n+            id: decodedToken.id,\r\n+            role: decodedToken.role,\r\n+            name: decodedToken.name,\r\n+            profileImg: decodedToken.profileImg,\r\n+            verified: decodedToken.verified,\r\n+            code: decodedToken.code,\r\n+            accessToken,\r\n+            refreshToken, // Store refresh token\r\n+            accessTokenExpires: Date.now() + 15 * 60 * 1000, // 15 min expiry\r\n+          };\r\n         } catch (error: any) {\r\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n-\r\n-          if (error.response) {\r\n-            const { status, data } = error.response;\r\n-            if (status !== 200) throw new Error(data.message);\r\n-            if (status === 403)\r\n-              throw new Error(data?.message || \"Access forbidden.\");\r\n-            throw new Error(data?.message || \"An unexpected error occurred.\");\r\n-          }\r\n-\r\n-          throw new Error(\"Unable to connect to the server.\");\r\n+          throw new Error(error.response?.data?.message || \"Login failed\");\r\n         }\r\n       },\r\n     }),\r\n   ],\r\n   callbacks: {\r\n-    async jwt({ token, user }: { token: JWT; user: any }) {\r\n+    async jwt({ token, user }) {\r\n+      // On login, store tokens\r\n       if (user) {\r\n-        token.id = user.id;\r\n-        token.role = user.role;\r\n-        token.name = user.name;\r\n-        token.token = user.token;\r\n-        token.profileImg = user.profileImg.url;\r\n-        token.verified = user.verified;\r\n-        token.code = user.code\r\n+        return {\r\n+          ...token,\r\n+          id: user.id,\r\n+          role: user.role,\r\n+          name: user.name,\r\n+          profileImg: user.profileImg?.url,\r\n+          verified: user.verified,\r\n+          code: user.code,\r\n+          accessToken: user.accessToken,\r\n+          refreshToken: user.refreshToken,\r\n+          accessTokenExpires: user.accessTokenExpires,\r\n+        };\r\n       }\r\n \r\n+      // If access token is expired, refresh it\r\n+      if (Date.now() > (token.accessTokenExpires as number)) {\r\n+        console.log(\"Access token expired, refreshing...\");\r\n+        return await refreshAccessToken(token);\r\n+      }\r\n+\r\n       return token;\r\n     },\r\n+\r\n     async session({ session, token }) {\r\n-      // const response = await fetch(`http://localhost:8080/api/auth/${token.id}`)\r\n-      // const data = await response.json() \r\n-      // const user = data.existingUser as UserInformation\r\n       if (token) {\r\n         session.user = {\r\n           ...session.user,\r\n           id: token.id,\r\n           role: token.role,\r\n-          image: token?.profileImg  as string,\r\n+          image: token.profileImg as string,\r\n           name: token.name,\r\n           verified: token.verified,\r\n-          code:token.code\r\n+          code: token.code,\r\n         };\r\n+        session.accessToken = token.accessToken;\r\n+        session.error = token.error;\r\n       }\r\n-      console.log(session)\r\n       return session;\r\n     },\r\n   },\r\n   secret: process.env.NEXTAUTH_SECRET,\r\n+  pages: {\r\n+    signIn: \"/login\",\r\n+  },\r\n };\r\n \r\n const handler = NextAuth(authOptions);\r\n \r\n-// Correctly export as HTTP methods\r\n export { handler as GET, handler as POST };\r\n"
                },
                {
                    "date": 1739988014831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n           ...token,\r\n           id: user.id,\r\n           role: user.role,\r\n           name: user.name,\r\n-          profileImg: user.profileImg?.url,\r\n+          image: user.profileImg?.url,\r\n           verified: user.verified,\r\n           code: user.code,\r\n           accessToken: user.accessToken,\r\n           refreshToken: user.refreshToken,\r\n"
                },
                {
                    "date": 1739988024116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,34 +3,12 @@\n import axios from \"axios\";\r\n import jwt, { JwtPayload } from \"jsonwebtoken\";\r\n import { JWT } from \"next-auth/jwt\";\r\n \r\n-const API_URL = \"http://localhost:8080/api/auth\";\r\n \r\n-const refreshAccessToken = async (token: JWT) => {\r\n-  try {\r\n-    const response = await axios.post(`${API_URL}/refresh`, {\r\n-      refreshToken: token.refreshToken, // Send refresh token\r\n-    });\r\n \r\n-    const { accessToken } = response.data;\r\n+const authOptions: AuthOptions = {\r\n \r\n-    if (!accessToken) throw new Error(\"Failed to refresh token\");\r\n-\r\n-    const decodedToken = jwt.decode(accessToken) as JwtPayload;\r\n-\r\n-    return {\r\n-      ...token,\r\n-      accessToken,\r\n-      accessTokenExpires: Date.now() + 15 * 60 * 1000, // 15 min expiry\r\n-    };\r\n-  } catch (error) {\r\n-    console.error(\"Error refreshing token:\", error);\r\n-    return { ...token, error: \"RefreshTokenError\" };\r\n-  }\r\n-};\r\n-\r\n-const authOptions: AuthOptions = {\r\n   providers: [\r\n     CredentialsProvider({\r\n       name: \"Credentials\",\r\n       credentials: {\r\n@@ -38,87 +16,89 @@\n         password: { label: \"Password\", type: \"password\" },\r\n       },\r\n       authorize: async (credentials) => {\r\n         try {\r\n-          const response = await axios.post(`${API_URL}/login`, {\r\n-            email: credentials?.email,\r\n-            password: credentials?.password,\r\n-          });\r\n+          const response = await axios.post(\r\n+            \"http://localhost:8080/api/auth/login\",\r\n+            {\r\n+              email: credentials?.email,\r\n+              password: credentials?.password,\r\n+            }\r\n+          );\r\n \r\n-          const { accessToken, refreshToken } = response.data;\r\n+          const { accessToken } = response.data;\r\n \r\n-          if (!accessToken || !refreshToken) return null;\r\n+          if (accessToken) {\r\n+            // Decode the JWT token\r\n+            const decodedToken = jwt.decode(accessToken) as JwtPayload;\r\n \r\n-          const decodedToken = jwt.decode(accessToken) as JwtPayload;\r\n+            // Return the user object\r\n \r\n-          return {\r\n-            email: credentials?.email,\r\n-            id: decodedToken.id,\r\n-            role: decodedToken.role,\r\n-            name: decodedToken.name,\r\n-            profileImg: decodedToken.profileImg,\r\n-            verified: decodedToken.verified,\r\n-            code: decodedToken.code,\r\n-            accessToken,\r\n-            refreshToken, // Store refresh token\r\n-            accessTokenExpires: Date.now() + 15 * 60 * 1000, // 15 min expiry\r\n-          };\r\n+            return {\r\n+              email: credentials?.email,\r\n+              id: decodedToken.id,\r\n+              role: decodedToken.role,\r\n+              name: decodedToken.name,\r\n+              profileImg: decodedToken.profileImg,\r\n+              verified: decodedToken.verified,\r\n+              expires: decodedToken.expires,\r\n+              code:decodedToken.code,\r\n+              accessToken,\r\n+            };\r\n+          }\r\n+          return null; // Return null if no token is found\r\n         } catch (error: any) {\r\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n-          throw new Error(error.response?.data?.message || \"Login failed\");\r\n+\r\n+          if (error.response) {\r\n+            const { status, data } = error.response;\r\n+            if (status !== 200) throw new Error(data.message);\r\n+            if (status === 403)\r\n+              throw new Error(data?.message || \"Access forbidden.\");\r\n+            throw new Error(data?.message || \"An unexpected error occurred.\");\r\n+          }\r\n+\r\n+          throw new Error(\"Unable to connect to the server.\");\r\n         }\r\n       },\r\n     }),\r\n   ],\r\n   callbacks: {\r\n-    async jwt({ token, user }) {\r\n-      // On login, store tokens\r\n+    async jwt({ token, user }: { token: JWT; user: any }) {\r\n       if (user) {\r\n-        return {\r\n-          ...token,\r\n-          id: user.id,\r\n-          role: user.role,\r\n-          name: user.name,\r\n-          image: user.profileImg?.url,\r\n-          verified: user.verified,\r\n-          code: user.code,\r\n-          accessToken: user.accessToken,\r\n-          refreshToken: user.refreshToken,\r\n-          accessTokenExpires: user.accessTokenExpires,\r\n-        };\r\n+        token.id = user.id;\r\n+        token.role = user.role;\r\n+        token.name = user.name;\r\n+        token.token = user.token;\r\n+        token.profileImg = user.profileImg.url;\r\n+        token.verified = user.verified;\r\n+        token.code = user.code\r\n       }\r\n \r\n-      // If access token is expired, refresh it\r\n-      if (Date.now() > (token.accessTokenExpires as number)) {\r\n-        console.log(\"Access token expired, refreshing...\");\r\n-        return await refreshAccessToken(token);\r\n-      }\r\n-\r\n       return token;\r\n     },\r\n-\r\n     async session({ session, token }) {\r\n+      // const response = await fetch(`http://localhost:8080/api/auth/${token.id}`)\r\n+      // const data = await response.json() \r\n+      // const user = data.existingUser as UserInformation\r\n       if (token) {\r\n         session.user = {\r\n           ...session.user,\r\n           id: token.id,\r\n           role: token.role,\r\n-          image: token.profileImg as string,\r\n+          image: token?.profileImg  as string,\r\n           name: token.name,\r\n           verified: token.verified,\r\n-          code: token.code,\r\n+          code:token.code\r\n         };\r\n-        session.accessToken = token.accessToken;\r\n-        session.error = token.error;\r\n       }\r\n+      console.log(session)\r\n       return session;\r\n     },\r\n   },\r\n   secret: process.env.NEXTAUTH_SECRET,\r\n-  pages: {\r\n-    signIn: \"/login\",\r\n-  },\r\n };\r\n \r\n const handler = NextAuth(authOptions);\r\n \r\n+// Correctly export as HTTP methods\r\n export { handler as GET, handler as POST };\r\n"
                },
                {
                    "date": 1739988033157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,34 @@\n import axios from \"axios\";\r\n import jwt, { JwtPayload } from \"jsonwebtoken\";\r\n import { JWT } from \"next-auth/jwt\";\r\n \r\n+const API_URL = \"http://localhost:8080/api/auth\";\r\n \r\n+const refreshAccessToken = async (token: JWT) => {\r\n+  try {\r\n+    const response = await axios.post(`${API_URL}/refresh`, {\r\n+      refreshToken: token.refreshToken, // Send refresh token\r\n+    });\r\n \r\n+    const { accessToken } = response.data;\r\n+\r\n+    if (!accessToken) throw new Error(\"Failed to refresh token\");\r\n+\r\n+    const decodedToken = jwt.decode(accessToken) as JwtPayload;\r\n+\r\n+    return {\r\n+      ...token,\r\n+      accessToken,\r\n+      accessTokenExpires: Date.now() + 15 * 60 * 1000, // 15 min expiry\r\n+    };\r\n+  } catch (error) {\r\n+    console.error(\"Error refreshing token:\", error);\r\n+    return { ...token, error: \"RefreshTokenError\" };\r\n+  }\r\n+};\r\n+\r\n const authOptions: AuthOptions = {\r\n-\r\n   providers: [\r\n     CredentialsProvider({\r\n       name: \"Credentials\",\r\n       credentials: {\r\n@@ -16,89 +38,87 @@\n         password: { label: \"Password\", type: \"password\" },\r\n       },\r\n       authorize: async (credentials) => {\r\n         try {\r\n-          const response = await axios.post(\r\n-            \"http://localhost:8080/api/auth/login\",\r\n-            {\r\n-              email: credentials?.email,\r\n-              password: credentials?.password,\r\n-            }\r\n-          );\r\n+          const response = await axios.post(`${API_URL}/login`, {\r\n+            email: credentials?.email,\r\n+            password: credentials?.password,\r\n+          });\r\n \r\n-          const { accessToken } = response.data;\r\n+          const { accessToken, refreshToken } = response.data;\r\n \r\n-          if (accessToken) {\r\n-            // Decode the JWT token\r\n-            const decodedToken = jwt.decode(accessToken) as JwtPayload;\r\n+          if (!accessToken || !refreshToken) return null;\r\n \r\n-            // Return the user object\r\n+          const decodedToken = jwt.decode(accessToken) as JwtPayload;\r\n \r\n-            return {\r\n-              email: credentials?.email,\r\n-              id: decodedToken.id,\r\n-              role: decodedToken.role,\r\n-              name: decodedToken.name,\r\n-              profileImg: decodedToken.profileImg,\r\n-              verified: decodedToken.verified,\r\n-              expires: decodedToken.expires,\r\n-              code:decodedToken.code,\r\n-              accessToken,\r\n-            };\r\n-          }\r\n-          return null; // Return null if no token is found\r\n+          return {\r\n+            email: credentials?.email,\r\n+            id: decodedToken.id,\r\n+            role: decodedToken.role,\r\n+            name: decodedToken.name,\r\n+            profileImg: decodedToken.profileImg,\r\n+            verified: decodedToken.verified,\r\n+            code: decodedToken.code,\r\n+            accessToken,\r\n+            refreshToken, // Store refresh token\r\n+            accessTokenExpires: Date.now() + 15 * 60 * 1000, // 15 min expiry\r\n+          };\r\n         } catch (error: any) {\r\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n-\r\n-          if (error.response) {\r\n-            const { status, data } = error.response;\r\n-            if (status !== 200) throw new Error(data.message);\r\n-            if (status === 403)\r\n-              throw new Error(data?.message || \"Access forbidden.\");\r\n-            throw new Error(data?.message || \"An unexpected error occurred.\");\r\n-          }\r\n-\r\n-          throw new Error(\"Unable to connect to the server.\");\r\n+          throw new Error(error.response?.data?.message || \"Login failed\");\r\n         }\r\n       },\r\n     }),\r\n   ],\r\n   callbacks: {\r\n-    async jwt({ token, user }: { token: JWT; user: any }) {\r\n+    async jwt({ token, user }) {\r\n+      // On login, store tokens\r\n       if (user) {\r\n-        token.id = user.id;\r\n-        token.role = user.role;\r\n-        token.name = user.name;\r\n-        token.token = user.token;\r\n-        token.profileImg = user.profileImg.url;\r\n-        token.verified = user.verified;\r\n-        token.code = user.code\r\n+        return {\r\n+          ...token,\r\n+          id: user.id,\r\n+          role: user.role,\r\n+          name: user.name,\r\n+          profileImg: user.profileImg?.url,\r\n+          verified: user.verified,\r\n+          code: user.code,\r\n+          accessToken: user.accessToken,\r\n+          refreshToken: user.refreshToken,\r\n+          accessTokenExpires: user.accessTokenExpires,\r\n+        };\r\n       }\r\n \r\n+      // If access token is expired, refresh it\r\n+      if (Date.now() > (token.accessTokenExpires as number)) {\r\n+        console.log(\"Access token expired, refreshing...\");\r\n+        return await refreshAccessToken(token);\r\n+      }\r\n+\r\n       return token;\r\n     },\r\n+\r\n     async session({ session, token }) {\r\n-      // const response = await fetch(`http://localhost:8080/api/auth/${token.id}`)\r\n-      // const data = await response.json() \r\n-      // const user = data.existingUser as UserInformation\r\n       if (token) {\r\n         session.user = {\r\n           ...session.user,\r\n           id: token.id,\r\n           role: token.role,\r\n-          image: token?.profileImg  as string,\r\n+          image: token.profileImg as string,\r\n           name: token.name,\r\n           verified: token.verified,\r\n-          code:token.code\r\n+          code: token.code,\r\n         };\r\n+        session.accessToken = token.accessToken;\r\n+        session.error = token.error;\r\n       }\r\n-      console.log(session)\r\n       return session;\r\n     },\r\n   },\r\n   secret: process.env.NEXTAUTH_SECRET,\r\n+  pages: {\r\n+    signIn: \"/login\",\r\n+  },\r\n };\r\n \r\n const handler = NextAuth(authOptions);\r\n \r\n-// Correctly export as HTTP methods\r\n export { handler as GET, handler as POST };\r\n"
                },
                {
                    "date": 1739988041459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,34 +3,12 @@\n import axios from \"axios\";\r\n import jwt, { JwtPayload } from \"jsonwebtoken\";\r\n import { JWT } from \"next-auth/jwt\";\r\n \r\n-const API_URL = \"http://localhost:8080/api/auth\";\r\n \r\n-const refreshAccessToken = async (token: JWT) => {\r\n-  try {\r\n-    const response = await axios.post(`${API_URL}/refresh`, {\r\n-      refreshToken: token.refreshToken, // Send refresh token\r\n-    });\r\n \r\n-    const { accessToken } = response.data;\r\n+const authOptions: AuthOptions = {\r\n \r\n-    if (!accessToken) throw new Error(\"Failed to refresh token\");\r\n-\r\n-    const decodedToken = jwt.decode(accessToken) as JwtPayload;\r\n-\r\n-    return {\r\n-      ...token,\r\n-      accessToken,\r\n-      accessTokenExpires: Date.now() + 15 * 60 * 1000, // 15 min expiry\r\n-    };\r\n-  } catch (error) {\r\n-    console.error(\"Error refreshing token:\", error);\r\n-    return { ...token, error: \"RefreshTokenError\" };\r\n-  }\r\n-};\r\n-\r\n-const authOptions: AuthOptions = {\r\n   providers: [\r\n     CredentialsProvider({\r\n       name: \"Credentials\",\r\n       credentials: {\r\n@@ -38,87 +16,89 @@\n         password: { label: \"Password\", type: \"password\" },\r\n       },\r\n       authorize: async (credentials) => {\r\n         try {\r\n-          const response = await axios.post(`${API_URL}/login`, {\r\n-            email: credentials?.email,\r\n-            password: credentials?.password,\r\n-          });\r\n+          const response = await axios.post(\r\n+            \"http://localhost:8080/api/auth/login\",\r\n+            {\r\n+              email: credentials?.email,\r\n+              password: credentials?.password,\r\n+            }\r\n+          );\r\n \r\n-          const { accessToken, refreshToken } = response.data;\r\n+          const { accessToken } = response.data;\r\n \r\n-          if (!accessToken || !refreshToken) return null;\r\n+          if (accessToken) {\r\n+            // Decode the JWT token\r\n+            const decodedToken = jwt.decode(accessToken) as JwtPayload;\r\n \r\n-          const decodedToken = jwt.decode(accessToken) as JwtPayload;\r\n+            // Return the user object\r\n \r\n-          return {\r\n-            email: credentials?.email,\r\n-            id: decodedToken.id,\r\n-            role: decodedToken.role,\r\n-            name: decodedToken.name,\r\n-            profileImg: decodedToken.profileImg,\r\n-            verified: decodedToken.verified,\r\n-            code: decodedToken.code,\r\n-            accessToken,\r\n-            refreshToken, // Store refresh token\r\n-            accessTokenExpires: Date.now() + 15 * 60 * 1000, // 15 min expiry\r\n-          };\r\n+            return {\r\n+              email: credentials?.email,\r\n+              id: decodedToken.id,\r\n+              role: decodedToken.role,\r\n+              name: decodedToken.name,\r\n+              profileImg: decodedToken.profileImg,\r\n+              verified: decodedToken.verified,\r\n+              expires: decodedToken.expires,\r\n+              code:decodedToken.code,\r\n+              accessToken,\r\n+            };\r\n+          }\r\n+          return null; // Return null if no token is found\r\n         } catch (error: any) {\r\n           console.error(\"Login Error:\", error.response?.data || error.message);\r\n-          throw new Error(error.response?.data?.message || \"Login failed\");\r\n+\r\n+          if (error.response) {\r\n+            const { status, data } = error.response;\r\n+            if (status !== 200) throw new Error(data.message);\r\n+            if (status === 403)\r\n+              throw new Error(data?.message || \"Access forbidden.\");\r\n+            throw new Error(data?.message || \"An unexpected error occurred.\");\r\n+          }\r\n+\r\n+          throw new Error(\"Unable to connect to the server.\");\r\n         }\r\n       },\r\n     }),\r\n   ],\r\n   callbacks: {\r\n-    async jwt({ token, user }) {\r\n-      // On login, store tokens\r\n+    async jwt({ token, user }: { token: JWT; user: any }) {\r\n       if (user) {\r\n-        return {\r\n-          ...token,\r\n-          id: user.id,\r\n-          role: user.role,\r\n-          name: user.name,\r\n-          profileImg: user.profileImg?.url,\r\n-          verified: user.verified,\r\n-          code: user.code,\r\n-          accessToken: user.accessToken,\r\n-          refreshToken: user.refreshToken,\r\n-          accessTokenExpires: user.accessTokenExpires,\r\n-        };\r\n+        token.id = user.id;\r\n+        token.role = user.role;\r\n+        token.name = user.name;\r\n+        token.token = user.token;\r\n+        token.profileImg = user.profileImg.url;\r\n+        token.verified = user.verified;\r\n+        token.code = user.code\r\n       }\r\n \r\n-      // If access token is expired, refresh it\r\n-      if (Date.now() > (token.accessTokenExpires as number)) {\r\n-        console.log(\"Access token expired, refreshing...\");\r\n-        return await refreshAccessToken(token);\r\n-      }\r\n-\r\n       return token;\r\n     },\r\n-\r\n     async session({ session, token }) {\r\n+      // const response = await fetch(`http://localhost:8080/api/auth/${token.id}`)\r\n+      // const data = await response.json() \r\n+      // const user = data.existingUser as UserInformation\r\n       if (token) {\r\n         session.user = {\r\n           ...session.user,\r\n           id: token.id,\r\n           role: token.role,\r\n-          image: token.profileImg as string,\r\n+          image: token?.profileImg  as string,\r\n           name: token.name,\r\n           verified: token.verified,\r\n-          code: token.code,\r\n+          code:token.code\r\n         };\r\n-        session.accessToken = token.accessToken;\r\n-        session.error = token.error;\r\n       }\r\n+      console.log(session)\r\n       return session;\r\n     },\r\n   },\r\n   secret: process.env.NEXTAUTH_SECRET,\r\n-  pages: {\r\n-    signIn: \"/login\",\r\n-  },\r\n };\r\n \r\n const handler = NextAuth(authOptions);\r\n \r\n+// Correctly export as HTTP methods\r\n export { handler as GET, handler as POST };\r\n"
                },
                {
                    "date": 1739988047957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,11 +76,9 @@\n \r\n       return token;\r\n     },\r\n     async session({ session, token }) {\r\n-      // const response = await fetch(`http://localhost:8080/api/auth/${token.id}`)\r\n-      // const data = await response.json() \r\n-      // const user = data.existingUser as UserInformation\r\n+    \r\n       if (token) {\r\n         session.user = {\r\n           ...session.user,\r\n           id: token.id,\r\n"
                },
                {
                    "date": 1739988186447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,9 @@\n         token.token = user.token;\r\n         token.profileImg = user.profileImg.url;\r\n         token.verified = user.verified;\r\n         token.code = user.code\r\n+        token.accessToken = acessToke\r\n       }\r\n \r\n       return token;\r\n     },\r\n"
                },
                {
                    "date": 1739988204427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n         token.profileImg = user.profileImg.url;\r\n         token.verified = user.verified;\r\n         token.code = user.code\r\n         token.accessToken = user.accessToken,\r\n-        token.refresh\r\n+        token.refreshT\r\n       }\r\n \r\n       return token;\r\n     },\r\n"
                },
                {
                    "date": 1739988579714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n           verified: token.verified,\r\n           code:token.code,\r\n           accessToken:token.accessToken\r\n         };\r\n-        session.expires: token.\r\n+        session.expires: token.a\r\n       }\r\n       console.log(session)\r\n       return session;\r\n     },\r\n"
                }
            ],
            "date": 1739030240877,
            "name": "Commit-0",
            "content": "import NextAuth, { AuthOptions } from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport axios from \"axios\";\r\nimport jwt, { JwtPayload } from \"jsonwebtoken\";\r\nimport { JWT } from \"next-auth/jwt\";\r\nimport { cookies } from \"next/headers\";\r\nimport { UserInformation } from \"@/types\";\r\n\r\nconst authOptions: AuthOptions = {\r\n\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"text\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      authorize: async (credentials) => {\r\n        try {\r\n          const response = await axios.post(\r\n            \"http://localhost:8080/api/auth/login\",\r\n            {\r\n              email: credentials?.email,\r\n              password: credentials?.password,\r\n            }\r\n          );\r\n\r\n          const { token } = response.data;\r\n\r\n          if (token) {\r\n            // Decode the JWT token\r\n            const decodedToken = jwt.decode(token) as JwtPayload;\r\n\r\n            // Return the user object\r\n\r\n            return {\r\n              email: credentials?.email,\r\n              id: decodedToken.id,\r\n              role: decodedToken.role,\r\n              name: decodedToken.name,\r\n              profileImg: decodedToken.profileImg,\r\n              verified: decodedToken.verified,\r\n              expires: decodedToken.expires,\r\n              code:decodedToken.code,\r\n              token,\r\n            };\r\n          }\r\n          return null; // Return null if no token is found\r\n        } catch (error: any) {\r\n          console.error(\"Login Error:\", error.response?.data || error.message);\r\n\r\n          if (error.response) {\r\n            const { status, data } = error.response;\r\n            if (status === 401) throw new Error(\"Invalid email or password.\");\r\n            if (status === 403)\r\n              throw new Error(data?.msg || \"Access forbidden.\");\r\n            throw new Error(data?.msg || \"An unexpected error occurred.\");\r\n          }\r\n\r\n          throw new Error(\"Unable to connect to the server.\");\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }: { token: JWT; user: any }) {\r\n      if (user) {\r\n        token.id = user.id;\r\n        token.role = user.role;\r\n        token.name = user.name;\r\n        token.token = user.token;\r\n        token.profileImg = user.profileImg;\r\n        token.verified = user.verified;\r\n        token.code = user.code\r\n      }\r\n\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      // const response = await fetch(`http://localhost:8080/api/auth/${token.id}`)\r\n      // const data = await response.json() \r\n      // const user = data.existingUser as UserInformation\r\n      if (token) {\r\n        session.user = {\r\n          ...session.user,\r\n          id: token.id,\r\n          role: token.role,\r\n          image: token.profileImg as string,\r\n          name: token.name,\r\n          verified: token.verified,\r\n          code:token.code\r\n        };\r\n      }\r\n      console.log(session);\r\n      return session;\r\n    },\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\n\r\n// Correctly export as HTTP methods\r\nexport { handler as GET, handler as POST };\r\n"
        }
    ]
}