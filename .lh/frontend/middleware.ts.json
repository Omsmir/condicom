{
    "sourceFile": "frontend/middleware.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1739231739591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739289839225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { getUser } from \"./actions/User\";\r\n export const middleware = async (req: NextRequest) => {\r\n   const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });\r\n   const { pathname } = req.nextUrl;\r\n-  co\r\n+  const\r\n \r\n const PrivateRoutes = [\"/dashboard/create\",\"/dashboard/doctors\"]\r\n   \r\n   if (token) {\r\n"
                },
                {
                    "date": 1739464603383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   return NextResponse.next();\r\n };\r\n \r\n export const config = {\r\n-  runtime:,\r\n+  runtime:n,\r\n   matcher: [\r\n     \"/dashboard/:path*\",\r\n     \"/\",\r\n     \"/reset/:path*\",\r\n"
                }
            ],
            "date": 1739231739591,
            "name": "Commit-0",
            "content": "import { getToken } from \"next-auth/jwt\";\r\nimport { NextResponse, NextRequest } from \"next/server\";\r\nimport { getUser } from \"./actions/User\";\r\nexport const middleware = async (req: NextRequest) => {\r\n  const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });\r\n  const { pathname } = req.nextUrl;\r\n\r\nconst PrivateRoutes = [\"/dashboard/create\",\"/dashboard/doctors\"]\r\n  \r\n  if (token) {\r\n    const user = await getUser(token?.id);\r\n\r\n   if(user){\r\n    if (pathname.startsWith(\"/dashboard\") && !user.profileState) {\r\n      return NextResponse.redirect(new URL(\"/register/profile\", req.url));\r\n    }\r\n\r\n    if (pathname === \"/register/profile\" && user.profileState) {\r\n      return NextResponse.redirect(new URL(\"/dashboard\", req.url));\r\n    }\r\n\r\n   }\r\n    if (PrivateRoutes.includes(pathname) && token?.role !== \"Admin\") {\r\n      return NextResponse.redirect(new URL(\"/dashboard\", req.url));\r\n    }\r\n    const publicPaths = [\"/\", \"/reset\", \"/register\"];\r\n    if (publicPaths.includes(pathname)) {\r\n      return NextResponse.redirect(new URL(\"/dashboard\", req.url));\r\n    }\r\n  } else {\r\n    if (pathname.startsWith(\"/dashboard\")) {\r\n      return NextResponse.redirect(new URL(\"/\", req.url));\r\n    }\r\n\r\n    if (pathname === \"/register/profile\") {\r\n      return NextResponse.redirect(new URL(\"/register\", req.url));\r\n    }\r\n  }\r\n\r\n  return NextResponse.next();\r\n};\r\n\r\nexport const config = {\r\n  matcher: [\r\n    \"/dashboard/:path*\",\r\n    \"/\",\r\n    \"/reset/:path*\",\r\n    \"/register/:path*\",\r\n    \"/dashboard/create:path*\",\r\n    \"/dashboard/doctors:path*\",\r\n    \"/register/profile:path*\",\r\n  ],\r\n};\r\n"
        }
    ]
}