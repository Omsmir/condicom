{
    "sourceFile": "frontend/lib/vaildation.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1738505821070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738506776078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,5 +127,20 @@\n   height: z.string().optional(),\r\n   email: z.string().email().optional(),\r\n   address: z.string().optional(),\r\n   country: z.object({ label: z.string({ message: \"Please select a country\" }) }, { message: \"Please select a country\" }),\r\n+  email: z.string().email(),\r\n+  emergencyContactPerson: z.string().optional(),\r\n+  emergencyContactRelationship: z.string().optional(),\r\n+  emergencyContactNumber: z.string().optional(),\r\n+  residentialAddress: z.string().optional(),\r\n+  insuranceProvider: z.string().optional(),\r\n+  medicalConditions: z.array(z.string()).optional(),\r\n+  allergies: z.array(z.string()).optional(),\r\n+  pastSurgeries: z.array(z.string()).optional(),\r\n+  familyMedicalHistory: z.array(z.string()).optional(),\r\n+  currentMedications: z.array(z.string()).optional(),\r\n+  smoking: z.boolean().optional(),\r\n+  smokingFrequency: z.string().optional(),\r\n+  alcohol: z.boolean().optional(),\r\n+  alcoholFrequency: z.string().optional(),\r\n });\r\n"
                },
                {
                    "date": 1738506781552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,8 @@\n   height: z.string().optional(),\r\n   email: z.string().email().optional(),\r\n   address: z.string().optional(),\r\n   country: z.object({ label: z.string({ message: \"Please select a country\" }) }, { message: \"Please select a country\" }),\r\n-  email: z.string().email(),\r\n   emergencyContactPerson: z.string().optional(),\r\n   emergencyContactRelationship: z.string().optional(),\r\n   emergencyContactNumber: z.string().optional(),\r\n   residentialAddress: z.string().optional(),\r\n"
                },
                {
                    "date": 1738506799713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n   emergencyContactRelationship: z.string().optional(),\r\n   emergencyContactNumber: z.string().optional(),\r\n   residentialAddress: z.string().optional(),\r\n   insuranceProvider: z.string().optional(),\r\n-  medicalConditions: z.array(z.string()).optional(),\r\n+  medicalConditions: z.string().optional(),\r\n   allergies: z.array(z.string()).optional(),\r\n   pastSurgeries: z.array(z.string()).optional(),\r\n   familyMedicalHistory: z.array(z.string()).optional(),\r\n   currentMedications: z.array(z.string()).optional(),\r\n"
                },
                {
                    "date": 1738506807708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,10 +133,10 @@\n   emergencyContactNumber: z.string().optional(),\r\n   residentialAddress: z.string().optional(),\r\n   insuranceProvider: z.string().optional(),\r\n   medicalConditions: z.string().optional(),\r\n-  allergies: z.array(z.string()).optional(),\r\n-  pastSurgeries: z.array(z.string()).optional(),\r\n+  allergies: z.string().optional(),\r\n+  pastSurgeries: z.array(z.string().optional(),\r\n   familyMedicalHistory: z.array(z.string()).optional(),\r\n   currentMedications: z.array(z.string()).optional(),\r\n   smoking: z.boolean().optional(),\r\n   smokingFrequency: z.string().optional(),\r\n"
                },
                {
                    "date": 1738506815541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,10 +134,10 @@\n   residentialAddress: z.string().optional(),\r\n   insuranceProvider: z.string().optional(),\r\n   medicalConditions: z.string().optional(),\r\n   allergies: z.string().optional(),\r\n-  pastSurgeries: z.array(z.string().optional(),\r\n-  familyMedicalHistory: z.array(z.string()).optional(),\r\n+  pastSurgeries: z.string().optional(),\r\n+  familyMedicalHistory: z.string().optional(),\r\n   currentMedications: z.array(z.string()).optional(),\r\n   smoking: z.boolean().optional(),\r\n   smokingFrequency: z.string().optional(),\r\n   alcohol: z.boolean().optional(),\r\n"
                },
                {
                    "date": 1738506831314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n   allergies: z.string().optional(),\r\n   pastSurgeries: z.string().optional(),\r\n   familyMedicalHistory: z.string().optional(),\r\n   currentMedications: z.z.string().optional(),\r\n-  smoking: z.string({message:\"please \"}),\r\n+  smoking: z.string({message:\"please s\"}),\r\n   smokingFrequency: z.string().optional(),\r\n   alcohol: z.boolean().optional(),\r\n   alcoholFrequency: z.string().optional(),\r\n });\r\n"
                },
                {
                    "date": 1738506918396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+import { z } from \"zod\";\r\n+\r\n+import * as Yup from \"yup\";\r\n+\r\n+export const formSchema = z.object({\r\n+  name: z.string().min(2, {\r\n+    message: \"product name must be at least 2 characters.\",\r\n+  }),\r\n+  price: z.coerce\r\n+    .number()\r\n+    .min(1, \"minimum pirce is 1$\")\r\n+    .max(999, \"maximum price is 999$\"),\r\n+  description: z\r\n+    .string()\r\n+    .min(10, \"Please provide more details\")\r\n+    .max(500, \"The details provided is too much\"),\r\n+  image: z.custom<File[]>((file) => file, {\r\n+    message: \"please select an image\",\r\n+  }),\r\n+});\r\n+\r\n+export const formSchemaEdit = z.object({\r\n+  name: z.string().min(2, {\r\n+    message: \"product name must be at least 2 characters.\",\r\n+  }),\r\n+  price: z.coerce\r\n+    .number()\r\n+    .min(1, \"minimum pirce is 1$\")\r\n+    .max(999, \"maximum price is 999$\"),\r\n+  description: z\r\n+    .string()\r\n+    .min(10, \"Please provide more details\")\r\n+    .max(500, \"The details provided is too much\"),\r\n+  image: z.custom<File[]>().optional(),\r\n+});\r\n+\r\n+export const userSchema = z.object({\r\n+  email: z\r\n+    .string()\r\n+    .min(1, \"email is required\")\r\n+    .email({ message: \"invaild email address\" }),\r\n+  password: z.string().min(6, \"please enter password\"),\r\n+});\r\n+\r\n+export const RegisterSchema = Yup.object({\r\n+  name: Yup.string().min(2, \"username must be at least 2 characters.\").required(\"username is required\"),\r\n+  email: Yup.string()\r\n+    .min(1, \"email is required\")\r\n+    .email(\"Invalid email address.\"),\r\n+  password: Yup.string().min(6, \"Password must be at least 6 characters.\"),\r\n+  confirmPassword: Yup.string()\r\n+    .min(1, \"Passwords must match.\")\r\n+    .oneOf([Yup.ref(\"password\"), \"\"], \"Passwords must match.\"),\r\n+  phone: Yup.string().min(10, \"Phone number is required.\").required(\"please enter your phone\"),\r\n+  gender: Yup.string()\r\n+    .default(\"male\")\r\n+    .oneOf([\"Male\", \"Female\", \"Transgender\"], \"please select a gender\"),\r\n+    birthDate: Yup.string()\r\n+    .test(\r\n+      \"valid-date\",\r\n+      \"Invalid date\",\r\n+      (value: any) => value && !isNaN(Date.parse(value))\r\n+    )\r\n+    .test(\r\n+      \"logical-date\",\r\n+      \"Date must be in the past\",\r\n+      (value:any) => value && new Date(value).getTime() < Date.now()\r\n+    )\r\n+    .required(\"BirthDate is required\"),\r\n+\r\n+  code: Yup.string().required(\"Support a code\").matches(/B(1|2)[0-5](C|D|E)[0-9]{5}/g,\"Code is Invaild\"),\r\n+});\r\n+\r\n+const validImageExtensions = [\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"webp\"];\r\n+\r\n+export const PostRegisterSchema = z.object({\r\n+  profileImg: z.custom<File[]>((files) => {\r\n+   return files && files.length > 0\r\n+    \r\n+  }, {\r\n+    message: \"Please select an Image\",\r\n+  }).refine((files) =>{\r\n+    if (!Array.isArray(files) || files.length === 0) {\r\n+      return false;\r\n+    }\r\n+    return files.every((file) => {\r\n+      const fileName = file.name.toLowerCase();\r\n+      const extension = fileName.split(\".\").pop();\r\n+      return validImageExtensions.includes(extension || \"\");\r\n+    });\r\n+  },{message: \"please select a valid image \"}),\r\n+  weight: z.string({message: \"Please Select Weight\"}),\r\n+  height: z.string({message: \"Please Select Height\"}),\r\n+  address: z.string().optional(),\r\n+  bio:z.string().min(30,\"Bio Must Exceed 30 characters\").max(350,\"Bio Can't Be More Than 350 characters\").optional(),\r\n+  occupation: z.string({message: \"Please Select Occupation\"}),\r\n+  country: z.object({label: z.string({message: \"Please Select\"})},{message: \"Please Select a Country\"})\r\n+\r\n+})\r\n+\r\n+export const AppointmentSchema = z.object({\r\n+  Task:z.string({message:\"Please Provide a Task\"}).min(2,\"min characters is 2\").max(40,\"max length is 20 characters\"),\r\n+  description:z.string().max(80,\"max length is 80 characters\").optional(),\r\n+  startDate: z.date({ message: \"please support a start date\" }), // Validates ISO 8601 datetime\r\n+  endDate: z.date({ message: \"please support an end time\" }),\r\n+  color: z.custom()\r\n+  \r\n+})\r\n+\r\n+export const patientSchema = z.object({\r\n+  firstName: z.string({ message: \"First name is required\" }).min(2, { message: \"Minimum characters is 2\" }),\r\n+  lastName: z.string({ message: \"Last name is required\" }).min(2, { message: \"Minimum characters is 2\" }),\r\n+  birthDate: z.date({ message: \"Please select a date\" }).refine((date) => date < new Date(), { message: \"Date must be in past\" }),\r\n+  profileImg: z\r\n+    .custom<File[]>((files) => files && files.length > 0, { message: \"Please select an image\" })\r\n+    .refine(\r\n+      (files) =>\r\n+        files.every((file) => {\r\n+          const fileName = file.name.toLowerCase();\r\n+          const extension = fileName.split(\".\").pop();\r\n+          return validImageExtensions.includes(extension || \"\");\r\n+        }),\r\n+      { message: \"Invalid image extension\" }\r\n+    ),\r\n+  phone: z.string({ message: \"Phone number is required\" }).refine((phone) => /^\\+\\d{10,15}$/.test(phone), \"Invalid phone number\"),\r\n+  weight: z.string().optional(),\r\n+  height: z.string().optional(),\r\n+  email: z.string().email().optional(),\r\n+  address: z.string().optional(),\r\n+  country: z.object({ label: z.string({ message: \"Please select a country\" }) }, { message: \"Please select a country\" }),\r\n+  emergencyContactPerson: z.string().optional(),\r\n+  emergencyContactRelationship: z.string().optional(),\r\n+  emergencyContactNumber: z.string().optional(),\r\n+  residentialAddress: z.string().optional(),\r\n+  insuranceProvider: z.string().optional(),\r\n+  medicalConditions: z.string({message:\"please select a medical consiti\"}),\r\n+  allergies: z.string({message:\"please select\"}),\r\n+  pastSurgeries: z.string().optional(),\r\n+  familyMedicalHistory: z.string().optional(),\r\n+  currentMedications: z.string().optional(),\r\n+  smoking: z.string({message:\"please select if you smoke\"}),\r\n+  smokingFrequency: z.string().optional(),\r\n+  alcohol:z.string({message:\"please select if you consume alcohol\"}),\r\n+  alcoholFrequency: z.string().optional(),\r\n+});\r\n"
                }
            ],
            "date": 1738505821070,
            "name": "Commit-0",
            "content": "import { z } from \"zod\";\r\n\r\nimport * as Yup from \"yup\";\r\n\r\nexport const formSchema = z.object({\r\n  name: z.string().min(2, {\r\n    message: \"product name must be at least 2 characters.\",\r\n  }),\r\n  price: z.coerce\r\n    .number()\r\n    .min(1, \"minimum pirce is 1$\")\r\n    .max(999, \"maximum price is 999$\"),\r\n  description: z\r\n    .string()\r\n    .min(10, \"Please provide more details\")\r\n    .max(500, \"The details provided is too much\"),\r\n  image: z.custom<File[]>((file) => file, {\r\n    message: \"please select an image\",\r\n  }),\r\n});\r\n\r\nexport const formSchemaEdit = z.object({\r\n  name: z.string().min(2, {\r\n    message: \"product name must be at least 2 characters.\",\r\n  }),\r\n  price: z.coerce\r\n    .number()\r\n    .min(1, \"minimum pirce is 1$\")\r\n    .max(999, \"maximum price is 999$\"),\r\n  description: z\r\n    .string()\r\n    .min(10, \"Please provide more details\")\r\n    .max(500, \"The details provided is too much\"),\r\n  image: z.custom<File[]>().optional(),\r\n});\r\n\r\nexport const userSchema = z.object({\r\n  email: z\r\n    .string()\r\n    .min(1, \"email is required\")\r\n    .email({ message: \"invaild email address\" }),\r\n  password: z.string().min(6, \"please enter password\"),\r\n});\r\n\r\nexport const RegisterSchema = Yup.object({\r\n  name: Yup.string().min(2, \"username must be at least 2 characters.\").required(\"username is required\"),\r\n  email: Yup.string()\r\n    .min(1, \"email is required\")\r\n    .email(\"Invalid email address.\"),\r\n  password: Yup.string().min(6, \"Password must be at least 6 characters.\"),\r\n  confirmPassword: Yup.string()\r\n    .min(1, \"Passwords must match.\")\r\n    .oneOf([Yup.ref(\"password\"), \"\"], \"Passwords must match.\"),\r\n  phone: Yup.string().min(10, \"Phone number is required.\").required(\"please enter your phone\"),\r\n  gender: Yup.string()\r\n    .default(\"male\")\r\n    .oneOf([\"Male\", \"Female\", \"Transgender\"], \"please select a gender\"),\r\n    birthDate: Yup.string()\r\n    .test(\r\n      \"valid-date\",\r\n      \"Invalid date\",\r\n      (value: any) => value && !isNaN(Date.parse(value))\r\n    )\r\n    .test(\r\n      \"logical-date\",\r\n      \"Date must be in the past\",\r\n      (value:any) => value && new Date(value).getTime() < Date.now()\r\n    )\r\n    .required(\"BirthDate is required\"),\r\n\r\n  code: Yup.string().required(\"Support a code\").matches(/B(1|2)[0-5](C|D|E)[0-9]{5}/g,\"Code is Invaild\"),\r\n});\r\n\r\nconst validImageExtensions = [\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"webp\"];\r\n\r\nexport const PostRegisterSchema = z.object({\r\n  profileImg: z.custom<File[]>((files) => {\r\n   return files && files.length > 0\r\n    \r\n  }, {\r\n    message: \"Please select an Image\",\r\n  }).refine((files) =>{\r\n    if (!Array.isArray(files) || files.length === 0) {\r\n      return false;\r\n    }\r\n    return files.every((file) => {\r\n      const fileName = file.name.toLowerCase();\r\n      const extension = fileName.split(\".\").pop();\r\n      return validImageExtensions.includes(extension || \"\");\r\n    });\r\n  },{message: \"please select a valid image \"}),\r\n  weight: z.string({message: \"Please Select Weight\"}),\r\n  height: z.string({message: \"Please Select Height\"}),\r\n  address: z.string().optional(),\r\n  bio:z.string().min(30,\"Bio Must Exceed 30 characters\").max(350,\"Bio Can't Be More Than 350 characters\").optional(),\r\n  occupation: z.string({message: \"Please Select Occupation\"}),\r\n  country: z.object({label: z.string({message: \"Please Select\"})},{message: \"Please Select a Country\"})\r\n\r\n})\r\n\r\nexport const AppointmentSchema = z.object({\r\n  Task:z.string({message:\"Please Provide a Task\"}).min(2,\"min characters is 2\").max(40,\"max length is 20 characters\"),\r\n  description:z.string().max(80,\"max length is 80 characters\").optional(),\r\n  startDate: z.date({ message: \"please support a start date\" }), // Validates ISO 8601 datetime\r\n  endDate: z.date({ message: \"please support an end time\" }),\r\n  color: z.custom()\r\n  \r\n})\r\n\r\nexport const patientSchema = z.object({\r\n  firstName: z.string({ message: \"First name is required\" }).min(2, { message: \"Minimum characters is 2\" }),\r\n  lastName: z.string({ message: \"Last name is required\" }).min(2, { message: \"Minimum characters is 2\" }),\r\n  birthDate: z.date({ message: \"Please select a date\" }).refine((date) => date < new Date(), { message: \"Date must be in past\" }),\r\n  profileImg: z\r\n    .custom<File[]>((files) => files && files.length > 0, { message: \"Please select an image\" })\r\n    .refine(\r\n      (files) =>\r\n        files.every((file) => {\r\n          const fileName = file.name.toLowerCase();\r\n          const extension = fileName.split(\".\").pop();\r\n          return validImageExtensions.includes(extension || \"\");\r\n        }),\r\n      { message: \"Invalid image extension\" }\r\n    ),\r\n  phone: z.string({ message: \"Phone number is required\" }).refine((phone) => /^\\+\\d{10,15}$/.test(phone), \"Invalid phone number\"),\r\n  weight: z.string().optional(),\r\n  height: z.string().optional(),\r\n  email: z.string().email().optional(),\r\n  address: z.string().optional(),\r\n  country: z.object({ label: z.string({ message: \"Please select a country\" }) }, { message: \"Please select a country\" }),\r\n});\r\n"
        }
    ]
}