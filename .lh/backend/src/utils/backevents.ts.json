{
    "sourceFile": "backend/src/utils/backevents.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741040103027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741040103027,
            "name": "Commit-0",
            "content": "import crypto from \"crypto\";\r\nimport { NotificationModel } from \"../models/notifications.model\";\r\nimport { MedicalStuffRegex } from \"./constants\";\r\nimport { UserDocument } from \"../models/user.model.js\";\r\n\r\ninterface Notification {\r\n  type: string;\r\n  description: string;\r\n  title: string;\r\n  assignedTo: string;\r\n  eventId?: string;\r\n}\r\n\r\n// Function to get system notifications based on event type\r\nexport const systemNotifications = (\r\n  title: \"newUserHasJoined\" | \"emailVerification\",\r\n  user: UserDocument,\r\n  newUser: UserDocument\r\n): Notification => {\r\n  const systemNotification: Record<string, Notification> = {\r\n    newUserHasJoined: {\r\n      type: \"New Member\",\r\n      description: `New Member (${newUser.name}) Has Joined Our Community`,\r\n      title: \"System Administration\",\r\n      assignedTo: \"AdminOnly\",\r\n    },\r\n    emailVerification: {\r\n      type: \"Email Verification\",\r\n      description: \"Please Verify Your Email\",\r\n      title: \"System Administration\",\r\n      assignedTo: \"All\",\r\n      eventId: user._id as string,\r\n    },\r\n  };\r\n\r\n  if (!systemNotification[title]) {\r\n    throw new Error(`Invalid notification type: ${title}`);\r\n  }\r\n\r\n  return systemNotification[title];\r\n};\r\n\r\nexport const generateRandomToken = (): string => {\r\n  return crypto.randomBytes(32).toString(\"hex\");\r\n};\r\n\r\nexport const getUserNotifications = async (user: UserDocument) => {\r\n  let notifications: Notification[] = [];\r\n\r\n  if (user.role === \"Admin\") {\r\n    notifications = await NotificationModel.find({\r\n      createdAt: { $gt: user.createdAt },\r\n      $or: [\r\n        { assignedTo: \"All\", eventId: user._id },\r\n        { assignedTo: \"AdminOnly\", user: { $ne: user._id } },\r\n        { assignedTo: \"AdminsFromAll\" },\r\n      ],\r\n    });\r\n  } else if (user.role === \"Resident Doctor\") {\r\n    notifications = await NotificationModel.find({\r\n      createdAt: { $gt: user.createdAt },\r\n      $or: [{ assignedTo: \"All\", eventId: user._id }],\r\n    });\r\n  }\r\n\r\n  return notifications;\r\n};\r\n\r\nexport const assignedNotifications = (user: UserDocument): string => {\r\n  return user.role === \"Admin\" ? \"AdminOnly\" : \"AdminsFromAll\";\r\n};\r\n\r\ninterface codeProps {\r\n  numbers: string[];\r\n  fiveNumbers: number[];\r\n  characters: string[];\r\n}\r\n\r\nexport const generateCode = ({\r\n  numbers,\r\n  fiveNumbers,\r\n  characters,\r\n}: codeProps) => {\r\n  let code;\r\n  const firstLetter = \"B\";\r\n\r\n  const lastFiveNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n  code = firstLetter + numbers[Math.floor(Math.random() * numbers.length)];\r\n\r\n  code += fiveNumbers[Math.floor(Math.random() * fiveNumbers.length)];\r\n\r\n  code += characters[Math.floor(Math.random() * characters.length)];\r\n\r\n  for (let i = 5; i < lastFiveNumbers.length; i++) {\r\n    code += lastFiveNumbers[Math.floor(Math.random() * lastFiveNumbers.length)];\r\n  }\r\n  return code;\r\n};\r\n\r\nexport interface role {\r\n  role:\r\n    | \"Admin\"\r\n    | \"Senior Consultant\"\r\n    | \"Resident Doctor\"\r\n    | \"Intern Doctor\"\r\n    | \"Head Secretary\"\r\n    | \"Charge Secretary\"\r\n    | \"Head Nurse\"\r\n    | \"Charge Nurse\";\r\n}\r\n\r\nexport const signRole = (code: string): string => {\r\n  let role = \"\";\r\n  MedicalStuffRegex.map((prefix) => {\r\n    if (prefix.regex.test(code)) {\r\n      role = prefix.role;\r\n    }\r\n  });\r\n\r\n  return role;\r\n};\r\n"
        }
    ]
}