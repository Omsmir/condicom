{
    "sourceFile": "backend/src/schemas/user.schema.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1740881125272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740881139494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,7 +69,9 @@\n   ...secondPayload\r\n });\r\n \r\n \r\n-export const \r\n+export const UpdateUserSchema = z.object({\r\n+  \r\n+})\r\n export type CreateUserInterface = z.infer<typeof CreateUserSchema>;\r\n export type AddAdditionalInterface = z.infer<typeof AddAdditionalSchema>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740881146611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,8 @@\n });\r\n \r\n \r\n export const UpdateUserSchema = z.object({\r\n-  \r\n+  ...params,\r\n })\r\n export type CreateUserInterface = z.infer<typeof CreateUserSchema>;\r\n export type AddAdditionalInterface = z.infer<typeof AddAdditionalSchema>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740881163595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,10 @@\n         { message: \"Invalid image extension\" }\r\n       )\r\n   }),\r\n };\r\n+\r\n+const \r\n const params = {\r\n   params: z.object({\r\n     id: z.string({ message: \"id is required\" }),\r\n   }),\r\n@@ -71,7 +73,8 @@\n \r\n \r\n export const UpdateUserSchema = z.object({\r\n   ...params,\r\n+  \r\n })\r\n export type CreateUserInterface = z.infer<typeof CreateUserSchema>;\r\n export type AddAdditionalInterface = z.infer<typeof AddAdditionalSchema>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740881172243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n       )\r\n   }),\r\n };\r\n \r\n-const \r\n+const ChangePayload = \r\n const params = {\r\n   params: z.object({\r\n     id: z.string({ message: \"id is required\" }),\r\n   }),\r\n"
                },
                {
                    "date": 1740881182503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+import z from \"zod\";\r\n+\r\n+const validImageExtensions = [\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"webp\"];\r\n+\r\n+const firstPayload = {\r\n+  body: z\r\n+    .object({\r\n+      name: z.string({ required_error: \"Name is required\" }),\r\n+      email: z\r\n+        .string({ required_error: \"Email is required\" })\r\n+        .email(\"Invalid email format\"),\r\n+      password: z\r\n+        .string({ required_error: \"Password is required\" })\r\n+        .min(6, \"Password must be at least 6 characters\"),\r\n+      confirmPassword: z.string({\r\n+        required_error: \"confirm password is required\",\r\n+      }),\r\n+      phone: z.string({ required_error: \"Phone number is required\" }),\r\n+      birthDate: z.string({ required_error: \"Birthdate is required\" }),\r\n+      gender: z.string({ required_error: \"Gender is required\" }),\r\n+\r\n+      code: z.string({ required_error: \"please support a code\" }),\r\n+    })\r\n+    .refine((data) => data.password === data.confirmPassword, {\r\n+      message: \"passwords must match\",\r\n+      path: [\"confirmPassword\"],\r\n+    }),\r\n+};\r\n+\r\n+const secondPayload = {\r\n+  body: z.object({\r\n+    bio: z.string().optional(),\r\n+    weight: z.string({ message: \"please select a weight\" }),\r\n+    height: z.string({ message: \"please select a height\" }),\r\n+    address: z.string().optional(),\r\n+    occupation: z.string({ message: \"please select an occupation\" }),\r\n+    country: z.string({ message: \"please select a country\" }),\r\n+  }),\r\n+  file: z.object({\r\n+    profileImg: z\r\n+      .custom<Express.Multer.File | undefined>(\r\n+        (file) => file !== undefined && file !== null,\r\n+        {\r\n+          message: \"please select a profile picture\",\r\n+        }\r\n+      )\r\n+      .refine(\r\n+        (file) => {\r\n+          if (!file) return false;\r\n+          const fileName = file.originalname.toLowerCase();\r\n+          const extension = fileName.split(\".\").pop();\r\n+          return validImageExtensions.includes(extension || \"\");\r\n+        },\r\n+        { message: \"Invalid image extension\" }\r\n+      )\r\n+  }),\r\n+};\r\n+\r\n+const ChangePayload = {\r\n+  body:z.object({\r\n+    \r\n+  })\r\n+}\r\n+const params = {\r\n+  params: z.object({\r\n+    id: z.string({ message: \"id is required\" }),\r\n+  }),\r\n+};\r\n+export const CreateUserSchema = z.object({\r\n+  ...firstPayload,\r\n+});\r\n+\r\n+export const AddAdditionalSchema = z.object({\r\n+  ...params,\r\n+  ...secondPayload\r\n+});\r\n+\r\n+\r\n+export const UpdateUserSchema = z.object({\r\n+  ...params,\r\n+  \r\n+})\r\n+export type CreateUserInterface = z.infer<typeof CreateUserSchema>;\r\n+export type AddAdditionalInterface = z.infer<typeof AddAdditionalSchema>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740881191478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,9 @@\n };\r\n \r\n const ChangePayload = {\r\n   body:z.object({\r\n+    name:z.string().optional(),\r\n     \r\n   })\r\n }\r\n const params = {\r\n@@ -80,85 +81,5 @@\n   ...params,\r\n   \r\n })\r\n export type CreateUserInterface = z.infer<typeof CreateUserSchema>;\r\n-export type AddAdditionalInterface = z.infer<typeof AddAdditionalSchema>\n-import z from \"zod\";\r\n-\r\n-const validImageExtensions = [\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"webp\"];\r\n-\r\n-const firstPayload = {\r\n-  body: z\r\n-    .object({\r\n-      name: z.string({ required_error: \"Name is required\" }),\r\n-      email: z\r\n-        .string({ required_error: \"Email is required\" })\r\n-        .email(\"Invalid email format\"),\r\n-      password: z\r\n-        .string({ required_error: \"Password is required\" })\r\n-        .min(6, \"Password must be at least 6 characters\"),\r\n-      confirmPassword: z.string({\r\n-        required_error: \"confirm password is required\",\r\n-      }),\r\n-      phone: z.string({ required_error: \"Phone number is required\" }),\r\n-      birthDate: z.string({ required_error: \"Birthdate is required\" }),\r\n-      gender: z.string({ required_error: \"Gender is required\" }),\r\n-\r\n-      code: z.string({ required_error: \"please support a code\" }),\r\n-    })\r\n-    .refine((data) => data.password === data.confirmPassword, {\r\n-      message: \"passwords must match\",\r\n-      path: [\"confirmPassword\"],\r\n-    }),\r\n-};\r\n-\r\n-const secondPayload = {\r\n-  body: z.object({\r\n-    bio: z.string().optional(),\r\n-    weight: z.string({ message: \"please select a weight\" }),\r\n-    height: z.string({ message: \"please select a height\" }),\r\n-    address: z.string().optional(),\r\n-    occupation: z.string({ message: \"please select an occupation\" }),\r\n-    country: z.string({ message: \"please select a country\" }),\r\n-  }),\r\n-  file: z.object({\r\n-    profileImg: z\r\n-      .custom<Express.Multer.File | undefined>(\r\n-        (file) => file !== undefined && file !== null,\r\n-        {\r\n-          message: \"please select a profile picture\",\r\n-        }\r\n-      )\r\n-      .refine(\r\n-        (file) => {\r\n-          if (!file) return false;\r\n-          const fileName = file.originalname.toLowerCase();\r\n-          const extension = fileName.split(\".\").pop();\r\n-          return validImageExtensions.includes(extension || \"\");\r\n-        },\r\n-        { message: \"Invalid image extension\" }\r\n-      )\r\n-  }),\r\n-};\r\n-\r\n-const ChangePayload = \r\n-const params = {\r\n-  params: z.object({\r\n-    id: z.string({ message: \"id is required\" }),\r\n-  }),\r\n-};\r\n-export const CreateUserSchema = z.object({\r\n-  ...firstPayload,\r\n-});\r\n-\r\n-export const AddAdditionalSchema = z.object({\r\n-  ...params,\r\n-  ...secondPayload\r\n-});\r\n-\r\n-\r\n-export const UpdateUserSchema = z.object({\r\n-  ...params,\r\n-  \r\n-})\r\n-export type CreateUserInterface = z.infer<typeof CreateUserSchema>;\r\n export type AddAdditionalInterface = z.infer<typeof AddAdditionalSchema>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740881199483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n \r\n const ChangePayload = {\r\n   body:z.object({\r\n     name:z.string().optional(),\r\n-    \r\n+    occup\r\n   })\r\n }\r\n const params = {\r\n   params: z.object({\r\n"
                },
                {
                    "date": 1740881209403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n \r\n const ChangePayload = {\r\n   body:z.object({\r\n     name:z.string().optional(),\r\n-    occup\r\n+    occupation:z.string().optional()\r\n   })\r\n }\r\n const params = {\r\n   params: z.object({\r\n"
                },
                {
                    "date": 1740881216338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,8 +78,8 @@\n \r\n \r\n export const UpdateUserSchema = z.object({\r\n   ...params,\r\n-  \r\n+  ...chane\r\n })\r\n export type CreateUserInterface = z.infer<typeof CreateUserSchema>;\r\n export type AddAdditionalInterface = z.infer<typeof AddAdditionalSchema>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740881224965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,8 +78,9 @@\n \r\n \r\n export const UpdateUserSchema = z.object({\r\n   ...params,\r\n-  ...chane\r\n+  ...ChangePayload\r\n })\r\n export type CreateUserInterface = z.infer<typeof CreateUserSchema>;\r\n\\ No newline at end of file\n-export type AddAdditionalInterface = z.infer<typeof AddAdditionalSchema>\n+export type AddAdditionalInterface = z.infer<typeof AddAdditionalSchema>\r\n+export type \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740881230493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,5 +82,5 @@\n   ...ChangePayload\r\n })\r\n export type CreateUserInterface = z.infer<typeof CreateUserSchema>;\r\n export type AddAdditionalInterface = z.infer<typeof AddAdditionalSchema>\r\n-export type \n\\ No newline at end of file\n+export type ChangeUserIn\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740881242049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,5 +82,5 @@\n   ...ChangePayload\r\n })\r\n export type CreateUserInterface = z.infer<typeof CreateUserSchema>;\r\n export type AddAdditionalInterface = z.infer<typeof AddAdditionalSchema>\r\n-export type ChangeUserIn\n\\ No newline at end of file\n+export type ChangeUserInterface = z.infer<typeof >\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740881250103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,5 +82,5 @@\n   ...ChangePayload\r\n })\r\n export type CreateUserInterface = z.infer<typeof CreateUserSchema>;\r\n export type AddAdditionalInterface = z.infer<typeof AddAdditionalSchema>\r\n-export type ChangeUserInterface = z.infer<typeof >\n\\ No newline at end of file\n+export type ChangeUserInterface = z.infer<typeof UpdateUserSchema>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741030546369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,10 @@\n \r\n const ChangePayload = {\r\n   body:z.object({\r\n     name:z.string().optional(),\r\n-    occupation:z.string().optional()\r\n+    occupation:z.string().optional(),\r\n+    gender:\r\n   })\r\n }\r\n const params = {\r\n   params: z.object({\r\n"
                },
                {
                    "date": 1741030558698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,10 @@\n const ChangePayload = {\r\n   body:z.object({\r\n     name:z.string().optional(),\r\n     occupation:z.string().optional(),\r\n-    gender:\r\n+    gender:z.string().optional(),\r\n+    height:z.string().optional()\r\n   })\r\n }\r\n const params = {\r\n   params: z.object({\r\n"
                },
                {
                    "date": 1741030567809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n     name:z.string().optional(),\r\n     occupation:z.string().optional(),\r\n     gender:z.string().optional(),\r\n     height:z.string().optional(),\r\n-    weight:z.st\r\n+    weight:z.string()\r\n   })\r\n }\r\n const params = {\r\n   params: z.object({\r\n"
                }
            ],
            "date": 1740881125271,
            "name": "Commit-0",
            "content": "import z from \"zod\";\r\n\r\nconst validImageExtensions = [\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"webp\"];\r\n\r\nconst firstPayload = {\r\n  body: z\r\n    .object({\r\n      name: z.string({ required_error: \"Name is required\" }),\r\n      email: z\r\n        .string({ required_error: \"Email is required\" })\r\n        .email(\"Invalid email format\"),\r\n      password: z\r\n        .string({ required_error: \"Password is required\" })\r\n        .min(6, \"Password must be at least 6 characters\"),\r\n      confirmPassword: z.string({\r\n        required_error: \"confirm password is required\",\r\n      }),\r\n      phone: z.string({ required_error: \"Phone number is required\" }),\r\n      birthDate: z.string({ required_error: \"Birthdate is required\" }),\r\n      gender: z.string({ required_error: \"Gender is required\" }),\r\n\r\n      code: z.string({ required_error: \"please support a code\" }),\r\n    })\r\n    .refine((data) => data.password === data.confirmPassword, {\r\n      message: \"passwords must match\",\r\n      path: [\"confirmPassword\"],\r\n    }),\r\n};\r\n\r\nconst secondPayload = {\r\n  body: z.object({\r\n    bio: z.string().optional(),\r\n    weight: z.string({ message: \"please select a weight\" }),\r\n    height: z.string({ message: \"please select a height\" }),\r\n    address: z.string().optional(),\r\n    occupation: z.string({ message: \"please select an occupation\" }),\r\n    country: z.string({ message: \"please select a country\" }),\r\n  }),\r\n  file: z.object({\r\n    profileImg: z\r\n      .custom<Express.Multer.File | undefined>(\r\n        (file) => file !== undefined && file !== null,\r\n        {\r\n          message: \"please select a profile picture\",\r\n        }\r\n      )\r\n      .refine(\r\n        (file) => {\r\n          if (!file) return false;\r\n          const fileName = file.originalname.toLowerCase();\r\n          const extension = fileName.split(\".\").pop();\r\n          return validImageExtensions.includes(extension || \"\");\r\n        },\r\n        { message: \"Invalid image extension\" }\r\n      )\r\n  }),\r\n};\r\nconst params = {\r\n  params: z.object({\r\n    id: z.string({ message: \"id is required\" }),\r\n  }),\r\n};\r\nexport const CreateUserSchema = z.object({\r\n  ...firstPayload,\r\n});\r\n\r\nexport const AddAdditionalSchema = z.object({\r\n  ...params,\r\n  ...secondPayload\r\n});\r\n\r\n\r\nexport const \r\nexport type CreateUserInterface = z.infer<typeof CreateUserSchema>;\r\nexport type AddAdditionalInterface = z.infer<typeof AddAdditionalSchema>"
        }
    ]
}