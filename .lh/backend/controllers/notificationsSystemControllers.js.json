{
    "sourceFile": "backend/controllers/notificationsSystemControllers.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1738503859499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738503887159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { Notifications } from \"../db/schema/notification.js\";\r\n import { User } from \"../db/schema/user.js\";\r\n+import { assignedNotifications } from \"../lib/backEvents.js\";\r\n import { systemNotifications } from \"../lib/systemNotifications.js\";\r\n import { io } from \"../server.js\";\r\n import cron from \"node-cron\";\r\n \r\n@@ -13,56 +14,9 @@\n     if (!user) {\r\n       return res.status(404).json({ message: \"There is No ExistingUser\" });\r\n     }\r\n \r\n-    if (user.role !== \"Admin\") {\r\n-      let notifications;\r\n-      if (!user.verified) {\r\n-        notifications = await Notifications.find({\r\n-          $or: [\r\n-            {\r\n-              assignedTo: \"All\",\r\n-              eventId: user._id,\r\n-              createdAt: { $gt: user.createdAt },\r\n-            },\r\n-          ],\r\n-        });\r\n-      } else {\r\n-        notifications = await Notifications.find({\r\n-          $or: [\r\n-            {\r\n-              assignedTo: \"Admins\",\r\n-              createdAt: { $gt: user.createdAt },\r\n-            },\r\n-          ],\r\n-        });\r\n-      }\r\n-      return res.status(200).json({ notifications });\r\n-    }\r\n-\r\n-    if (user.role === \"Admin\") {\r\n-      let notifications;\r\n-      if (!user.verified) {\r\n-        notifications = await Notifications.find({\r\n-          createdAt: { $gt: user.createdAt },\r\n-          $or: [\r\n-            { eventId: user._id, assignedTo: \"All\" }, // System Notification\r\n-            { assignedTo: \"Admin\", user: { $ne: user._id } },\r\n-            { assignedTo: \"Admins\" },\r\n-          ],\r\n-        });\r\n-      } else {\r\n-        notifications = await Notifications.find({\r\n-          createdAt: { $gt: user.createdAt },\r\n-          $or: [\r\n-            { eventId: user._id, assignedTo: \"All\" },\r\n-            { assignedTo: \"Admin\", user: { $ne: user._id }},\r\n-            { assignedTo: \"Admins\" },\r\n-          ],\r\n-        });\r\n-      }\r\n-      return res.status(200).json({ notifications });\r\n-    }\r\n+   \r\n   } catch (error) {\r\n     return next(error);\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1738503892559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,14 +8,20 @@\n export const getAllNotifications = async (req, res, next) => {\r\n   const { id } = req.params;\r\n \r\n   try {\r\n+\r\n+    if(!mongoose.Types.ObjectId.isValid(id)){\r\n+      return res.status(400).json({message:\"The userId is not a vaild MongooseId\"})\r\n+    }\r\n+\r\n     const user = await User.findById(id);\r\n \r\n     if (!user) {\r\n       return res.status(404).json({ message: \"There is No ExistingUser\" });\r\n     }\r\n \r\n+   const notifications = await getUserNotifications(user)\r\n    \r\n   } catch (error) {\r\n     return next(error);\r\n   }\r\n"
                },
                {
                    "date": 1738504061764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,15 @@\n import { Notifications } from \"../db/schema/notification.js\";\r\n import { User } from \"../db/schema/user.js\";\r\n import { assignedNotifications } from \"../lib/backEvents.js\";\r\n-import { systemNotifications } from \"../lib/systemNotifications.js\";\r\n+import { systemNotifications\r\n import { io } from \"../server.js\";\r\n import cron from \"node-cron\";\r\n \r\n export const getAllNotifications = async (req, res, next) => {\r\n   const { id } = req.params;\r\n \r\n   try {\r\n-\r\n     if(!mongoose.Types.ObjectId.isValid(id)){\r\n       return res.status(400).json({message:\"The userId is not a vaild MongooseId\"})\r\n     }\r\n \r\n"
                },
                {
                    "date": 1738512037415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { Notifications } from \"../db/schema/notification.js\";\r\n import { User } from \"../db/schema/user.js\";\r\n import { assignedNotifications } from \"../lib/backEvents.js\";\r\n-import { systemNotifications\r\n+import { systemNotifications } from \"../lib/backEvents.js\";\r\n import { io } from \"../server.js\";\r\n import cron from \"node-cron\";\r\n \r\n export const getAllNotifications = async (req, res, next) => {\r\n@@ -20,8 +20,9 @@\n     }\r\n \r\n    const notifications = await getUserNotifications(user)\r\n    \r\n+   return res.status()\r\n   } catch (error) {\r\n     return next(error);\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1738512047117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     }\r\n \r\n    const notifications = await getUserNotifications(user)\r\n    \r\n-   return res.status()\r\n+   return res.status(200).json({notifica})\r\n   } catch (error) {\r\n     return next(error);\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1738512053364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     }\r\n \r\n    const notifications = await getUserNotifications(user)\r\n    \r\n-   return res.status(200).json({notifica})\r\n+   return res.status(200).json({notifications})\r\n   } catch (error) {\r\n     return next(error);\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1738512066989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Notifications } from \"../db/schema/notification.js\";\r\n import { User } from \"../db/schema/user.js\";\r\n-import { assignedNotifications } from \"../lib/backEvents.js\";\r\n+import { assignedNotifications, getUserNotifications } from \"../lib/backEvents.js\";\r\n import { systemNotifications } from \"../lib/backEvents.js\";\r\n import { io } from \"../server.js\";\r\n import cron from \"node-cron\";\r\n \r\n"
                },
                {
                    "date": 1738512129849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { assignedNotifications, getUserNotifications } from \"../lib/backEvents.js\";\r\n import { systemNotifications } from \"../lib/backEvents.js\";\r\n import { io } from \"../server.js\";\r\n import cron from \"node-cron\";\r\n-\r\n+import mongo\r\n export const getAllNotifications = async (req, res, next) => {\r\n   const { id } = req.params;\r\n \r\n   try {\r\n"
                },
                {
                    "date": 1738512137025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { assignedNotifications, getUserNotifications } from \"../lib/backEvents.js\";\r\n import { systemNotifications } from \"../lib/backEvents.js\";\r\n import { io } from \"../server.js\";\r\n import cron from \"node-cron\";\r\n-import mongo\r\n+import mongoose from \"mongoose\"\r\n export const getAllNotifications = async (req, res, next) => {\r\n   const { id } = req.params;\r\n \r\n   try {\r\n"
                }
            ],
            "date": 1738503859499,
            "name": "Commit-0",
            "content": "import { Notifications } from \"../db/schema/notification.js\";\r\nimport { User } from \"../db/schema/user.js\";\r\nimport { systemNotifications } from \"../lib/systemNotifications.js\";\r\nimport { io } from \"../server.js\";\r\nimport cron from \"node-cron\";\r\n\r\nexport const getAllNotifications = async (req, res, next) => {\r\n  const { id } = req.params;\r\n\r\n  try {\r\n    const user = await User.findById(id);\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"There is No ExistingUser\" });\r\n    }\r\n\r\n    if (user.role !== \"Admin\") {\r\n      let notifications;\r\n      if (!user.verified) {\r\n        notifications = await Notifications.find({\r\n          $or: [\r\n            {\r\n              assignedTo: \"All\",\r\n              eventId: user._id,\r\n              createdAt: { $gt: user.createdAt },\r\n            },\r\n          ],\r\n        });\r\n      } else {\r\n        notifications = await Notifications.find({\r\n          $or: [\r\n            {\r\n              assignedTo: \"Admins\",\r\n              createdAt: { $gt: user.createdAt },\r\n            },\r\n          ],\r\n        });\r\n      }\r\n      return res.status(200).json({ notifications });\r\n    }\r\n\r\n    if (user.role === \"Admin\") {\r\n      let notifications;\r\n      if (!user.verified) {\r\n        notifications = await Notifications.find({\r\n          createdAt: { $gt: user.createdAt },\r\n          $or: [\r\n            { eventId: user._id, assignedTo: \"All\" }, // System Notification\r\n            { assignedTo: \"Admin\", user: { $ne: user._id } },\r\n            { assignedTo: \"Admins\" },\r\n          ],\r\n        });\r\n      } else {\r\n        notifications = await Notifications.find({\r\n          createdAt: { $gt: user.createdAt },\r\n          $or: [\r\n            { eventId: user._id, assignedTo: \"All\" },\r\n            { assignedTo: \"Admin\", user: { $ne: user._id }},\r\n            { assignedTo: \"Admins\" },\r\n          ],\r\n        });\r\n      }\r\n      return res.status(200).json({ notifications });\r\n    }\r\n  } catch (error) {\r\n    return next(error);\r\n  }\r\n};\r\n\r\nexport const systemAutomaticNotifications = async () => {\r\n  try {\r\n    const unVerfiedUsers = await User.find({ verified: false });\r\n\r\n    let systemNotification;\r\n    unVerfiedUsers.map(async (user) => {\r\n      const AdminNotification = {\r\n        type: \"Email Verification\",\r\n        description: \"Please Verify Your Email\",\r\n        title: \"System Administration\",\r\n        assignedTo: \"All\",\r\n        eventId: user._id,\r\n      };\r\n      systemNotification = new Notifications(AdminNotification);\r\n\r\n      await systemNotification.save();\r\n\r\n      io.emit(`EmailVerification${user._id}`, systemNotification);\r\n    });\r\n\r\n    console.log(\"System notification sent successfully:\", systemNotification);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n  }\r\n};\r\n\r\ncron.schedule(\"0 0 */7 * *\", systemAutomaticNotifications); // every hour\r\n\r\nexport const SystemNotifications = async (req, res, next) => {\r\n  const { notification ,user} = req.body;\r\n  try {\r\n    const AdminUsers = await User.find({ role: \"Admin\"  });\r\n\r\n    console.log(AdminUsers)\r\n    if (!notification || ! user) {\r\n      return res.status(404).json({ message: \"Support a Notification\" });\r\n    }\r\n\r\n    let systemNotification;\r\n\r\n    const newNotification = systemNotifications(notification, \"\",user);\r\n\r\n    systemNotification = new Notifications(newNotification);\r\n\r\n    await systemNotification.save();\r\n\r\n    AdminUsers.map(async (admin) => {\r\n      io.emit(`Admin_${admin._id}`, systemNotification);\r\n    });\r\n\r\n    return res.status(201).json({ message: \"success\", systemNotification });\r\n  } catch (error) {\r\n    return next(error);\r\n  }\r\n};\r\n\r\nexport const CreateNotification = async (req, res, next) => {\r\n  const { type, description, title, user, assignedBy, eventId } = req.body;\r\n\r\n  try {\r\n    const ExistingUser = await User.findById(user);\r\n    const AllAdminUsers = await User.find({ role: \"Admin\" });\r\n    const filteredAdmins = AllAdminUsers.filter(\r\n      (user) => user.email !== ExistingUser.email\r\n    );\r\n\r\n    const RequiredData = {\r\n      type,\r\n      description,\r\n      title,\r\n      user,\r\n      assignedBy,\r\n    };\r\n    for (const [key, value] of Object.entries(RequiredData)) {\r\n      if (!value) {\r\n        return res.status(400).json({ msg: `Missing ${key}` });\r\n      }\r\n    }\r\n\r\n    const newNotification = new Notifications({\r\n      type,\r\n      description,\r\n      title,\r\n      user,\r\n      assignedTo: assignedNotifications(ExistingUser),\r\n      eventId,\r\n      assignedBy,\r\n    });\r\n    await newNotification.save();\r\n\r\n    if (ExistingUser.role === \"Admin\") {\r\n      filteredAdmins.map((admin) => {\r\n        io.emit(`Admin_${admin._id}`, newNotification);\r\n      });\r\n    } else {\r\n      io.emit(\"adminNotification\", newNotification);\r\n    }\r\n\r\n    return res.status(201).json({\r\n      msg: \"Notification saved successfully\",\r\n      notifications: newNotification,\r\n    });\r\n  } catch (error) {\r\n    return next(error);\r\n  }\r\n};\r\n\r\nexport const GetNotifications = async (req, res, next) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const userNotifications = await Notifications.find({ user: id });\r\n\r\n    if (!userNotifications) {\r\n      return res.status(404).json({ msg: \"User Notifications not found\" });\r\n    }\r\n\r\n    return res.status(200).json({ notifications: userNotifications });\r\n  } catch (error) {\r\n    return next(error);\r\n  }\r\n};\r\n\r\nexport const UpdateNotification = async (req, res, next) => {\r\n  const { seen } = req.body;\r\n  const { id } = req.params;\r\n  try {\r\n    const ExistingNotification = await Notifications.find({ user: id });\r\n\r\n    if (!ExistingNotification) {\r\n      return res.status(404).json({ msg: \"Notification not found\" });\r\n    }\r\n    if (!isNew) {\r\n      return res.status(400).json({ msg: \"Missing state field\" });\r\n    }\r\n\r\n    ExistingNotification.seen = seen;\r\n    await ExistingNotification.save();\r\n\r\n    return res.status(200).json({\r\n      msg: \"Notification updated successfully\",\r\n      notification: ExistingNotification,\r\n    });\r\n  } catch (error) {\r\n    return next(error);\r\n  }\r\n};\r\n\r\n"
        }
    ]
}