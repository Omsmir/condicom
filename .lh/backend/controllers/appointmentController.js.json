{
    "sourceFile": "backend/controllers/appointmentController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1738530366153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738530378600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,8 +97,11 @@\n       return res.status(400).json({\r\n         message: \"The new task conflicts with existing appointments.\",\r\n       });\r\n     }\r\n+    if (reservedFrontDates().datesArrayState) {\r\n+      return res.status(400).json({ message: reservedFrontDates().msg });\r\n+    }\r\n \r\n     const Appointments = new Appointment({\r\n       task,\r\n       description,\r\n"
                },
                {
                    "date": 1738530444744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,12 +97,9 @@\n       return res.status(400).json({\r\n         message: \"The new task conflicts with existing appointments.\",\r\n       });\r\n     }\r\n-    if (reservedFrontDates().datesArrayState) {\r\n-      return res.status(400).json({ message: reservedFrontDates().msg });\r\n-    }\r\n-\r\n+   \r\n     const Appointments = new Appointment({\r\n       task,\r\n       description,\r\n       startDate,\r\n"
                },
                {
                    "date": 1738530482406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n           endDate: { $gt: endDate },\r\n         },\r\n         {\r\n           // Case 3: The new range entirely overlaps an existing range\r\n-          startDate: { $gte: startDate },\r\n+          startDate: { $gt: startDate },\r\n           endDate: { $lte: endDate },\r\n         },\r\n       ],\r\n     });\r\n@@ -91,9 +91,12 @@\n \r\n       return { datesArrayState };\r\n     };\r\n \r\n-    \r\n+    if (reservedFrontDates().datesArrayState) {\r\n+      return res.status(400).json({ message: reservedFrontDates().msg });\r\n+    }\r\n+\r\n     if (reservedDates.length > 0) {\r\n       return res.status(400).json({\r\n         message: \"The new task conflicts with existing appointments.\",\r\n       });\r\n"
                },
                {
                    "date": 1738530541049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n           endDate: { $gt: endDate },\r\n         },\r\n         {\r\n           // Case 3: The new range entirely overlaps an existing range\r\n-          startDate: { $gt: startDate },\r\n+          startDate: { $gte: startDate },\r\n           endDate: { $lte: endDate },\r\n         },\r\n       ],\r\n     });\r\n"
                }
            ],
            "date": 1738530366153,
            "name": "Commit-0",
            "content": "import { isBefore, isEqual, isSameDay, isAfter } from \"date-fns\";\r\nimport { Appointment } from \"../db/schema/appointment.js\";\r\nimport { User } from \"../db/schema/user.js\";\r\nimport { Socket, Server } from \"socket.io\";\r\nimport mongoose from \"mongoose\";\r\nimport { differenceInMinutes } from \"date-fns\";\r\nconst UpdateInterval = async () => {\r\n  try {\r\n    const Appointments = await Appointment.find({});\r\n\r\n    for (const appointment of Appointments) {\r\n      const newInterval =\r\n        (differenceInMinutes(appointment.endDate, appointment.startDate) / 30) *\r\n        100;\r\n\r\n      await appointment.updateOne({\r\n        $set: {\r\n          interval:newInterval\r\n        },\r\n      });\r\n\r\n      await appointment.save();\r\n    }\r\n    console.log(\"Intervals updated successfully!\");\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n\r\n// UpdateInterval();\r\nexport const CreateAppointment = async (req, res, next) => {\r\n  const { task, startDate, endDate, interval, color, userId, description } =\r\n    req.body;\r\n  const ArrayOfValues = [task, startDate, endDate, interval, userId];\r\n  try {\r\n    ArrayOfValues.map((value) => {\r\n      if (!value) {\r\n        return res.status(404).json({ message: \"Some Fields Are Missing Out\" });\r\n      }\r\n    });\r\n\r\n    const reservedDates = await Appointment.find({\r\n      user: userId,\r\n      $or: [\r\n        {\r\n          // Case 1: New startDate falls within an existing range\r\n          startDate: { $lt: startDate },\r\n          endDate: { $gt: startDate },\r\n        },\r\n        {\r\n          // Case 2: New endDate falls within an existing range\r\n          startDate: { $lt: endDate },\r\n          endDate: { $gt: endDate },\r\n        },\r\n        {\r\n          // Case 3: The new range entirely overlaps an existing range\r\n          startDate: { $gte: startDate },\r\n          endDate: { $lte: endDate },\r\n        },\r\n      ],\r\n    });\r\n    const reservedFrontDates = () => {\r\n      let datesArrayState = false;\r\n      if (\r\n        isBefore(endDate, startDate) ||\r\n        isEqual(endDate, startDate) ||\r\n        !isSameDay(endDate, startDate)\r\n      ) {\r\n        datesArrayState = true;\r\n        if (isBefore(endDate, startDate)) {\r\n          return {\r\n            datesArrayState,\r\n            msg: \"The end date is before the start date\",\r\n          };\r\n        }\r\n\r\n        if (isEqual(startDate, endDate)) {\r\n          return {\r\n            datesArrayState,\r\n            msg: \"The start and end dates are the same\",\r\n          };\r\n        }\r\n        if (!isSameDay(endDate, startDate)) {\r\n          return {\r\n            datesArrayState,\r\n            msg: \"The Dates are not the on the same day\",\r\n          };\r\n        }\r\n      }\r\n\r\n      return { datesArrayState };\r\n    };\r\n\r\n    \r\n    if (reservedDates.length > 0) {\r\n      return res.status(400).json({\r\n        message: \"The new task conflicts with existing appointments.\",\r\n      });\r\n    }\r\n\r\n    const Appointments = new Appointment({\r\n      task,\r\n      description,\r\n      startDate,\r\n      endDate,\r\n      interval,\r\n      color,\r\n      user: userId,\r\n      completed: false,\r\n    });\r\n\r\n    await Appointments.save();\r\n    return res\r\n      .status(201)\r\n      .json({ message: \"Appointment Created Successfully\", Appointments });\r\n  } catch (error) {\r\n    return next(error);\r\n  }\r\n};\r\n\r\nexport const getuserAppointments = async (req, res, next) => {\r\n  const { userId } = req.params;\r\n\r\n  if (!mongoose.Types.ObjectId.isValid(userId)) {\r\n    return res.status(400).json({ message: \"Invalid user ID format\" });\r\n  }\r\n  const userAppointments = await Appointment.find({ user: userId }).sort({\r\n    startDate: 1,\r\n  });\r\n\r\n  try {\r\n    if (!userAppointments) {\r\n      return res.status(404).json({ message: \"User Don't Have Appointments\" });\r\n    }\r\n\r\n    return res.status(200).json({ userAppointments });\r\n  } catch (error) {\r\n    return next(error);\r\n  }\r\n};\r\nexport const getAppointment = async (req, res, next) => {\r\n  try {\r\n    const Appointments = await Appointment.find({});\r\n\r\n    if (!Appointments) {\r\n      return res.status(404).json({ message: \"There is no Appointments\" });\r\n    }\r\n    return res.status(200).json({ message: \"Good Connection\", Appointments });\r\n  } catch (error) {\r\n    error.status = 500;\r\n    return next(error.message);\r\n  }\r\n};\r\n\r\nexport const deleteAppointment = async (req, res, next) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const AppointmentToDelete = await Appointment.findByIdAndDelete(id);\r\n\r\n    if (!AppointmentToDelete) {\r\n      return res.status(404).json({ message: \"Appointment not found\" });\r\n    }\r\n    return res\r\n      .status(200)\r\n      .json({ message: \"Appointment deleted successfully\" });\r\n  } catch (error) {\r\n    error.status = 500;\r\n    return next(error.message);\r\n  }\r\n};\r\n\r\nexport const editAppointment = async (req, res, next) => {\r\n  const { id } = req.params;\r\n  const { task, description, color, startDate, endDate, interval, completed } =\r\n    req.body;\r\n  try {\r\n    const AppointmentToEdit = await Appointment.findById(id);\r\n\r\n    if (!AppointmentToEdit) {\r\n      return res.status(404).json({ message: \"Appointment not found\" });\r\n    }\r\n\r\n    const updates = {\r\n      task,\r\n      description,\r\n      color,\r\n      startDate,\r\n      endDate,\r\n      interval,\r\n      completed,\r\n    };\r\n\r\n    for (const [key, value] of Object.entries(updates)) {\r\n      if (value) {\r\n        AppointmentToEdit[key] = value;\r\n      }\r\n    }\r\n    await AppointmentToEdit.save();\r\n    return res\r\n      .status(200)\r\n      .json({ message: \"Appointment edited successfully\", AppointmentToEdit });\r\n  } catch (error) {\r\n    return next(error.message);\r\n  }\r\n};\r\n"
        }
    ]
}