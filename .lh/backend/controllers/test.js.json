{
    "sourceFile": "backend/controllers/test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1739079790541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1739079790541,
            "name": "Commit-0",
            "content": "export const getSpecificTask = async (req, res, next) => {\r\n  const { id } = req.params;\r\n\r\n  const task = await Task.findOne({ _id: id });\r\n  try {\r\n    return res.status(200).json(task);\r\n  } catch (error) {\r\n    return res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nexport const getTask = async (req, res, next) => {\r\n  try {\r\n    const page = parseInt(req.query.page ) || 1;\r\n    const limit = parseInt(req.query.limit ) || 3;\r\n    const skip = (page - 1) * limit;\r\n\r\n    const tasks = await Task.find().skip(skip).limit(limit);\r\n    res.json(tasks);\r\n  } catch (error) {\r\n    return res.status(500).json({ message: error.message });\r\n  }\r\n};\r\nexport const createTask = async (req, res, next) => {\r\n  const { task, description } = req.body;\r\n\r\n  try {\r\n    if (!task || !description) {\r\n      return res.status(404).json({ message: `missing fields` });\r\n    }\r\n    const newTask = await Task.create({ task, description });\r\n\r\n    await newTask.save();\r\n\r\n    return res.status(201).json({ task: newTask });\r\n  } catch (error) {\r\n    return res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nexport const updateTask = async (req, res) => {\r\n  const { id } = req.params;\r\n  const { task, description } = req.body;\r\n\r\n  const data = {task, description};\r\n  try {\r\n    const existingTask = await Task.findOne({ _id: id });\r\n\r\n    if (!existingTask) {\r\n      return res.status(404).json({ message: \"task is not found\" });\r\n    }\r\n\r\n    for (const [key, value] of Object.entries(data)) {\r\n      if (value) {\r\n        existingTask[key] = value;\r\n      }\r\n    }\r\n\r\n    await existingTask.save();\r\n\r\n    return res.status(200).json({ existingTask });\r\n  } catch (error) {\r\n    return res.status(500).json({message:error.message});\r\n  }\r\n};\r\n\r\n\r\nexport const deleteTask = async (req,res,next) =>{\r\n  const { id}  = req.params\r\n\r\ntry {\r\n\r\n  if(!mongoose.Types.ObjectId.isValid(id)){\r\n    return res.status(400).json({message:\"mongoose id is not valid\"})\r\n  }\r\n\r\n  const task = await Task.findOne({_id:id})\r\n\r\n  if(!task){\r\n    return res.status(404).json({message:\"appointment not found\"})\r\n  }\r\n\r\n  await task.deleteOne()\r\n  return res.status(200).json({task})\r\n} catch (error) {\r\n  return res.status(500).json({message:error.message});\r\n\r\n}\r\n}"
        }
    ]
}