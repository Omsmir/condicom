{
    "sourceFile": "backend/controllers/userController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 34,
            "patches": [
                {
                    "date": 1739282243301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739282254756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,9 +286,9 @@\n \r\n     return res.status(201).json({ token });\r\n   } catch (error) {\r\n      next(error);\r\n-     return res.status(500)\r\n+     return res.status(500).json({message:error.message})\r\n   }\r\n };\r\n export const codeGenerator = async (req, res, next) => {\r\n   const { numbers = [], character = [], fiveNumbers = [] } = req.body;\r\n"
                },
                {
                    "date": 1739282325022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -289,8 +289,9 @@\n      next(error);\r\n      return res.status(500).json({message:error.message})\r\n   }\r\n };\r\n+\r\n export const codeGenerator = async (req, res, next) => {\r\n   const { numbers = [], character = [], fiveNumbers = [] } = req.body;\r\n \r\n   const generateCode = () => {\r\n"
                },
                {
                    "date": 1739282403228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,9 +283,9 @@\n       process.env.JWT_SECRET,\r\n       { expiresIn: \"1h\" }\r\n     );\r\n \r\n-    return res.status(201).json({ token });\r\n+    return res.status(200).json({ token });\r\n   } catch (error) {\r\n      next(error);\r\n      return res.status(500).json({message:error.message})\r\n   }\r\n"
                },
                {
                    "date": 1739282467204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,11 +256,9 @@\n   }\r\n };\r\n export const Login = async (req, res, next) => {\r\n   const { email, password } = req.body;\r\n-  if (!email || !password) {\r\n-    return res.status(404).json({ msg: \"Some Fields Are Missing Out\" });\r\n-  }\r\n+ \r\n   try {\r\n     const user = await User.findOne({ email });\r\n \r\n     if (!user) {\r\n"
                },
                {
                    "date": 1739282487902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,9 +257,13 @@\n };\r\n export const Login = async (req, res, next) => {\r\n   const { email, password } = req.body;\r\n  \r\n+  const \r\n   try {\r\n+    if (!email || !password) {\r\n+      return res.status(404).json({ msg: \"Some Fields Are Missing Out\" });\r\n+    }\r\n     const user = await User.findOne({ email });\r\n \r\n     if (!user) {\r\n       return res.status(400).json({ msg: \"Account doesn't exists\" });\r\n"
                },
                {
                    "date": 1739282495580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,9 +257,12 @@\n };\r\n export const Login = async (req, res, next) => {\r\n   const { email, password } = req.body;\r\n  \r\n-  const \r\n+  const data = {\r\n+    email,\r\n+    passw\r\n+  }\r\n   try {\r\n     if (!email || !password) {\r\n       return res.status(404).json({ msg: \"Some Fields Are Missing Out\" });\r\n     }\r\n"
                },
                {
                    "date": 1739282504487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,10 +258,10 @@\n export const Login = async (req, res, next) => {\r\n   const { email, password } = req.body;\r\n  \r\n   const data = {\r\n-    email,\r\n-    passw\r\n+    email:email\r\n+    password:password\r\n   }\r\n   try {\r\n     if (!email || !password) {\r\n       return res.status(404).json({ msg: \"Some Fields Are Missing Out\" });\r\n"
                },
                {
                    "date": 1739282511707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,9 +258,9 @@\n export const Login = async (req, res, next) => {\r\n   const { email, password } = req.body;\r\n  \r\n   const data = {\r\n-    email:email\r\n+    email:email,\r\n     password:password\r\n   }\r\n   try {\r\n     if (!email || !password) {\r\n"
                },
                {
                    "date": 1739282516830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,11 +262,10 @@\n     email:email,\r\n     password:password\r\n   }\r\n   try {\r\n-    if (!email || !password) {\r\n-      return res.status(404).json({ msg: \"Some Fields Are Missing Out\" });\r\n-    }\r\n+    \r\n+    for()\r\n     const user = await User.findOne({ email });\r\n \r\n     if (!user) {\r\n       return res.status(400).json({ msg: \"Account doesn't exists\" });\r\n"
                },
                {
                    "date": 1739282528071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,9 +263,9 @@\n     password:password\r\n   }\r\n   try {\r\n     \r\n-    for()\r\n+    for(const )\r\n     const user = await User.findOne({ email });\r\n \r\n     if (!user) {\r\n       return res.status(400).json({ msg: \"Account doesn't exists\" });\r\n"
                },
                {
                    "date": 1739282533492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,9 +263,9 @@\n     password:password\r\n   }\r\n   try {\r\n     \r\n-    for(const )\r\n+    for(const [key,value] of )\r\n     const user = await User.findOne({ email });\r\n \r\n     if (!user) {\r\n       return res.status(400).json({ msg: \"Account doesn't exists\" });\r\n"
                },
                {
                    "date": 1739282539365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,9 +263,9 @@\n     password:password\r\n   }\r\n   try {\r\n     \r\n-    for(const [key,value] of )\r\n+    for(const [key,value] of Object.en)\r\n     const user = await User.findOne({ email });\r\n \r\n     if (!user) {\r\n       return res.status(400).json({ msg: \"Account doesn't exists\" });\r\n"
                },
                {
                    "date": 1739282546508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,9 +263,11 @@\n     password:password\r\n   }\r\n   try {\r\n     \r\n-    for(const [key,value] of Object.en)\r\n+    for(const [key,value] of Object.entries(data)){\r\n+      \r\n+    }\r\n     const user = await User.findOne({ email });\r\n \r\n     if (!user) {\r\n       return res.status(400).json({ msg: \"Account doesn't exists\" });\r\n"
                },
                {
                    "date": 1739282554513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,9 +264,11 @@\n   }\r\n   try {\r\n     \r\n     for(const [key,value] of Object.entries(data)){\r\n-      \r\n+      if(){\r\n+        \r\n+      }\r\n     }\r\n     const user = await User.findOne({ email });\r\n \r\n     if (!user) {\r\n"
                },
                {
                    "date": 1739282563204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,10 +264,10 @@\n   }\r\n   try {\r\n     \r\n     for(const [key,value] of Object.entries(data)){\r\n-      if(){\r\n-        \r\n+      if(!value){\r\n+        return res.stat\r\n       }\r\n     }\r\n     const user = await User.findOne({ email });\r\n \r\n"
                },
                {
                    "date": 1739282572621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n   try {\r\n     \r\n     for(const [key,value] of Object.entries(data)){\r\n       if(!value){\r\n-        return res.stat\r\n+        return res.status(404).json({message:})\r\n       }\r\n     }\r\n     const user = await User.findOne({ email });\r\n \r\n"
                },
                {
                    "date": 1739282582762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n   try {\r\n     \r\n     for(const [key,value] of Object.entries(data)){\r\n       if(!value){\r\n-        return res.status(404).json({message:})\r\n+        return res.status(404).json({message:`${key} is missing`})\r\n       }\r\n     }\r\n     const user = await User.findOne({ email });\r\n \r\n"
                },
                {
                    "date": 1739283974699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,32 +102,32 @@\n \r\n   try {\r\n     for(let [value,key] of Object.entries(requiredFields)){\r\n       if(!value){\r\n-        return res.status(404).json({ msg: `Some Fields Are Missing Out` });\r\n+        return res.status(404).json({ message: `Some Fields Are Missing Out` });\r\n \r\n       }\r\n     }\r\n \r\n     if (password !== confirmPassword) {\r\n-      return res.status(403).json({ msg: \"Passwords Must Match\" });\r\n+      return res.status(403).json({ message: \"Passwords Must Match\" });\r\n     }\r\n   \r\n     const existingUser = await User.findOne({ email });\r\n \r\n     if (existingUser) {\r\n-      return res.status(403).json({ msg: \"user already exists\" });\r\n+      return res.status(403).json({ message: \"user already exists\" });\r\n     }\r\n \r\n     const Code = await codeSchema.findOne({ code });\r\n \r\n     if (!Code) {\r\n-      return res.status(404).json({ msg: \"Invalid Code Supported\" });\r\n+      return res.status(404).json({ message: \"Invalid Code Supported\" });\r\n     }\r\n \r\n     const existingCode = await User.findOne({ code });\r\n     if (existingCode) {\r\n-      return res.status(409).json({ msg: \"This Code is Used\" });\r\n+      return res.status(409).json({ message: \"This Code is Used\" });\r\n     }\r\n \r\n     Code.used = true\r\n \r\n@@ -153,13 +153,13 @@\n \r\n     await newUser.save();\r\n \r\n     return res.status(201).json({\r\n-      msg: \"User registered successfully\",\r\n+      message: \"User registered successfully\",\r\n       user: newUser,\r\n     });\r\n   } catch (error) {\r\n-    return res.status(500).json({ msg: error.message });\r\n+    return res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n export const AddAddtionalInformation = async (req, res, next) => {\r\n   const { id } = req.params;\r\n@@ -185,13 +185,13 @@\n   const existingUser = await User.findById(id);\r\n \r\n   try {\r\n     if (!existingUser) {\r\n-      return res.status(404).json({ msg: \"User not found\" });\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n     }\r\n     for (const [key, value] of Object.entries(requiredInformation)) {\r\n       if (!value) {\r\n-        return res.status(404).json({ msg: `Some Fields Are Missing Out` });\r\n+        return res.status(404).json({ message: `Some Fields Are Missing Out` });\r\n       }\r\n     }\r\n \r\n     for (const [key, value] of Object.entries(optionalInformation)) {\r\n@@ -234,12 +234,12 @@\n     await existingUser.save();\r\n \r\n     await sendVerificationEmail(existingUser.email, nonToken);\r\n \r\n-    return res.status(200).json({ msg: `Information Added Successfully`, existingUser });\r\n+    return res.status(200).json({ message: `Information Added Successfully`, existingUser });\r\n   } catch (error) {\r\n-    const errMsg = error;\r\n-    return next(errMsg);\r\n+    const errmessage = error;\r\n+    return next(errmessage);\r\n   }finally{\r\n     const Notification = {\r\n       type: \"Email Verification\",\r\n       description: \"Please Verify Your Email\",\r\n@@ -271,13 +271,13 @@\n     }\r\n     const user = await User.findOne({ email });\r\n \r\n     if (!user) {\r\n-      return res.status(400).json({ msg: \"Account doesn't exists\" });\r\n+      return res.status(400).json({ message: \"Account doesn't exists\" });\r\n     }\r\n \r\n     if (!user || !(await user.comparePassword(password))) {\r\n-      return res.status(401).json({ msg: \"Invalid Credentials\" });\r\n+      return res.status(401).json({ message: \"Invalid Credentials\" });\r\n     }\r\n \r\n     const token = jwt.sign(\r\n       {\r\n@@ -325,9 +325,9 @@\n   try {\r\n     if (numbers.length < 1 && character.length < 1 && fiveNumbers.length < 1) {\r\n       return res\r\n         .status(400)\r\n-        .json({ msg: \"At least one type of code is required\" });\r\n+        .json({ message: \"At least one type of code is required\" });\r\n     }\r\n     let role;\r\n \r\n     MedicalStuffRegex.map((element) => {\r\n@@ -338,21 +338,21 @@\n     });\r\n \r\n     const existingCode = await codeSchema.findOne({ code });\r\n     if (existingCode) {\r\n-      return res.status(409).json({ msg: \"Code already exists\" });\r\n+      return res.status(409).json({ message: \"Code already exists\" });\r\n     }\r\n \r\n     const generatedCode = new codeSchema({ code, role });\r\n     await generatedCode.save();\r\n \r\n     return res.status(201).json({\r\n-      msg: \"Code created successfully\",\r\n+      message: \"Code created successfully\",\r\n       code: generatedCode,\r\n     });\r\n   } catch (error) {\r\n     return res.status(500).json({\r\n-      msg: \"An error occurred while generating the code\",\r\n+      message: \"An error occurred while generating the code\",\r\n       error: error.message,\r\n     });\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1739284087647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n \r\n   try {\r\n     for(let [value,key] of Object.entries(requiredFields)){\r\n       if(!value){\r\n-        return res.status(404).json({ message: `Some Fields Are Missing Out` });\r\n+        return res.status(404).json({ message: `$` });\r\n \r\n       }\r\n     }\r\n \r\n"
                },
                {
                    "date": 1739284094948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n \r\n   try {\r\n     for(let [value,key] of Object.entries(requiredFields)){\r\n       if(!value){\r\n-        return res.status(404).json({ message: `$` });\r\n+        return res.status(404).json({ message: `${key} is missing out` });\r\n \r\n       }\r\n     }\r\n \r\n"
                },
                {
                    "date": 1739284103569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n \r\n   const requiredFields = {name,email,password,confirmPassword,gender,code,birthDate,phone}\r\n \r\n   try {\r\n-    for(let [value,key] of Object.entries(requiredFields)){\r\n+    for(let [key,value] of Object.entries(requiredFields)){\r\n       if(!value){\r\n         return res.status(404).json({ message: `${key} is missing out` });\r\n \r\n       }\r\n"
                },
                {
                    "date": 1739285293514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,8 +157,9 @@\n       message: \"User registered successfully\",\r\n       user: newUser,\r\n     });\r\n   } catch (error) {\r\n+    ne\r\n     return res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n export const AddAddtionalInformation = async (req, res, next) => {\r\n"
                },
                {
                    "date": 1739285353380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n import nodemailer from \"nodemailer\";\r\n import dotenv from \"dotenv\";\r\n import { Notifications } from \"../db/schema/notification.js\";\r\n import { io } from \"../server.js\";\r\n-import mongoose from 'mongoose'\r\n+import mongoose from \"mongoose\";\r\n dotenv.config();\r\n \r\n const generateRandomToken = () => {\r\n   const token = crypto.randomBytes(32).toString(\"hex\");\r\n@@ -63,15 +63,13 @@\n     return next(error);\r\n   }\r\n };\r\n \r\n-\r\n-\r\n export const getUser = async (req, res, next) => {\r\n   const { id } = req.params;\r\n \r\n   if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-    return res.status(400).json({ error: 'Invalid ID format' });\r\n+    return res.status(400).json({ error: \"Invalid ID format\" });\r\n   }\r\n \r\n   const existingUser = await User.findById(id);\r\n   try {\r\n@@ -96,23 +94,30 @@\n     birthDate,\r\n     gender,\r\n   } = req.body;\r\n \r\n+  const requiredFields = {\r\n+    name,\r\n+    email,\r\n+    password,\r\n+    confirmPassword,\r\n+    gender,\r\n+    code,\r\n+    birthDate,\r\n+    phone,\r\n+  };\r\n \r\n-  const requiredFields = {name,email,password,confirmPassword,gender,code,birthDate,phone}\r\n-\r\n   try {\r\n-    for(let [key,value] of Object.entries(requiredFields)){\r\n-      if(!value){\r\n+    for (let [key, value] of Object.entries(requiredFields)) {\r\n+      if (!value) {\r\n         return res.status(404).json({ message: `${key} is missing out` });\r\n-\r\n       }\r\n     }\r\n \r\n     if (password !== confirmPassword) {\r\n       return res.status(403).json({ message: \"Passwords Must Match\" });\r\n     }\r\n-  \r\n+\r\n     const existingUser = await User.findOne({ email });\r\n \r\n     if (existingUser) {\r\n       return res.status(403).json({ message: \"user already exists\" });\r\n@@ -128,9 +133,9 @@\n     if (existingCode) {\r\n       return res.status(409).json({ message: \"This Code is Used\" });\r\n     }\r\n \r\n-    Code.used = true\r\n+    Code.used = true;\r\n \r\n     const newUser = new User({\r\n       name,\r\n       email,\r\n@@ -148,18 +153,18 @@\n       bio: \"\",\r\n       occupation: \"\",\r\n       address: \"\",\r\n     });\r\n-    await Code.save()\r\n+    await Code.save();\r\n \r\n     await newUser.save();\r\n \r\n     return res.status(201).json({\r\n       message: \"User registered successfully\",\r\n       user: newUser,\r\n     });\r\n   } catch (error) {\r\n-    ne\r\n+    next(error);\r\n     return res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n export const AddAddtionalInformation = async (req, res, next) => {\r\n@@ -200,9 +205,8 @@\n         existingUser[key] = value;\r\n       }\r\n     }\r\n \r\n-\r\n     for (const [key, value] of Object.entries(requiredInformation)) {\r\n       existingUser[key] = value;\r\n     }\r\n \r\n@@ -235,40 +239,40 @@\n     await existingUser.save();\r\n \r\n     await sendVerificationEmail(existingUser.email, nonToken);\r\n \r\n-    return res.status(200).json({ message: `Information Added Successfully`, existingUser });\r\n+    return res\r\n+      .status(200)\r\n+      .json({ message: `Information Added Successfully`, existingUser });\r\n   } catch (error) {\r\n     const errmessage = error;\r\n     return next(errmessage);\r\n-  }finally{\r\n+  } finally {\r\n     const Notification = {\r\n       type: \"Email Verification\",\r\n       description: \"Please Verify Your Email\",\r\n       title: \"System Administration\",\r\n       assignedTo: \"All\",\r\n       eventId: existingUser._id,\r\n     };\r\n-   const systemNotification = new Notifications(Notification);\r\n+    const systemNotification = new Notifications(Notification);\r\n \r\n     await systemNotification.save();\r\n \r\n     io.emit(`EmailVerification${existingUser._id}`, systemNotification);\r\n-\r\n   }\r\n };\r\n export const Login = async (req, res, next) => {\r\n   const { email, password } = req.body;\r\n- \r\n+\r\n   const data = {\r\n-    email:email,\r\n-    password:password\r\n-  }\r\n+    email: email,\r\n+    password: password,\r\n+  };\r\n   try {\r\n-    \r\n-    for(const [key,value] of Object.entries(data)){\r\n-      if(!value){\r\n-        return res.status(404).json({message:`${key} is missing`})\r\n+    for (const [key, value] of Object.entries(data)) {\r\n+      if (!value) {\r\n+        return res.status(404).json({ message: `${key} is missing` });\r\n       }\r\n     }\r\n     const user = await User.findOne({ email });\r\n \r\n@@ -286,18 +290,18 @@\n         role: user.role,\r\n         profileImg: user.profileImg.url,\r\n         name: user.name,\r\n         verified: user.verified,\r\n-        code:user.code\r\n+        code: user.code,\r\n       },\r\n       process.env.JWT_SECRET,\r\n       { expiresIn: \"1h\" }\r\n     );\r\n \r\n     return res.status(200).json({ token });\r\n   } catch (error) {\r\n-     next(error);\r\n-     return res.status(500).json({message:error.message})\r\n+    next(error);\r\n+    return res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n \r\n export const codeGenerator = async (req, res, next) => {\r\n@@ -357,10 +361,8 @@\n     });\r\n   }\r\n };\r\n \r\n-\r\n-\r\n export const verifyUser = async (req, res, next) => {\r\n   const { token } = req.query;\r\n \r\n   const hashedToken = crypto.createHash(\"sha256\").update(token).digest(\"hex\");\r\n@@ -369,34 +371,31 @@\n     expireToken: { $gt: Date.now() },\r\n   });\r\n \r\n   try {\r\n-   \r\n     if (!existingUser) {\r\n       return res.status(404).json({ message: \"Invalid or expired token\" });\r\n     }\r\n \r\n     existingUser.verified = true;\r\n     existingUser.token = undefined;\r\n     existingUser.expireToken = undefined;\r\n \r\n-  \r\n     await existingUser.save();\r\n     return res\r\n       .status(201)\r\n       .json({ message: \"User has been verified successfully\" });\r\n   } catch (error) {\r\n     return next(error);\r\n-  }finally{\r\n-\r\n+  } finally {\r\n     const Notification = {\r\n       type: \"Email Verified\",\r\n       description: \"Email Verified Successfully\",\r\n       title: \"System Administration\",\r\n       assignedTo: \"All\",\r\n       eventId: existingUser._id,\r\n     };\r\n-   const systemNotification = new Notifications(Notification);\r\n+    const systemNotification = new Notifications(Notification);\r\n \r\n     await systemNotification.save();\r\n \r\n     io.emit(`EmailVerification${existingUser._id}`, Notification);\r\n@@ -406,35 +405,36 @@\n   const { id } = req.params;\r\n   const existingUser = await User.findById(id);\r\n \r\n   const userAppointments = await Appointment.find({ user: id });\r\n-  const userNotifications = await Notifications.find({$or:[{user:id},{eventId:id}]})\r\n-  const userCode = await codeSchema.findOne({code:existingUser.code})\r\n+  const userNotifications = await Notifications.find({\r\n+    $or: [{ user: id }, { eventId: id }],\r\n+  });\r\n+  const userCode = await codeSchema.findOne({ code: existingUser.code });\r\n   try {\r\n     if (!existingUser) {\r\n       return res.status(404).json({ message: \"User Not Found\" });\r\n     }\r\n \r\n     userAppointments.map(async (app) => await app.deleteOne());\r\n \r\n-    userNotifications.map(async(notification) => await notification.deleteOne())\r\n+    userNotifications.map(\r\n+      async (notification) => await notification.deleteOne()\r\n+    );\r\n \r\n-    userCode.used = false\r\n+    userCode.used = false;\r\n \r\n     // const storageRef = ref(storage, existingUser.profileImg.path);\r\n     // if (storageRef) {\r\n     //   await deleteObject(storageRef);\r\n     // }\r\n \r\n-    await userCode.save()\r\n+    await userCode.save();\r\n     await existingUser.deleteOne();\r\n-    \r\n \r\n     return res\r\n       .status(200)\r\n       .json({ message: \"User deleted successfully\", userAppointments });\r\n   } catch (error) {\r\n     return next(error);\r\n   }\r\n };\r\n-\r\n-\r\n"
                },
                {
                    "date": 1739286633794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,439 @@\n+import { User } from \"../db/schema/user.js\";\r\n+import jwt from \"jsonwebtoken\";\r\n+import { codeSchema } from \"../db/schema/code.js\";\r\n+import { MedicalStuffRegex } from \"../lib/constants.js\";\r\n+import {\r\n+  deleteObject,\r\n+  getDownloadURL,\r\n+  ref,\r\n+  uploadBytes,\r\n+} from \"firebase/storage\";\r\n+import { storage } from \"../db/firebase/firebase.js\";\r\n+import { Appointment } from \"../db/schema/appointment.js\";\r\n+import crypto from \"crypto\";\r\n+import nodemailer from \"nodemailer\";\r\n+import dotenv from \"dotenv\";\r\n+import { Notifications } from \"../db/schema/notification.js\";\r\n+import { io } from \"../server.js\";\r\n+import mongoose from \"mongoose\";\r\n+dotenv.config();\r\n+\r\n+const generateRandomToken = () => {\r\n+  const token = crypto.randomBytes(32).toString(\"hex\");\r\n+  return token;\r\n+};\r\n+\r\n+export const sendVerificationEmail = async (to, verificationToken) => {\r\n+  const transport = nodemailer.createTransport({\r\n+    host: \"smtp.gmail.com\",\r\n+    port: 465,\r\n+    secure: true,\r\n+    auth: {\r\n+      user: \"omarsamir232@gmail.com\",\r\n+      pass: process.env.APP_PASSWORD,\r\n+    },\r\n+  });\r\n+  const verificationLink = `http://localhost:8080/emailVerification?token=${verificationToken}`;\r\n+  const from = \"HealthCare\";\r\n+  const subject = \" HealthCare Email Verification\";\r\n+  const html = `\r\n+    <p>Hello, ${to},</p>\r\n+    <p>Please use This Link To Verify Yout Email</p>\r\n+    <a href=\"${verificationLink}\">Click Here</a>\r\n+    <p>Thank you</p>\r\n+    `;\r\n+  return new Promise((resolve, reject) => {\r\n+    transport.sendMail({ from, subject, to, html }, (err, info) => {\r\n+      if (err) reject(err);\r\n+      resolve(info);\r\n+      console.log(info);\r\n+    });\r\n+  });\r\n+};\r\n+\r\n+export const getAllUsers = async (req, res, next) => {\r\n+  const users = await User.find({});\r\n+  try {\r\n+    if (!users) {\r\n+      return res.status(404).json({ message: \"There is No Users\" });\r\n+    }\r\n+\r\n+    return res.status(200).json({ users });\r\n+  } catch (error) {\r\n+    return next(error);\r\n+  }\r\n+};\r\n+\r\n+export const getUser = async (req, res, next) => {\r\n+  const { id } = req.params;\r\n+\r\n+  if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+    return res.status(400).json({ error: \"Invalid ID format\" });\r\n+  }\r\n+\r\n+  const existingUser = await User.findById(id);\r\n+  try {\r\n+    if (!existingUser) {\r\n+      return res.status(404).json({ message: \"User Not Found\" });\r\n+    }\r\n+\r\n+    return res.status(200).json({ existingUser });\r\n+  } catch (error) {\r\n+    return next(error.message);\r\n+  }\r\n+};\r\n+\r\n+export const register = async (req, res, next) => {\r\n+  const {\r\n+    name,\r\n+    email,\r\n+    password,\r\n+    confirmPassword,\r\n+    code,\r\n+    phone,\r\n+    birthDate,\r\n+    gender,\r\n+  } = req.body;\r\n+\r\n+  const requiredFields = {\r\n+    name,\r\n+    email,\r\n+    password,\r\n+    confirmPassword,\r\n+    gender,\r\n+    code,\r\n+    birthDate,\r\n+    phone,\r\n+  };\r\n+\r\n+  try {\r\n+    for (let [key, value] of Object.entries(requiredFields)) {\r\n+      if (!value) {\r\n+        return res.status(404).json({ message: `${key} is missing out` });\r\n+      }\r\n+    }\r\n+\r\n+    if (password !== confirmPassword) {\r\n+      return res.status(403).json({ message: \"Passwords Must Match\" });\r\n+    }\r\n+\r\n+    const existingUser = await User.findOne({ email });\r\n+\r\n+    if (existingUser) {\r\n+      return res.status(403).json({ message: \"user already exists\" });\r\n+    }\r\n+\r\n+    const Code = await codeSchema.findOne({ code });\r\n+\r\n+    if (!Code) {\r\n+      return res.status(404).json({ message: \"Invalid Code Supported\" });\r\n+    }\r\n+\r\n+    const existingCode = await User.findOne({ code });\r\n+    if (existingCode) {\r\n+      return res.status(409).json({ message: \"This Code is Used\" });\r\n+    }\r\n+\r\n+    Code.used = true;\r\n+\r\n+    const newUser = new User({\r\n+      name,\r\n+      email,\r\n+      password,\r\n+      gender,\r\n+      phone,\r\n+      birthDate,\r\n+      role: Code.role,\r\n+      code: code,\r\n+      verified: false,\r\n+      profileImg: \"\",\r\n+      weight: 0,\r\n+      height: 0,\r\n+      counrty: \"\",\r\n+      bio: \"\",\r\n+      occupation: \"\",\r\n+      address: \"\",\r\n+    });\r\n+    await Code.save();\r\n+\r\n+    await newUser.save();\r\n+\r\n+    return res.status(201).json({\r\n+      message: \"User registered successfully\",\r\n+      user: newUser,\r\n+    });\r\n+  } catch (error) {\r\n+    next(error);\r\n+    return res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+export const AddAddtionalInformation = async (req, res, next) => {\r\n+  const { id } = req.params;\r\n+  const { height, weight, occupation, country, address, bio, profileState } =\r\n+    req.body;\r\n+\r\n+  const profileImg = req.file;\r\n+  const nonToken = generateRandomToken();\r\n+  const token = crypto.createHash(\"sha256\").update(nonToken).digest(\"hex\");\r\n+  const expireToken = Date.now() + 1 * 24 * 60 * 60 * 1000;\r\n+\r\n+  const requiredInformation = {\r\n+    profileState,\r\n+    height,\r\n+    weight,\r\n+    occupation,\r\n+    country,\r\n+    token,\r\n+    expireToken,\r\n+  };\r\n+\r\n+  const optionalInformation = { bio, address };\r\n+  const existingUser = await User.findById(id);\r\n+\r\n+  try {\r\n+    if (!existingUser) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n+    }\r\n+    for (const [key, value] of Object.entries(requiredInformation)) {\r\n+      if (!value) {\r\n+        return res.status(404).json({ message: `Some Fields Are Missing Out` });\r\n+      }\r\n+    }\r\n+\r\n+    for (const [key, value] of Object.entries(optionalInformation)) {\r\n+      if (value) {\r\n+        existingUser[key] = value;\r\n+      }\r\n+    }\r\n+\r\n+    for (const [key, value] of Object.entries(requiredInformation)) {\r\n+      existingUser[key] = value;\r\n+    }\r\n+\r\n+    if (profileImg) {\r\n+      const imageToUpload = async () => {\r\n+        const StorageBucket = ref(\r\n+          storage,\r\n+          `Doctors/${existingUser._id}/${existingUser._id}`\r\n+        );\r\n+\r\n+        const SnapShot = await uploadBytes(StorageBucket, profileImg.buffer, {\r\n+          contentType: profileImg.mimetype,\r\n+        });\r\n+\r\n+        const downloadUrl = await getDownloadURL(SnapShot.ref);\r\n+\r\n+        await existingUser.updateOne({\r\n+          profileImg: {\r\n+            filename: profileImg.originalname,\r\n+            url: downloadUrl,\r\n+            contentType: profileImg.mimetype,\r\n+            path: StorageBucket.fullPath,\r\n+          },\r\n+        });\r\n+      };\r\n+\r\n+      imageToUpload();\r\n+    }\r\n+\r\n+    await existingUser.save();\r\n+\r\n+    await sendVerificationEmail(existingUser.email, nonToken);\r\n+\r\n+    return res\r\n+      .status(200)\r\n+      .json({ message: `Information Added Successfully`, existingUser });\r\n+  } catch (error) {\r\n+    const errmessage = error;\r\n+    return next(errmessage);\r\n+  } finally {\r\n+    const Notification = {\r\n+      type: \"Email Verification\",\r\n+      description: \"Please Verify Your Email\",\r\n+      title: \"System Administration\",\r\n+      assignedTo: \"All\",\r\n+      eventId: existingUser._id,\r\n+    };\r\n+    const systemNotification = new Notifications(Notification);\r\n+\r\n+    await systemNotification.save();\r\n+\r\n+    io.emit(`EmailVerification${existingUser._id}`, systemNotification);\r\n+  }\r\n+};\r\n+export const Login = async (req, res, next) => {\r\n+  const { email, password } = req.body;\r\n+\r\n+  const data = {\r\n+    email: email,\r\n+    password: password,\r\n+  };\r\n+  try {\r\n+    for (const [key, value] of Object.entries(data)) {\r\n+      if (!value) {\r\n+        return res.status(404).json({ message: `${key} is missing` });\r\n+      }\r\n+    }\r\n+    const user = await User.findOne({ email });\r\n+\r\n+    if (!user) {\r\n+      return res.status(400).json({ message: \"Account doesn't exists\" });\r\n+    }\r\n+\r\n+    if (!user || !(await user.comparePassword(password))) {\r\n+      return res.status(401).json({ message: \"Invalid Credentials\" });\r\n+    }\r\n+\r\n+    const token = jwt.sign(\r\n+      {\r\n+        id: user._id,\r\n+        role: user.role,\r\n+        profileImg: user.profileImg.url,\r\n+        name: user.name,\r\n+        verified: user.verified,\r\n+        code: user.code,\r\n+      },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: \"1h\" }\r\n+    );\r\n+\r\n+    return res.status(200).json({ token });\r\n+  } catch (error) {\r\n+    next(error);\r\n+  }\r\n+};\r\n+\r\n+export const codeGenerator = async (req, res, next) => {\r\n+  const { numbers = [], character = [], fiveNumbers = [] } = req.body;\r\n+\r\n+  const generateCode = () => {\r\n+    let code;\r\n+    const firstLetter = \"B\";\r\n+\r\n+    const lastFiveNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n+\r\n+    code = firstLetter + numbers[Math.floor(Math.random() * numbers.length)];\r\n+\r\n+    code += fiveNumbers[Math.floor(Math.random() * fiveNumbers.length)];\r\n+\r\n+    code += character[Math.floor(Math.random() * character.length)];\r\n+\r\n+    for (let i = 5; i < lastFiveNumbers.length; i++) {\r\n+      code +=\r\n+        lastFiveNumbers[Math.floor(Math.random() * lastFiveNumbers.length)];\r\n+    }\r\n+    return code;\r\n+  };\r\n+  const code = generateCode();\r\n+\r\n+  try {\r\n+    if (numbers.length < 1 && character.length < 1 && fiveNumbers.length < 1) {\r\n+      return res\r\n+        .status(400)\r\n+        .json({ message: \"At least one type of code is required\" });\r\n+    }\r\n+    let role;\r\n+\r\n+    MedicalStuffRegex.map((element) => {\r\n+      if (element.regex.test(code)) {\r\n+        role = element.role;\r\n+        console.log(role);\r\n+      }\r\n+    });\r\n+\r\n+    const existingCode = await codeSchema.findOne({ code });\r\n+    if (existingCode) {\r\n+      return res.status(409).json({ message: \"Code already exists\" });\r\n+    }\r\n+\r\n+    const generatedCode = new codeSchema({ code, role });\r\n+    await generatedCode.save();\r\n+\r\n+    return res.status(201).json({\r\n+      message: \"Code created successfully\",\r\n+      code: generatedCode,\r\n+    });\r\n+  } catch (error) {\r\n+    return res.status(500).json({\r\n+      message: \"An error occurred while generating the code\",\r\n+      error: error.message,\r\n+    });\r\n+  }\r\n+};\r\n+\r\n+export const verifyUser = async (req, res, next) => {\r\n+  const { token } = req.query;\r\n+\r\n+  const hashedToken = crypto.createHash(\"sha256\").update(token).digest(\"hex\");\r\n+  const existingUser = await User.findOne({\r\n+    token: hashedToken,\r\n+    expireToken: { $gt: Date.now() },\r\n+  });\r\n+\r\n+  try {\r\n+    if (!existingUser) {\r\n+      return res.status(404).json({ message: \"Invalid or expired token\" });\r\n+    }\r\n+\r\n+    existingUser.verified = true;\r\n+    existingUser.token = undefined;\r\n+    existingUser.expireToken = undefined;\r\n+\r\n+    await existingUser.save();\r\n+    return res\r\n+      .status(201)\r\n+      .json({ message: \"User has been verified successfully\" });\r\n+  } catch (error) {\r\n+    return next(error);\r\n+  } finally {\r\n+    const Notification = {\r\n+      type: \"Email Verified\",\r\n+      description: \"Email Verified Successfully\",\r\n+      title: \"System Administration\",\r\n+      assignedTo: \"All\",\r\n+      eventId: existingUser._id,\r\n+    };\r\n+    const systemNotification = new Notifications(Notification);\r\n+\r\n+    await systemNotification.save();\r\n+\r\n+    io.emit(`EmailVerification${existingUser._id}`, Notification);\r\n+  }\r\n+};\r\n+export const deleteUser = async (req, res, next) => {\r\n+  const { id } = req.params;\r\n+  const existingUser = await User.findById(id);\r\n+\r\n+  const userAppointments = await Appointment.find({ user: id });\r\n+  const userNotifications = await Notifications.find({\r\n+    $or: [{ user: id }, { eventId: id }],\r\n+  });\r\n+  const userCode = await codeSchema.findOne({ code: existingUser.code });\r\n+  try {\r\n+    if (!existingUser) {\r\n+      return res.status(404).json({ message: \"User Not Found\" });\r\n+    }\r\n+\r\n+    userAppointments.map(async (app) => await app.deleteOne());\r\n+\r\n+    userNotifications.map(\r\n+      async (notification) => await notification.deleteOne()\r\n+    );\r\n+\r\n+    userCode.used = false;\r\n+\r\n+    // const storageRef = ref(storage, existingUser.profileImg.path);\r\n+    // if (storageRef) {\r\n+    //   await deleteObject(storageRef);\r\n+    // }\r\n+\r\n+    await userCode.save();\r\n+    await existingUser.deleteOne();\r\n+\r\n+    return res\r\n+      .status(200)\r\n+      .json({ message: \"User deleted successfully\", userAppointments });\r\n+  } catch (error) {\r\n+    return next(error);\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1739286806388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,9 +298,9 @@\n     );\r\n \r\n     return res.status(200).json({ token });\r\n   } catch (error) {\r\n-    next(error);\r\n+     next(error);\r\n   }\r\n };\r\n \r\n export const codeGenerator = async (req, res, next) => {\r\n@@ -436,444 +436,4 @@\n   } catch (error) {\r\n     return next(error);\r\n   }\r\n };\r\n-import { User } from \"../db/schema/user.js\";\r\n-import jwt from \"jsonwebtoken\";\r\n-import { codeSchema } from \"../db/schema/code.js\";\r\n-import { MedicalStuffRegex } from \"../lib/constants.js\";\r\n-import {\r\n-  deleteObject,\r\n-  getDownloadURL,\r\n-  ref,\r\n-  uploadBytes,\r\n-} from \"firebase/storage\";\r\n-import { storage } from \"../db/firebase/firebase.js\";\r\n-import { Appointment } from \"../db/schema/appointment.js\";\r\n-import crypto from \"crypto\";\r\n-import nodemailer from \"nodemailer\";\r\n-import dotenv from \"dotenv\";\r\n-import { Notifications } from \"../db/schema/notification.js\";\r\n-import { io } from \"../server.js\";\r\n-import mongoose from \"mongoose\";\r\n-dotenv.config();\r\n-\r\n-const generateRandomToken = () => {\r\n-  const token = crypto.randomBytes(32).toString(\"hex\");\r\n-  return token;\r\n-};\r\n-\r\n-export const sendVerificationEmail = async (to, verificationToken) => {\r\n-  const transport = nodemailer.createTransport({\r\n-    host: \"smtp.gmail.com\",\r\n-    port: 465,\r\n-    secure: true,\r\n-    auth: {\r\n-      user: \"omarsamir232@gmail.com\",\r\n-      pass: process.env.APP_PASSWORD,\r\n-    },\r\n-  });\r\n-  const verificationLink = `http://localhost:8080/emailVerification?token=${verificationToken}`;\r\n-  const from = \"HealthCare\";\r\n-  const subject = \" HealthCare Email Verification\";\r\n-  const html = `\r\n-    <p>Hello, ${to},</p>\r\n-    <p>Please use This Link To Verify Yout Email</p>\r\n-    <a href=\"${verificationLink}\">Click Here</a>\r\n-    <p>Thank you</p>\r\n-    `;\r\n-  return new Promise((resolve, reject) => {\r\n-    transport.sendMail({ from, subject, to, html }, (err, info) => {\r\n-      if (err) reject(err);\r\n-      resolve(info);\r\n-      console.log(info);\r\n-    });\r\n-  });\r\n-};\r\n-\r\n-export const getAllUsers = async (req, res, next) => {\r\n-  const users = await User.find({});\r\n-  try {\r\n-    if (!users) {\r\n-      return res.status(404).json({ message: \"There is No Users\" });\r\n-    }\r\n-\r\n-    return res.status(200).json({ users });\r\n-  } catch (error) {\r\n-    return next(error);\r\n-  }\r\n-};\r\n-\r\n-export const getUser = async (req, res, next) => {\r\n-  const { id } = req.params;\r\n-\r\n-  if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-    return res.status(400).json({ error: \"Invalid ID format\" });\r\n-  }\r\n-\r\n-  const existingUser = await User.findById(id);\r\n-  try {\r\n-    if (!existingUser) {\r\n-      return res.status(404).json({ message: \"User Not Found\" });\r\n-    }\r\n-\r\n-    return res.status(200).json({ existingUser });\r\n-  } catch (error) {\r\n-    return next(error.message);\r\n-  }\r\n-};\r\n-\r\n-export const register = async (req, res, next) => {\r\n-  const {\r\n-    name,\r\n-    email,\r\n-    password,\r\n-    confirmPassword,\r\n-    code,\r\n-    phone,\r\n-    birthDate,\r\n-    gender,\r\n-  } = req.body;\r\n-\r\n-  const requiredFields = {\r\n-    name,\r\n-    email,\r\n-    password,\r\n-    confirmPassword,\r\n-    gender,\r\n-    code,\r\n-    birthDate,\r\n-    phone,\r\n-  };\r\n-\r\n-  try {\r\n-    for (let [key, value] of Object.entries(requiredFields)) {\r\n-      if (!value) {\r\n-        return res.status(404).json({ message: `${key} is missing out` });\r\n-      }\r\n-    }\r\n-\r\n-    if (password !== confirmPassword) {\r\n-      return res.status(403).json({ message: \"Passwords Must Match\" });\r\n-    }\r\n-\r\n-    const existingUser = await User.findOne({ email });\r\n-\r\n-    if (existingUser) {\r\n-      return res.status(403).json({ message: \"user already exists\" });\r\n-    }\r\n-\r\n-    const Code = await codeSchema.findOne({ code });\r\n-\r\n-    if (!Code) {\r\n-      return res.status(404).json({ message: \"Invalid Code Supported\" });\r\n-    }\r\n-\r\n-    const existingCode = await User.findOne({ code });\r\n-    if (existingCode) {\r\n-      return res.status(409).json({ message: \"This Code is Used\" });\r\n-    }\r\n-\r\n-    Code.used = true;\r\n-\r\n-    const newUser = new User({\r\n-      name,\r\n-      email,\r\n-      password,\r\n-      gender,\r\n-      phone,\r\n-      birthDate,\r\n-      role: Code.role,\r\n-      code: code,\r\n-      verified: false,\r\n-      profileImg: \"\",\r\n-      weight: 0,\r\n-      height: 0,\r\n-      counrty: \"\",\r\n-      bio: \"\",\r\n-      occupation: \"\",\r\n-      address: \"\",\r\n-    });\r\n-    await Code.save();\r\n-\r\n-    await newUser.save();\r\n-\r\n-    return res.status(201).json({\r\n-      message: \"User registered successfully\",\r\n-      user: newUser,\r\n-    });\r\n-  } catch (error) {\r\n-    next(error);\r\n-    return res.status(500).json({ message: error.message });\r\n-  }\r\n-};\r\n-export const AddAddtionalInformation = async (req, res, next) => {\r\n-  const { id } = req.params;\r\n-  const { height, weight, occupation, country, address, bio, profileState } =\r\n-    req.body;\r\n-\r\n-  const profileImg = req.file;\r\n-  const nonToken = generateRandomToken();\r\n-  const token = crypto.createHash(\"sha256\").update(nonToken).digest(\"hex\");\r\n-  const expireToken = Date.now() + 1 * 24 * 60 * 60 * 1000;\r\n-\r\n-  const requiredInformation = {\r\n-    profileState,\r\n-    height,\r\n-    weight,\r\n-    occupation,\r\n-    country,\r\n-    token,\r\n-    expireToken,\r\n-  };\r\n-\r\n-  const optionalInformation = { bio, address };\r\n-  const existingUser = await User.findById(id);\r\n-\r\n-  try {\r\n-    if (!existingUser) {\r\n-      return res.status(404).json({ message: \"User not found\" });\r\n-    }\r\n-    for (const [key, value] of Object.entries(requiredInformation)) {\r\n-      if (!value) {\r\n-        return res.status(404).json({ message: `Some Fields Are Missing Out` });\r\n-      }\r\n-    }\r\n-\r\n-    for (const [key, value] of Object.entries(optionalInformation)) {\r\n-      if (value) {\r\n-        existingUser[key] = value;\r\n-      }\r\n-    }\r\n-\r\n-    for (const [key, value] of Object.entries(requiredInformation)) {\r\n-      existingUser[key] = value;\r\n-    }\r\n-\r\n-    if (profileImg) {\r\n-      const imageToUpload = async () => {\r\n-        const StorageBucket = ref(\r\n-          storage,\r\n-          `Doctors/${existingUser._id}/${existingUser._id}`\r\n-        );\r\n-\r\n-        const SnapShot = await uploadBytes(StorageBucket, profileImg.buffer, {\r\n-          contentType: profileImg.mimetype,\r\n-        });\r\n-\r\n-        const downloadUrl = await getDownloadURL(SnapShot.ref);\r\n-\r\n-        await existingUser.updateOne({\r\n-          profileImg: {\r\n-            filename: profileImg.originalname,\r\n-            url: downloadUrl,\r\n-            contentType: profileImg.mimetype,\r\n-            path: StorageBucket.fullPath,\r\n-          },\r\n-        });\r\n-      };\r\n-\r\n-      imageToUpload();\r\n-    }\r\n-\r\n-    await existingUser.save();\r\n-\r\n-    await sendVerificationEmail(existingUser.email, nonToken);\r\n-\r\n-    return res\r\n-      .status(200)\r\n-      .json({ message: `Information Added Successfully`, existingUser });\r\n-  } catch (error) {\r\n-    const errmessage = error;\r\n-    return next(errmessage);\r\n-  } finally {\r\n-    const Notification = {\r\n-      type: \"Email Verification\",\r\n-      description: \"Please Verify Your Email\",\r\n-      title: \"System Administration\",\r\n-      assignedTo: \"All\",\r\n-      eventId: existingUser._id,\r\n-    };\r\n-    const systemNotification = new Notifications(Notification);\r\n-\r\n-    await systemNotification.save();\r\n-\r\n-    io.emit(`EmailVerification${existingUser._id}`, systemNotification);\r\n-  }\r\n-};\r\n-export const Login = async (req, res, next) => {\r\n-  const { email, password } = req.body;\r\n-\r\n-  const data = {\r\n-    email: email,\r\n-    password: password,\r\n-  };\r\n-  try {\r\n-    for (const [key, value] of Object.entries(data)) {\r\n-      if (!value) {\r\n-        return res.status(404).json({ message: `${key} is missing` });\r\n-      }\r\n-    }\r\n-    const user = await User.findOne({ email });\r\n-\r\n-    if (!user) {\r\n-      return res.status(400).json({ message: \"Account doesn't exists\" });\r\n-    }\r\n-\r\n-    if (!user || !(await user.comparePassword(password))) {\r\n-      return res.status(401).json({ message: \"Invalid Credentials\" });\r\n-    }\r\n-\r\n-    const token = jwt.sign(\r\n-      {\r\n-        id: user._id,\r\n-        role: user.role,\r\n-        profileImg: user.profileImg.url,\r\n-        name: user.name,\r\n-        verified: user.verified,\r\n-        code: user.code,\r\n-      },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: \"1h\" }\r\n-    );\r\n-\r\n-    return res.status(200).json({ token });\r\n-  } catch (error) {\r\n-    next(error);\r\n-    return res.status(500).json({ message: error.message });\r\n-  }\r\n-};\r\n-\r\n-export const codeGenerator = async (req, res, next) => {\r\n-  const { numbers = [], character = [], fiveNumbers = [] } = req.body;\r\n-\r\n-  const generateCode = () => {\r\n-    let code;\r\n-    const firstLetter = \"B\";\r\n-\r\n-    const lastFiveNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n-\r\n-    code = firstLetter + numbers[Math.floor(Math.random() * numbers.length)];\r\n-\r\n-    code += fiveNumbers[Math.floor(Math.random() * fiveNumbers.length)];\r\n-\r\n-    code += character[Math.floor(Math.random() * character.length)];\r\n-\r\n-    for (let i = 5; i < lastFiveNumbers.length; i++) {\r\n-      code +=\r\n-        lastFiveNumbers[Math.floor(Math.random() * lastFiveNumbers.length)];\r\n-    }\r\n-    return code;\r\n-  };\r\n-  const code = generateCode();\r\n-\r\n-  try {\r\n-    if (numbers.length < 1 && character.length < 1 && fiveNumbers.length < 1) {\r\n-      return res\r\n-        .status(400)\r\n-        .json({ message: \"At least one type of code is required\" });\r\n-    }\r\n-    let role;\r\n-\r\n-    MedicalStuffRegex.map((element) => {\r\n-      if (element.regex.test(code)) {\r\n-        role = element.role;\r\n-        console.log(role);\r\n-      }\r\n-    });\r\n-\r\n-    const existingCode = await codeSchema.findOne({ code });\r\n-    if (existingCode) {\r\n-      return res.status(409).json({ message: \"Code already exists\" });\r\n-    }\r\n-\r\n-    const generatedCode = new codeSchema({ code, role });\r\n-    await generatedCode.save();\r\n-\r\n-    return res.status(201).json({\r\n-      message: \"Code created successfully\",\r\n-      code: generatedCode,\r\n-    });\r\n-  } catch (error) {\r\n-    return res.status(500).json({\r\n-      message: \"An error occurred while generating the code\",\r\n-      error: error.message,\r\n-    });\r\n-  }\r\n-};\r\n-\r\n-export const verifyUser = async (req, res, next) => {\r\n-  const { token } = req.query;\r\n-\r\n-  const hashedToken = crypto.createHash(\"sha256\").update(token).digest(\"hex\");\r\n-  const existingUser = await User.findOne({\r\n-    token: hashedToken,\r\n-    expireToken: { $gt: Date.now() },\r\n-  });\r\n-\r\n-  try {\r\n-    if (!existingUser) {\r\n-      return res.status(404).json({ message: \"Invalid or expired token\" });\r\n-    }\r\n-\r\n-    existingUser.verified = true;\r\n-    existingUser.token = undefined;\r\n-    existingUser.expireToken = undefined;\r\n-\r\n-    await existingUser.save();\r\n-    return res\r\n-      .status(201)\r\n-      .json({ message: \"User has been verified successfully\" });\r\n-  } catch (error) {\r\n-    return next(error);\r\n-  } finally {\r\n-    const Notification = {\r\n-      type: \"Email Verified\",\r\n-      description: \"Email Verified Successfully\",\r\n-      title: \"System Administration\",\r\n-      assignedTo: \"All\",\r\n-      eventId: existingUser._id,\r\n-    };\r\n-    const systemNotification = new Notifications(Notification);\r\n-\r\n-    await systemNotification.save();\r\n-\r\n-    io.emit(`EmailVerification${existingUser._id}`, Notification);\r\n-  }\r\n-};\r\n-export const deleteUser = async (req, res, next) => {\r\n-  const { id } = req.params;\r\n-  const existingUser = await User.findById(id);\r\n-\r\n-  const userAppointments = await Appointment.find({ user: id });\r\n-  const userNotifications = await Notifications.find({\r\n-    $or: [{ user: id }, { eventId: id }],\r\n-  });\r\n-  const userCode = await codeSchema.findOne({ code: existingUser.code });\r\n-  try {\r\n-    if (!existingUser) {\r\n-      return res.status(404).json({ message: \"User Not Found\" });\r\n-    }\r\n-\r\n-    userAppointments.map(async (app) => await app.deleteOne());\r\n-\r\n-    userNotifications.map(\r\n-      async (notification) => await notification.deleteOne()\r\n-    );\r\n-\r\n-    userCode.used = false;\r\n-\r\n-    // const storageRef = ref(storage, existingUser.profileImg.path);\r\n-    // if (storageRef) {\r\n-    //   await deleteObject(storageRef);\r\n-    // }\r\n-\r\n-    await userCode.save();\r\n-    await existingUser.deleteOne();\r\n-\r\n-    return res\r\n-      .status(200)\r\n-      .json({ message: \"User deleted successfully\", userAppointments });\r\n-  } catch (error) {\r\n-    return next(error);\r\n-  }\r\n-};\r\n"
                },
                {
                    "date": 1739286847374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,9 +298,9 @@\n     );\r\n \r\n     return res.status(200).json({ token });\r\n   } catch (error) {\r\n-     next(error);\r\n+     return res.status(500).json({message:error.message})\r\n   }\r\n };\r\n \r\n export const codeGenerator = async (req, res, next) => {\r\n"
                },
                {
                    "date": 1739286931691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,9 +280,9 @@\n       return res.status(400).json({ message: \"Account doesn't exists\" });\r\n     }\r\n \r\n     if (!user || !(await user.comparePassword(password))) {\r\n-      return res.status(401).json({ message: \"Invalid Credentials\" });\r\n+      return res.status(401).json({ message: \"no\" });\r\n     }\r\n \r\n     const token = jwt.sign(\r\n       {\r\n"
                },
                {
                    "date": 1739286937996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,11 +275,11 @@\n       }\r\n     }\r\n     const user = await User.findOne({ email });\r\n \r\n-    if (!user) {\r\n-      return res.status(400).json({ message: \"Account doesn't exists\" });\r\n-    }\r\n+    // if (!user) {\r\n+    //   return res.status(400).json({ message: \"Account doesn't exists\" });\r\n+    // }\r\n \r\n     if (!user || !(await user.comparePassword(password))) {\r\n       return res.status(401).json({ message: \"no\" });\r\n     }\r\n"
                },
                {
                    "date": 1739287111225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,11 +275,11 @@\n       }\r\n     }\r\n     const user = await User.findOne({ email });\r\n \r\n-    // if (!user) {\r\n-    //   return res.status(400).json({ message: \"Account doesn't exists\" });\r\n-    // }\r\n+    if (!user) {\r\n+      return res.status(400).json({ message: \"Account doesn't exists\" });\r\n+    }\r\n \r\n     if (!user || !(await user.comparePassword(password))) {\r\n       return res.status(401).json({ message: \"no\" });\r\n     }\r\n"
                },
                {
                    "date": 1739287124013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,9 +276,9 @@\n     }\r\n     const user = await User.findOne({ email });\r\n \r\n     if (!user) {\r\n-      return res.status(400).json({ message: \"Account doesn't exists\" });\r\n+      return res.status(401).json({ message: \"Account doesn't exists\" });\r\n     }\r\n \r\n     if (!user || !(await user.comparePassword(password))) {\r\n       return res.status(401).json({ message: \"no\" });\r\n"
                },
                {
                    "date": 1739287135458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,9 +276,9 @@\n     }\r\n     const user = await User.findOne({ email });\r\n \r\n     if (!user) {\r\n-      return res.status(401).json({ message: \"Account doesn't exists\" });\r\n+      return res.status(404).json({ message: \"Account doesn't exists\" });\r\n     }\r\n \r\n     if (!user || !(await user.comparePassword(password))) {\r\n       return res.status(401).json({ message: \"no\" });\r\n"
                },
                {
                    "date": 1739287178456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,11 +275,8 @@\n       }\r\n     }\r\n     const user = await User.findOne({ email });\r\n \r\n-    if (!user) {\r\n-      return res.status(404).json({ message: \"Account doesn't exists\" });\r\n-    }\r\n \r\n     if (!user || !(await user.comparePassword(password))) {\r\n       return res.status(401).json({ message: \"no\" });\r\n     }\r\n"
                },
                {
                    "date": 1739287186995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n     const user = await User.findOne({ email });\r\n \r\n \r\n     if (!user || !(await user.comparePassword(password))) {\r\n-      return res.status(401).json({ message: \"no\" });\r\n+      return res.status(401).json({ message: \"invalid email \" });\r\n     }\r\n \r\n     const token = jwt.sign(\r\n       {\r\n"
                },
                {
                    "date": 1739287546861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,11 +275,14 @@\n       }\r\n     }\r\n     const user = await User.findOne({ email });\r\n \r\n+    if (!user) {\r\n+      return res.status(40).json({ message: \"Account doesn't exists\" });\r\n+    }\r\n \r\n     if (!user || !(await user.comparePassword(password))) {\r\n-      return res.status(401).json({ message: \"invalid email \" });\r\n+      return res.status(401).json({ message: \"no\" });\r\n     }\r\n \r\n     const token = jwt.sign(\r\n       {\r\n"
                }
            ],
            "date": 1739282243301,
            "name": "Commit-0",
            "content": "import { User } from \"../db/schema/user.js\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { codeSchema } from \"../db/schema/code.js\";\r\nimport { MedicalStuffRegex } from \"../lib/constants.js\";\r\nimport {\r\n  deleteObject,\r\n  getDownloadURL,\r\n  ref,\r\n  uploadBytes,\r\n} from \"firebase/storage\";\r\nimport { storage } from \"../db/firebase/firebase.js\";\r\nimport { Appointment } from \"../db/schema/appointment.js\";\r\nimport crypto from \"crypto\";\r\nimport nodemailer from \"nodemailer\";\r\nimport dotenv from \"dotenv\";\r\nimport { Notifications } from \"../db/schema/notification.js\";\r\nimport { io } from \"../server.js\";\r\nimport mongoose from 'mongoose'\r\ndotenv.config();\r\n\r\nconst generateRandomToken = () => {\r\n  const token = crypto.randomBytes(32).toString(\"hex\");\r\n  return token;\r\n};\r\n\r\nexport const sendVerificationEmail = async (to, verificationToken) => {\r\n  const transport = nodemailer.createTransport({\r\n    host: \"smtp.gmail.com\",\r\n    port: 465,\r\n    secure: true,\r\n    auth: {\r\n      user: \"omarsamir232@gmail.com\",\r\n      pass: process.env.APP_PASSWORD,\r\n    },\r\n  });\r\n  const verificationLink = `http://localhost:8080/emailVerification?token=${verificationToken}`;\r\n  const from = \"HealthCare\";\r\n  const subject = \" HealthCare Email Verification\";\r\n  const html = `\r\n    <p>Hello, ${to},</p>\r\n    <p>Please use This Link To Verify Yout Email</p>\r\n    <a href=\"${verificationLink}\">Click Here</a>\r\n    <p>Thank you</p>\r\n    `;\r\n  return new Promise((resolve, reject) => {\r\n    transport.sendMail({ from, subject, to, html }, (err, info) => {\r\n      if (err) reject(err);\r\n      resolve(info);\r\n      console.log(info);\r\n    });\r\n  });\r\n};\r\n\r\nexport const getAllUsers = async (req, res, next) => {\r\n  const users = await User.find({});\r\n  try {\r\n    if (!users) {\r\n      return res.status(404).json({ message: \"There is No Users\" });\r\n    }\r\n\r\n    return res.status(200).json({ users });\r\n  } catch (error) {\r\n    return next(error);\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const getUser = async (req, res, next) => {\r\n  const { id } = req.params;\r\n\r\n  if (!mongoose.Types.ObjectId.isValid(id)) {\r\n    return res.status(400).json({ error: 'Invalid ID format' });\r\n  }\r\n\r\n  const existingUser = await User.findById(id);\r\n  try {\r\n    if (!existingUser) {\r\n      return res.status(404).json({ message: \"User Not Found\" });\r\n    }\r\n\r\n    return res.status(200).json({ existingUser });\r\n  } catch (error) {\r\n    return next(error.message);\r\n  }\r\n};\r\n\r\nexport const register = async (req, res, next) => {\r\n  const {\r\n    name,\r\n    email,\r\n    password,\r\n    confirmPassword,\r\n    code,\r\n    phone,\r\n    birthDate,\r\n    gender,\r\n  } = req.body;\r\n\r\n\r\n  const requiredFields = {name,email,password,confirmPassword,gender,code,birthDate,phone}\r\n\r\n  try {\r\n    for(let [value,key] of Object.entries(requiredFields)){\r\n      if(!value){\r\n        return res.status(404).json({ msg: `Some Fields Are Missing Out` });\r\n\r\n      }\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      return res.status(403).json({ msg: \"Passwords Must Match\" });\r\n    }\r\n  \r\n    const existingUser = await User.findOne({ email });\r\n\r\n    if (existingUser) {\r\n      return res.status(403).json({ msg: \"user already exists\" });\r\n    }\r\n\r\n    const Code = await codeSchema.findOne({ code });\r\n\r\n    if (!Code) {\r\n      return res.status(404).json({ msg: \"Invalid Code Supported\" });\r\n    }\r\n\r\n    const existingCode = await User.findOne({ code });\r\n    if (existingCode) {\r\n      return res.status(409).json({ msg: \"This Code is Used\" });\r\n    }\r\n\r\n    Code.used = true\r\n\r\n    const newUser = new User({\r\n      name,\r\n      email,\r\n      password,\r\n      gender,\r\n      phone,\r\n      birthDate,\r\n      role: Code.role,\r\n      code: code,\r\n      verified: false,\r\n      profileImg: \"\",\r\n      weight: 0,\r\n      height: 0,\r\n      counrty: \"\",\r\n      bio: \"\",\r\n      occupation: \"\",\r\n      address: \"\",\r\n    });\r\n    await Code.save()\r\n\r\n    await newUser.save();\r\n\r\n    return res.status(201).json({\r\n      msg: \"User registered successfully\",\r\n      user: newUser,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ msg: error.message });\r\n  }\r\n};\r\nexport const AddAddtionalInformation = async (req, res, next) => {\r\n  const { id } = req.params;\r\n  const { height, weight, occupation, country, address, bio, profileState } =\r\n    req.body;\r\n\r\n  const profileImg = req.file;\r\n  const nonToken = generateRandomToken();\r\n  const token = crypto.createHash(\"sha256\").update(nonToken).digest(\"hex\");\r\n  const expireToken = Date.now() + 1 * 24 * 60 * 60 * 1000;\r\n\r\n  const requiredInformation = {\r\n    profileState,\r\n    height,\r\n    weight,\r\n    occupation,\r\n    country,\r\n    token,\r\n    expireToken,\r\n  };\r\n\r\n  const optionalInformation = { bio, address };\r\n  const existingUser = await User.findById(id);\r\n\r\n  try {\r\n    if (!existingUser) {\r\n      return res.status(404).json({ msg: \"User not found\" });\r\n    }\r\n    for (const [key, value] of Object.entries(requiredInformation)) {\r\n      if (!value) {\r\n        return res.status(404).json({ msg: `Some Fields Are Missing Out` });\r\n      }\r\n    }\r\n\r\n    for (const [key, value] of Object.entries(optionalInformation)) {\r\n      if (value) {\r\n        existingUser[key] = value;\r\n      }\r\n    }\r\n\r\n\r\n    for (const [key, value] of Object.entries(requiredInformation)) {\r\n      existingUser[key] = value;\r\n    }\r\n\r\n    if (profileImg) {\r\n      const imageToUpload = async () => {\r\n        const StorageBucket = ref(\r\n          storage,\r\n          `Doctors/${existingUser._id}/${existingUser._id}`\r\n        );\r\n\r\n        const SnapShot = await uploadBytes(StorageBucket, profileImg.buffer, {\r\n          contentType: profileImg.mimetype,\r\n        });\r\n\r\n        const downloadUrl = await getDownloadURL(SnapShot.ref);\r\n\r\n        await existingUser.updateOne({\r\n          profileImg: {\r\n            filename: profileImg.originalname,\r\n            url: downloadUrl,\r\n            contentType: profileImg.mimetype,\r\n            path: StorageBucket.fullPath,\r\n          },\r\n        });\r\n      };\r\n\r\n      imageToUpload();\r\n    }\r\n\r\n    await existingUser.save();\r\n\r\n    await sendVerificationEmail(existingUser.email, nonToken);\r\n\r\n    return res.status(200).json({ msg: `Information Added Successfully`, existingUser });\r\n  } catch (error) {\r\n    const errMsg = error;\r\n    return next(errMsg);\r\n  }finally{\r\n    const Notification = {\r\n      type: \"Email Verification\",\r\n      description: \"Please Verify Your Email\",\r\n      title: \"System Administration\",\r\n      assignedTo: \"All\",\r\n      eventId: existingUser._id,\r\n    };\r\n   const systemNotification = new Notifications(Notification);\r\n\r\n    await systemNotification.save();\r\n\r\n    io.emit(`EmailVerification${existingUser._id}`, systemNotification);\r\n\r\n  }\r\n};\r\nexport const Login = async (req, res, next) => {\r\n  const { email, password } = req.body;\r\n  if (!email || !password) {\r\n    return res.status(404).json({ msg: \"Some Fields Are Missing Out\" });\r\n  }\r\n  try {\r\n    const user = await User.findOne({ email });\r\n\r\n    if (!user) {\r\n      return res.status(400).json({ msg: \"Account doesn't exists\" });\r\n    }\r\n\r\n    if (!user || !(await user.comparePassword(password))) {\r\n      return res.status(401).json({ msg: \"Invalid Credentials\" });\r\n    }\r\n\r\n    const token = jwt.sign(\r\n      {\r\n        id: user._id,\r\n        role: user.role,\r\n        profileImg: user.profileImg.url,\r\n        name: user.name,\r\n        verified: user.verified,\r\n        code:user.code\r\n      },\r\n      process.env.JWT_SECRET,\r\n      { expiresIn: \"1h\" }\r\n    );\r\n\r\n    return res.status(201).json({ token });\r\n  } catch (error) {\r\n     next(error);\r\n     return res.status(500)\r\n  }\r\n};\r\nexport const codeGenerator = async (req, res, next) => {\r\n  const { numbers = [], character = [], fiveNumbers = [] } = req.body;\r\n\r\n  const generateCode = () => {\r\n    let code;\r\n    const firstLetter = \"B\";\r\n\r\n    const lastFiveNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n    code = firstLetter + numbers[Math.floor(Math.random() * numbers.length)];\r\n\r\n    code += fiveNumbers[Math.floor(Math.random() * fiveNumbers.length)];\r\n\r\n    code += character[Math.floor(Math.random() * character.length)];\r\n\r\n    for (let i = 5; i < lastFiveNumbers.length; i++) {\r\n      code +=\r\n        lastFiveNumbers[Math.floor(Math.random() * lastFiveNumbers.length)];\r\n    }\r\n    return code;\r\n  };\r\n  const code = generateCode();\r\n\r\n  try {\r\n    if (numbers.length < 1 && character.length < 1 && fiveNumbers.length < 1) {\r\n      return res\r\n        .status(400)\r\n        .json({ msg: \"At least one type of code is required\" });\r\n    }\r\n    let role;\r\n\r\n    MedicalStuffRegex.map((element) => {\r\n      if (element.regex.test(code)) {\r\n        role = element.role;\r\n        console.log(role);\r\n      }\r\n    });\r\n\r\n    const existingCode = await codeSchema.findOne({ code });\r\n    if (existingCode) {\r\n      return res.status(409).json({ msg: \"Code already exists\" });\r\n    }\r\n\r\n    const generatedCode = new codeSchema({ code, role });\r\n    await generatedCode.save();\r\n\r\n    return res.status(201).json({\r\n      msg: \"Code created successfully\",\r\n      code: generatedCode,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      msg: \"An error occurred while generating the code\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const verifyUser = async (req, res, next) => {\r\n  const { token } = req.query;\r\n\r\n  const hashedToken = crypto.createHash(\"sha256\").update(token).digest(\"hex\");\r\n  const existingUser = await User.findOne({\r\n    token: hashedToken,\r\n    expireToken: { $gt: Date.now() },\r\n  });\r\n\r\n  try {\r\n   \r\n    if (!existingUser) {\r\n      return res.status(404).json({ message: \"Invalid or expired token\" });\r\n    }\r\n\r\n    existingUser.verified = true;\r\n    existingUser.token = undefined;\r\n    existingUser.expireToken = undefined;\r\n\r\n  \r\n    await existingUser.save();\r\n    return res\r\n      .status(201)\r\n      .json({ message: \"User has been verified successfully\" });\r\n  } catch (error) {\r\n    return next(error);\r\n  }finally{\r\n\r\n    const Notification = {\r\n      type: \"Email Verified\",\r\n      description: \"Email Verified Successfully\",\r\n      title: \"System Administration\",\r\n      assignedTo: \"All\",\r\n      eventId: existingUser._id,\r\n    };\r\n   const systemNotification = new Notifications(Notification);\r\n\r\n    await systemNotification.save();\r\n\r\n    io.emit(`EmailVerification${existingUser._id}`, Notification);\r\n  }\r\n};\r\nexport const deleteUser = async (req, res, next) => {\r\n  const { id } = req.params;\r\n  const existingUser = await User.findById(id);\r\n\r\n  const userAppointments = await Appointment.find({ user: id });\r\n  const userNotifications = await Notifications.find({$or:[{user:id},{eventId:id}]})\r\n  const userCode = await codeSchema.findOne({code:existingUser.code})\r\n  try {\r\n    if (!existingUser) {\r\n      return res.status(404).json({ message: \"User Not Found\" });\r\n    }\r\n\r\n    userAppointments.map(async (app) => await app.deleteOne());\r\n\r\n    userNotifications.map(async(notification) => await notification.deleteOne())\r\n\r\n    userCode.used = false\r\n\r\n    // const storageRef = ref(storage, existingUser.profileImg.path);\r\n    // if (storageRef) {\r\n    //   await deleteObject(storageRef);\r\n    // }\r\n\r\n    await userCode.save()\r\n    await existingUser.deleteOne();\r\n    \r\n\r\n    return res\r\n      .status(200)\r\n      .json({ message: \"User deleted successfully\", userAppointments });\r\n  } catch (error) {\r\n    return next(error);\r\n  }\r\n};\r\n\r\n\r\n"
        }
    ]
}